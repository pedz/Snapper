var search_data = {"index":{"searchIndex":["array","file","gem","docmanager","sourceindex","specification","hash","insertion","module","object","rack","request","string","symbolhash","webrick","httprequest","yard","cli","command","commandparser","config","diff","display","gems","graph","graphoptions","help","i18n","list","markuptypes","server","stats","yri","yardoc","yardocoptions","yardoptscommand","codeobjects","base","classobject","classvariableobject","codeobjectlist","constantobject","extendedmethodobject","extrafileobject","macroobject","methodobject","moduleobject","namespaceobject","proxy","proxymethoderror","rootobject","config","docstring","docstringparser","handlers","base","c","aliashandler","attributehandler","base","classhandler","constanthandler","handlermethods","inithandler","methodhandler","mixinhandler","modulehandler","overridecommenthandler","pathhandler","structhandler","symbolhandler","handleraborted","namespacemissingerror","processor","ruby","aliashandler","attributehandler","base","classconditionhandler","classhandler","classvariablehandler","commenthandler","constanthandler","dslhandler","dslhandlermethods","exceptionhandler","extendhandler","handlesextension","legacy","aliashandler","attributehandler","base","classconditionhandler","classhandler","classvariablehandler","commenthandler","constanthandler","dslhandler","exceptionhandler","extendhandler","methodhandler","mixinhandler","modulefunctionhandler","modulehandler","privateclassmethodhandler","privateconstanthandler","visibilityhandler","yieldhandler","methodcallwrapper","methodconditionhandler","methodhandler","mixinhandler","modulefunctionhandler","modulehandler","privateclassmethodhandler","privateconstanthandler","structhandlermethods","testnodewrapper","visibilityhandler","yieldhandler","i18n","locale","message","messages","poparser","potgenerator","text","logger","options","parser","base","c","bodystatement","cparser","comment","commentparser","statement","toplevelstatement","orderedparser","parsersyntaxerror","ruby","astnode","classnode","commentnode","conditionalnode","keywordnode","legacy","rubylex","bufferedreader","rubyparser","rubytoken","tkblockcontents","tkerror","tkid","tkkw","tknode","tkopasgn","tkop","tkstatementend","tkunknownchar","tkval","tkwhitespace","token","statement","statementlist","tokenlist","literalnode","loopnode","methodcallnode","methoddefinitionnode","modulenode","parameternode","referencenode","ripperparser","rubyparser","sourceparser","undocumentableerror","rake","yardoctask","registry","registrystore","serializers","base","filesystemserializer","processserializer","stdoutserializer","yardocserializer","server","adapter","commands","base","displayfilecommand","displayobjectcommand","framescommand","librarycommand","obj","obj;","libraryindexcommand","libraryoptions","listcommand","searchcommand","staticfilecommand","docserverhelper","docserverserializer","finishrequest","librarynotpreparederror","libraryversion","notfounderror","rackadapter","rackmiddleware","router","staticcaching","webrickadapter","webrickservlet","stubproxy","tags","attributedirective","defaultfactory","defaulttag","directive","endgroupdirective","groupdirective","library","macrodirective","methoddirective","optiontag","overloadtag","parsedirective","reftag","reftaglist","scopedirective","tag","tagformaterror","visibilitydirective","templates","engine","erbcache","helpers","basehelper","filterhelper","htmlhelper","htmlsyntaxhighlighthelper","markup","rdocmarkdown","rdocmarkup","rdocmarkup","rdocmarkuptohtml","rdocmarkuptohtml","rdoc","markuphelper","methodhelper","modulehelper","texthelper","umlhelper","section","template","classmethods","templateoptions","verifier","+()","<<()","<<()","<<()","<<()","<=>()","==()","==()","==()","==()","==()","==()","==()","==()","==()","===()","===()","===()","p()","s()","t()","t()","token()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","__p()","_dump()","_dump()","_dump_with_rdoc()","_dump_without_rdoc()","_load()","abort!()","accept_paragraph()","adapter()","add()","add_api_verifier()","add_comment()","add_comment()","add_default_paths()","add_expressions()","add_extra_files()","add_file()","add_gem_paths()","add_gems()","add_gems()","add_gems_from_gemfile()","add_ignored_plugins_file()","add_libraries()","add_library()","add_location()","add_options()","add_reader_tags()","add_spec()","add_specs()","add_tag()","add_tag()","add_tag()","add_token()","add_visibility_verifier()","add_writer_tags()","added_objects()","advance()","advance_loop()","after()","after_any()","after_parse()","after_parse()","after_parse()","after_parse()","after_parse_callbacks()","after_parse_file()","after_parse_file_callbacks()","after_parse_list()","after_parse_list_callbacks()","after_serialize()","aliases()","align_right()","all()","all=()","all_disk_objects()","all_gems()","all_objects()","all_objects()","all_objects()","anchor_for()","anonymous?()","any()","apply()","apply_locale()","apply_macro()","arguments()","at()","attach?()","attach_comment()","attached?()","attr_info()","attributes()","available?()","back()","backtrace()","balances?()","base_path()","basepath=()","before()","before_any()","before_parse_file()","before_parse_file_callbacks()","before_parse_list()","before_parse_list_callbacks()","before_serialize()","blank?()","block()","block()","block()","block()","block?()","block_param()","block_param()","build_gems()","cache()","cache()","cache_filename()","cache_object()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call()","call?()","call?()","call_after_parse_callbacks()","call_directives_after_parse()","call_has_paren?()","call_params()","call_params()","call_params()","caller_method()","caller_method()","caller_method()","capture()","char()","char_no()","charset()","check_static_cache()","checksum_for()","checksums()","checksums_path()","checksums_path()","child()","children()","class()","class_attributes()","class_method?()","class_name()","class_name()","clean_tokens()","cleanpath()","cleanup()","clear()","clear!()","clear_line()","clear_markup_cache()","clear_progress()","clear_subclasses()","cmod?()","column()","commands()","comment_starts_line?()","comments()","comments()","comments_range()","common_options()","condition()","condition()","condition?()","condition?()","constants()","constants()","constructor?()","consume_body_statements()","consume_comment()","consume_directive()","consume_quote()","consume_toplevel_statement()","consume_until()","consume_whitespace()","contents()","contents=()","convert_encoding()","convert_method_to_overload()","convert_ref_tags()","convert_token()","copy_assets()","copy_to()","copyable_attributes()","copyable_attributes()","create()","create()","create_186()","create_attribute_data()","create_attributes()","create_class()","create_directive()","create_docstring()","create_library_version_if_yardopts_exist()","create_member_method?()","create_method_from_expressions()","create_object()","create_reader()","create_ref_tag()","create_struct_superclass()","create_struct_superclass()","create_tag()","create_writer()","current_time()","cvars()","debug()","debug?()","def?()","def?()","def_token()","default=()","default_attr()","default_factory()","default_factory=()","define()","define_directive()","define_tag()","delete()","delete()","delete()","delete()","delete_from_disk()","delete_tag_if()","delete_tags()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","description()","deserialize()","destroy()","detect_reference()","directive_call()","directive_create()","directive_method_name()","divert_read_from()","do_get()","docs_prefix()","docstring()","docstring()","docstring=()","docstring=()","double_splat_param()","dump()","dump()","dup()","dup()","dynamic?()","each()","each()","each()","each()","each()","else_block()","embed_mixins_match?()","emit_attribute_event()","emit_empty_line_event()","emit_markup_event()","emit_paragraph_event()","encode_path_components()","encode_value()","encode_values()","encoding_line()","encoding_line()","ensure_loaded!()","ensure_parsed()","enter_level()","enumerator()","enumerator()","enumerator()","enumerator()","enumerator()","eql?()","eql?()","eql?()","eql?()","equal?()","equal?()","equal?()","equal?()","equal?()","erb()","erb_file_for()","erb_with()","escape_message_id()","exists?()","exists?()","expand()","expand()","expand()","expand_and_parse()","expand_gem()","expressions=()","extension=()","extract_db_from_options_file()","extract_documents()","extract_messages()","extract_method_details()","extract_name_from_text()","extract_paragraphs()","extract_parameters()","extract_parameters()","extract_parameters()","extract_parameters()","extract_tag_documents()","extract_tag_name()","extract_tag_text()","extract_title_and_desc_from_text()","extract_types_and_name_from_text()","extract_types_and_name_from_text_unstripped()","factory_method_for()","factory_method_for_directive()","favicon?()","file()","file()","file()","file=()","file_encoding()","final_options()","find()","find_attached_macro()","find_constant_docstring()","find_file()","find_handlers()","find_method_body()","find_name()","find_nth_file()","find_object()","find_or_create()","find_or_create()","find_template_paths()","first_line()","first_line()","first_line()","first_line()","fix_dash_dash()","fix_typewriter()","fix_typewriter()","format()","format_args()","format_args()","format_block()","format_code()","format_constant()","format_lines()","format_log()","format_object_name_list()","format_object_title()","format_object_type()","format_objects()","format_path()","format_return_types()","format_source()","format_source()","format_types()","format_types()","freeze_tree()","from_gems_in()","from_installed_gems()","full_paths()","full_source()","fulldoc_template()","gem_signature()","gemspec()","general_options()","general_options()","general_options()","generate()","generate()","generate_doc_for_first_time()","generate_message()","generate_pot()","generate_pot_creation_date_value()","generate_yardoc()","get()","get_read()","get_read()","getc()","getc()","getc_already_read()","getc_of_rests()","gets()","global_yardoc_file()","globals()","h()","h()","h()","h()","handle_alias()","handle_attribute()","handle_class()","handle_comments()","handle_constants()","handle_method()","handle_module()","handle_special_hyperlink()","handler()","handler_base_class()","handler_base_namespace()","handlers()","handles()","handles?()","handles?()","handles?()","handles?()","handles?()","has_directive?()","has_key?()","has_line?()","has_rdoc?()","has_tag?()","has_tag?()","has_tag?()","has_tag?()","has_yardoc()","has_yardoc=()","has_yardoc?()","hash()","hash()","hash()","hash()","hash()","hash()","hash_flag=()","header()","hr()","html_markup_asciidoc()","html_markup_html()","html_markup_markdown()","html_markup_none()","html_markup_pre()","html_markup_rdoc()","html_markup_ruby()","html_markup_text()","html_markup_textile()","html_markup_textile_strict()","html_syntax_highlight()","html_syntax_highlight_plain()","html_syntax_highlight_ruby()","html_syntax_highlight_ruby_legacy()","html_syntax_highlight_ruby_ripper()","htmlify()","htmlify_line()","identify_comment()","identify_gvar()","identify_here_document()","identify_identifier()","identify_number()","identify_quotation()","identify_string()","implicit_docstring?()","in_file()","include_extra()","include_inherited()","include_parent()","included()","included_constants()","included_meths()","indent()","index()","index_adjust()","index_adjust()","index_signature()","inheritance_tree()","inheritance_tree()","inherited()","inherited_constants()","inherited_meths()","init()","init()","insert_comments()","insertion()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","install_rdoc()","install_rdoc_yard()","install_rdoc_yard_orig()","install_ri()","install_ri_yard()","install_ri_yard_orig()","install_yardoc()","installed_spec_directories()","instance()","instance()","instance()","instance_attributes()","instance_of?()","internal_dump()","io()","io=()","is_a?()","is_a?()","is_a?()","is_alias?()","is_attribute?()","is_class?()","is_exception?()","is_explicit?()","is_method?()","is_module?()","is_namespace?()","javascripts()","jump()","keys()","kind_of?()","kind_of?()","kw?()","kw?()","kw?()","latest_specs()","length()","lex()","lex_init()","lex_int2()","library()","line()","line()","line()","line()","line_no()","line_range()","line_range()","line_range()","link_file()","link_file()","link_include_file()","link_include_file()","link_include_object()","link_include_object()","link_object()","link_object()","link_url()","link_url()","linkify()","list_commands()","list_configuration()","list_prefix()","literal?()","literal?()","load()","load()","load()","load()","load!()","load!()","load_all()","load_all()","load_autoload_plugins()","load_cache()","load_checksums()","load_commandline_plugins()","load_commandline_safemode()","load_gem_data()","load_gem_plugins()","load_gems_in()","load_git_commit()","load_handlers()","load_locale()","load_markup_provider()","load_object_types()","load_plugin()","load_plugin_failed()","load_plugins()","load_plugins()","load_proxy_types()","load_root()","load_script()","load_scripts()","load_setup_rb()","load_source_path()","load_specification()","load_template_paths()","load_yardoc()","load_yardoc()","load_yardoc()","load_yardoc()","load_yardoc_from_disk()","load_yardoc_from_gem()","load_yardoc_old()","local_yardoc_file()","locale()","locale()","locale=()","log()","loop?()","loop?()","markup_class()","markup_file_contents()","markup_for_file()","markup_provider()","matches?()","matches?()","matches?()","matches_file?()","member_tag_for_member()","members_from_tags()","merge()","merge()","merge!()","meta_type()","method_call()","method_for()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_name()","method_name()","method_name()","method_name()","method_name()","method_signature()","method_signature()","method_signature()","method_signature()","meths()","meths()","mixins()","modified_objects()","modify_item()","modify_nilclass()","module_function?()","module_name()","name()","name()","name()","name()","name()","named_params()","namespace()","namespace()","namespace()","namespace()","namespace=()","namespace=()","namespace_for_variable()","namespace_name()","namespace_only()","namespace_only?()","namespaces()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new!()","new?()","next_statement()","nextchar()","nextline()","no_highlight=()","node_class_for()","not_found()","not_found()","not_prepared()","object()","object=()","object_path()","object_types_path()","object_types_path()","objects_path()","objects_path()","old_initialize()","on_aref()","on_aref_field()","on_array()","on_assoc_new()","on_assoclist_from_args()","on_bare_assoc_hash()","on_body_stmt()","on_bodystmt()","on_comment()","on_const_path_ref()","on_embdoc()","on_embdoc_beg()","on_embdoc_end()","on_hash()","on_label()","on_lambda()","on_lbracket()","on_params()","on_parse_error()","on_program()","on_qwords_add()","on_qwords_new()","on_rbracket()","on_rescue()","on_string_content()","on_string_literal()","on_top_const_ref()","on_unary()","on_void_stmt()","open!()","options=()","optparse()","optparse()","optparse()","optparse()","optparse()","optparse()","optparse()","optparse()","outdated()","output()","output_options()","output_options()","overridden_method()","override_comments()","owner=()","parameters()","parameters()","parent=()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse()","parse_arguments()","parse_arguments()","parse_arguments()","parse_block()","parse_block()","parse_block()","parse_block()","parse_callseq()","parse_codeblocks()","parse_comments()","parse_comments()","parse_condition()","parse_condition()","parse_content()","parse_content()","parse_contents()","parse_else_block()","parse_else_block()","parse_expression()","parse_files()","parse_files()","parse_in_order()","parse_lang_for_codeblock()","parse_library_from_path()","parse_objects()","parse_options()","parse_overrides()","parse_rdoc_document_file()","parse_remaining_files()","parse_sections()","parse_signature()","parse_statements()","parse_string()","parse_string()","parse_struct_subclass()","parse_struct_superclass()","parse_superclass()","parse_superclass()","parse_tag()","parse_tag()","parse_tag_with_name()","parse_tag_with_options()","parse_tag_with_title_and_text()","parse_tag_with_types()","parse_tag_with_types_and_name()","parse_tag_with_types_and_title()","parse_tag_with_types_name_and_default()","parse_then_block()","parse_then_block()","parse_toplevel()","parse_types()","parse_yardopts()","parse_yardopts_options()","parser()","parser_class()","parser_type=()","parser_type=()","parser_type_extensions=()","parser_type_for_extension()","parser_type_for_filename()","parser_types=()","partial_resolve()","path()","path()","path()","path()","path()","path()","paths()","paths_for_type()","peek()","peek()","peek_equal()","peek_equal?()","peek_no_space()","place()","place()","po_dir=()","post_process()","prepare!()","prerelease_gems()","prerelease_specs()","pretty_print()","prevchar()","print()","print_list()","print_no_newline()","print_object()","print_start_message()","print_statistics()","print_undocumented_objects()","print_usage()","privatize_class_method()","privatize_class_method()","privatize_constant()","privatize_constant()","process()","process()","process()","process_block_token()","process_complex_block_opener()","process_constant()","process_file()","process_initial_comment()","process_mixin()","process_mixin()","process_mixin()","process_mixin()","process_simple_block_opener()","process_statement_end()","process_structclass()","process_structclass()","process_token()","processed_files()","progress()","proxy_path()","proxy_types()","proxy_types_path()","proxy_types_path()","prune_method_listing()","push()","push()","push()","push_state()","push_token()","put()","puts()","read_binary()","read_config_file()","read_escape()","readable?()","reader?()","redirect()","ref?()","ref?()","refresh!()","register()","register()","register()","register_docstring()","register_docstring()","register_docstring()","register_docstring()","register_dynamic()","register_ensure_loaded()","register_file_info()","register_file_info()","register_file_info()","register_group()","register_handler_namespace()","register_message()","register_module_function()","register_parser_type()","register_source()","register_source()","register_static_path()","register_template_path()","register_transitive_tags()","register_visibility()","register_visibility()","relative_path()","relative_path()","released_gems()","released_specs()","remove_private_comments()","remove_spec()","remove_var_prefix()","removed_objects()","render()","render()","render_section()","replace()","require_rubygems()","reset_defaults()","reset_full_paths()","reset_line_info()","resolve()","resolve_links()","resolve_reference()","respond_to?()","restore_template_info()","return_type_from_tag()","root()","root()","root?()","root?()","root?()","route()","route_docs()","route_index()","route_list()","route_search()","router()","ruby18?()","ruby19?()","ruby2?()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run()","run_generate()","run_verifier()","run_verifier()","run_yardoc()","s()","sanitize_block()","sanitize_statement_end()","sanitized_tag_signature()","save()","save()","save()","save_default_template_info()","scope()","scope()","scope()","scope=()","scope=()","search()","search()","search_for_object()","search_prefix()","sections()","select_adapter()","send_to_factory()","sep()","sep()","sep()","serialize()","serialize()","serialize()","serialize()","serialize()","serialize()","serialized_path()","serialized_path()","serialized_path()","serialized_path()","serializer()","serve_normal()","serve_xhr()","set_default_options()","set_ivars()","set_text()","set_token_position()","setup()","setup_library()","setup_rdoc()","setup_yardopts()","shebang_line()","shebang_line()","shell_split()","show()","show()","show()","show_backtraces()","show_progress()","shutdown()","signature()","signature()","signature_types()","single_library()","single_object_db=()","size()","skip_inner_expression()","sorted_labels()","source()","source()","source=()","source_index()","source_path_for_disk()","source_path_for_gem()","source_range()","specification()","splat_param()","squeeze()","start()","start()","start()","statement_class()","stats_for_classes()","stats_for_constants()","stats_for_files()","stats_for_methods()","stats_for_modules()","strip_non_statement_data()","struct()","struct_superclass_name()","struct_superclass_name()","stylesheets()","subclasses()","summary()","superb()","superclass()","superclass=()","support_rdoc_document_file!()","symbols()","tag()","tag()","tag()","tag_attrs()","tag_create()","tag_is_directive?()","tag_method_name()","tag_options()","tag_or_directive_method_name()","tags()","tags()","tags()","tags()","tap()","template()","template!()","template_module_name()","text()","text()","then_block()","thread_local_store()","thread_local_store=()","tidy()","title()","title()","title()","title()","title_align_right()","to_a()","to_ary()","to_ary()","to_docstring()","to_hash()","to_html()","to_obj()","to_raw()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_str()","token()","token?()","tokenize()","tokenize()","tokenize()","tokenize()","tokenize()","tokenize()","tokval()","tokval_list()","translate()","translate()","translate()","translate_docstring()","translate_plugin_name()","translate_plugin_names()","traverse()","try_load_object()","type()","type()","type()","type()","type()","type=()","type_statistics()","uml_visibility()","unfreeze()","ungetc()","ungetc()","unmodify_nilclass()","unnamed_end_params()","unnamed_optional_params()","unnamed_required_params()","unrecognized_option()","unrecognized_option()","unshift()","update()","update()","url_for()","url_for()","url_for()","url_for_file()","url_for_file()","url_for_frameset()","url_for_frameset()","url_for_index()","url_for_index()","url_for_list()","url_for_list()","url_for_main()","url_for_main()","urlencode()","urlencode()","use_indented_text()","validated_attribute_names()","validated_parser_type()","value=()","values()","values_for_type()","verify_markup_options()","view_item()","visibility=()","visibility=()","visible_results()","visit_event()","visit_event_arr()","visit_ns_token()","warn()","warn_no_continuations()","windows?()","with_section()","with_serializer()","with_yardopts()","word_wrap()","wrap()","wrap_layout()","writable?()","write_checksums()","write_object_types()","write_proxy_types()","writer?()","xhr?()","xhr?()","yardoc_file=()","yardoc_file_for_gem()","yardopts()","yardopts_options()","yieldall()","license","mit","custom.css","autocomplete.js"],"longSearchIndex":["array","file","gem","gem::docmanager","gem::sourceindex","gem::specification","hash","insertion","module","object","rack","rack::request","string","symbolhash","webrick","webrick::httprequest","yard","yard::cli","yard::cli::command","yard::cli::commandparser","yard::cli::config","yard::cli::diff","yard::cli::display","yard::cli::gems","yard::cli::graph","yard::cli::graphoptions","yard::cli::help","yard::cli::i18n","yard::cli::list","yard::cli::markuptypes","yard::cli::server","yard::cli::stats","yard::cli::yri","yard::cli::yardoc","yard::cli::yardocoptions","yard::cli::yardoptscommand","yard::codeobjects","yard::codeobjects::base","yard::codeobjects::classobject","yard::codeobjects::classvariableobject","yard::codeobjects::codeobjectlist","yard::codeobjects::constantobject","yard::codeobjects::extendedmethodobject","yard::codeobjects::extrafileobject","yard::codeobjects::macroobject","yard::codeobjects::methodobject","yard::codeobjects::moduleobject","yard::codeobjects::namespaceobject","yard::codeobjects::proxy","yard::codeobjects::proxymethoderror","yard::codeobjects::rootobject","yard::config","yard::docstring","yard::docstringparser","yard::handlers","yard::handlers::base","yard::handlers::c","yard::handlers::c::aliashandler","yard::handlers::c::attributehandler","yard::handlers::c::base","yard::handlers::c::classhandler","yard::handlers::c::constanthandler","yard::handlers::c::handlermethods","yard::handlers::c::inithandler","yard::handlers::c::methodhandler","yard::handlers::c::mixinhandler","yard::handlers::c::modulehandler","yard::handlers::c::overridecommenthandler","yard::handlers::c::pathhandler","yard::handlers::c::structhandler","yard::handlers::c::symbolhandler","yard::handlers::handleraborted","yard::handlers::namespacemissingerror","yard::handlers::processor","yard::handlers::ruby","yard::handlers::ruby::aliashandler","yard::handlers::ruby::attributehandler","yard::handlers::ruby::base","yard::handlers::ruby::classconditionhandler","yard::handlers::ruby::classhandler","yard::handlers::ruby::classvariablehandler","yard::handlers::ruby::commenthandler","yard::handlers::ruby::constanthandler","yard::handlers::ruby::dslhandler","yard::handlers::ruby::dslhandlermethods","yard::handlers::ruby::exceptionhandler","yard::handlers::ruby::extendhandler","yard::handlers::ruby::handlesextension","yard::handlers::ruby::legacy","yard::handlers::ruby::legacy::aliashandler","yard::handlers::ruby::legacy::attributehandler","yard::handlers::ruby::legacy::base","yard::handlers::ruby::legacy::classconditionhandler","yard::handlers::ruby::legacy::classhandler","yard::handlers::ruby::legacy::classvariablehandler","yard::handlers::ruby::legacy::commenthandler","yard::handlers::ruby::legacy::constanthandler","yard::handlers::ruby::legacy::dslhandler","yard::handlers::ruby::legacy::exceptionhandler","yard::handlers::ruby::legacy::extendhandler","yard::handlers::ruby::legacy::methodhandler","yard::handlers::ruby::legacy::mixinhandler","yard::handlers::ruby::legacy::modulefunctionhandler","yard::handlers::ruby::legacy::modulehandler","yard::handlers::ruby::legacy::privateclassmethodhandler","yard::handlers::ruby::legacy::privateconstanthandler","yard::handlers::ruby::legacy::visibilityhandler","yard::handlers::ruby::legacy::yieldhandler","yard::handlers::ruby::methodcallwrapper","yard::handlers::ruby::methodconditionhandler","yard::handlers::ruby::methodhandler","yard::handlers::ruby::mixinhandler","yard::handlers::ruby::modulefunctionhandler","yard::handlers::ruby::modulehandler","yard::handlers::ruby::privateclassmethodhandler","yard::handlers::ruby::privateconstanthandler","yard::handlers::ruby::structhandlermethods","yard::handlers::ruby::testnodewrapper","yard::handlers::ruby::visibilityhandler","yard::handlers::ruby::yieldhandler","yard::i18n","yard::i18n::locale","yard::i18n::message","yard::i18n::messages","yard::i18n::poparser","yard::i18n::potgenerator","yard::i18n::text","yard::logger","yard::options","yard::parser","yard::parser::base","yard::parser::c","yard::parser::c::bodystatement","yard::parser::c::cparser","yard::parser::c::comment","yard::parser::c::commentparser","yard::parser::c::statement","yard::parser::c::toplevelstatement","yard::parser::orderedparser","yard::parser::parsersyntaxerror","yard::parser::ruby","yard::parser::ruby::astnode","yard::parser::ruby::classnode","yard::parser::ruby::commentnode","yard::parser::ruby::conditionalnode","yard::parser::ruby::keywordnode","yard::parser::ruby::legacy","yard::parser::ruby::legacy::rubylex","yard::parser::ruby::legacy::rubylex::bufferedreader","yard::parser::ruby::legacy::rubyparser","yard::parser::ruby::legacy::rubytoken","yard::parser::ruby::legacy::rubytoken::tkblockcontents","yard::parser::ruby::legacy::rubytoken::tkerror","yard::parser::ruby::legacy::rubytoken::tkid","yard::parser::ruby::legacy::rubytoken::tkkw","yard::parser::ruby::legacy::rubytoken::tknode","yard::parser::ruby::legacy::rubytoken::tkopasgn","yard::parser::ruby::legacy::rubytoken::tkop","yard::parser::ruby::legacy::rubytoken::tkstatementend","yard::parser::ruby::legacy::rubytoken::tkunknownchar","yard::parser::ruby::legacy::rubytoken::tkval","yard::parser::ruby::legacy::rubytoken::tkwhitespace","yard::parser::ruby::legacy::rubytoken::token","yard::parser::ruby::legacy::statement","yard::parser::ruby::legacy::statementlist","yard::parser::ruby::legacy::tokenlist","yard::parser::ruby::literalnode","yard::parser::ruby::loopnode","yard::parser::ruby::methodcallnode","yard::parser::ruby::methoddefinitionnode","yard::parser::ruby::modulenode","yard::parser::ruby::parameternode","yard::parser::ruby::referencenode","yard::parser::ruby::ripperparser","yard::parser::ruby::rubyparser","yard::parser::sourceparser","yard::parser::undocumentableerror","yard::rake","yard::rake::yardoctask","yard::registry","yard::registrystore","yard::serializers","yard::serializers::base","yard::serializers::filesystemserializer","yard::serializers::processserializer","yard::serializers::stdoutserializer","yard::serializers::yardocserializer","yard::server","yard::server::adapter","yard::server::commands","yard::server::commands::base","yard::server::commands::displayfilecommand","yard::server::commands::displayobjectcommand","yard::server::commands::framescommand","yard::server::commands::librarycommand","yard::server::commands::librarycommand::obj","yard::server::commands::librarycommand::obj;","yard::server::commands::libraryindexcommand","yard::server::commands::libraryoptions","yard::server::commands::listcommand","yard::server::commands::searchcommand","yard::server::commands::staticfilecommand","yard::server::docserverhelper","yard::server::docserverserializer","yard::server::finishrequest","yard::server::librarynotpreparederror","yard::server::libraryversion","yard::server::notfounderror","yard::server::rackadapter","yard::server::rackmiddleware","yard::server::router","yard::server::staticcaching","yard::server::webrickadapter","yard::server::webrickservlet","yard::stubproxy","yard::tags","yard::tags::attributedirective","yard::tags::defaultfactory","yard::tags::defaulttag","yard::tags::directive","yard::tags::endgroupdirective","yard::tags::groupdirective","yard::tags::library","yard::tags::macrodirective","yard::tags::methoddirective","yard::tags::optiontag","yard::tags::overloadtag","yard::tags::parsedirective","yard::tags::reftag","yard::tags::reftaglist","yard::tags::scopedirective","yard::tags::tag","yard::tags::tagformaterror","yard::tags::visibilitydirective","yard::templates","yard::templates::engine","yard::templates::erbcache","yard::templates::helpers","yard::templates::helpers::basehelper","yard::templates::helpers::filterhelper","yard::templates::helpers::htmlhelper","yard::templates::helpers::htmlsyntaxhighlighthelper","yard::templates::helpers::markup","yard::templates::helpers::markup::rdocmarkdown","yard::templates::helpers::markup::rdocmarkup","yard::templates::helpers::markup::rdocmarkup::rdocmarkup","yard::templates::helpers::markup::rdocmarkup::rdocmarkup::rdocmarkuptohtml","yard::templates::helpers::markup::rdocmarkup::rdocmarkuptohtml","yard::templates::helpers::markup::rdocmarkup::rdocmarkuptohtml::rdoc","yard::templates::helpers::markuphelper","yard::templates::helpers::methodhelper","yard::templates::helpers::modulehelper","yard::templates::helpers::texthelper","yard::templates::helpers::umlhelper","yard::templates::section","yard::templates::template","yard::templates::template::classmethods","yard::templates::templateoptions","yard::verifier","yard::docstring#+()","yard::codeobjects::codeobjectlist#<<()","yard::logger#<<()","yard::parser::ruby::legacy::tokenlist#<<()","yard::templates::section#<<()","yard::codeobjects::proxy#<=>()","yard::codeobjects::base#==()","yard::codeobjects::extrafileobject#==()","yard::codeobjects::proxy#==()","yard::i18n::message#==()","yard::i18n::messages#==()","yard::options#==()","yard::parser::ruby::astnode#==()","yard::server::libraryversion#==()","yard::templates::section#==()","yard::codeobjects::base::===()","yard::codeobjects::proxy#===()","yard::codeobjects::proxy::===()","object#p()","yard::templates::template::classmethods#s()","yard::templates::template#t()","yard::templates::template::classmethods#t()","yard::parser::ruby::legacy::rubytoken#token()","hash::[]()","symbolhash#[]()","symbolhash::[]()","yard::codeobjects::base#[]()","yard::i18n::messages#[]()","yard::options#[]()","yard::registry::[]()","yard::registrystore#[]()","yard::templates::section#[]()","symbolhash#[]=()","yard::codeobjects::base#[]=()","yard::options#[]=()","yard::registrystore#[]=()","object#__p()","gem::specification#_dump()","yard::stubproxy#_dump()","gem::specification#_dump_with_rdoc()","gem::specification#_dump_without_rdoc()","yard::stubproxy::_load()","yard::handlers::base#abort!()","yard::templates::helpers::markup::rdocmarkup::rdocmarkuptohtml#accept_paragraph()","yard::server::commands::libraryoptions#adapter()","yard::logger#add()","yard::cli::yardoc#add_api_verifier()","yard::i18n::message#add_comment()","yard::parser::ruby::ripperparser#add_comment()","yard::cli::yri#add_default_paths()","yard::verifier#add_expressions()","yard::cli::yardoc#add_extra_files()","yard::codeobjects::base#add_file()","yard::cli::yri#add_gem_paths()","yard::cli::gems#add_gems()","yard::cli::server#add_gems()","yard::cli::server#add_gems_from_gemfile()","yard::config::add_ignored_plugins_file()","yard::cli::server#add_libraries()","yard::server::adapter#add_library()","yard::i18n::message#add_location()","yard::templates::template#add_options()","yard::handlers::ruby::structhandlermethods#add_reader_tags()","gem::sourceindex#add_spec()","gem::sourceindex#add_specs()","yard::cli::yardoc#add_tag()","yard::codeobjects::base#add_tag()","yard::docstring#add_tag()","yard::parser::ruby::ripperparser#add_token()","yard::cli::yardoc#add_visibility_verifier()","yard::handlers::ruby::structhandlermethods#add_writer_tags()","yard::cli::diff#added_objects()","yard::parser::c::cparser#advance()","yard::parser::c::cparser#advance_loop()","insertion#after()","insertion#after_any()","yard::docstringparser::after_parse()","yard::tags::attributedirective#after_parse()","yard::tags::directive#after_parse()","yard::tags::methoddirective#after_parse()","yard::docstringparser::after_parse_callbacks()","yard::parser::sourceparser::after_parse_file()","yard::parser::sourceparser::after_parse_file_callbacks()","yard::parser::sourceparser::after_parse_list()","yard::parser::sourceparser::after_parse_list_callbacks()","yard::serializers::base#after_serialize()","yard::codeobjects::methodobject#aliases()","yard::templates::helpers::texthelper#align_right()","yard::registry::all()","yard::docstring#all=()","yard::registrystore#all_disk_objects()","gem::sourceindex#all_gems()","yard::cli::diff#all_objects()","yard::cli::stats#all_objects()","yard::cli::yardoc#all_objects()","yard::templates::helpers::htmlhelper#anchor_for()","yard::tags::macrodirective#anonymous?()","yard::templates::section#any()","yard::codeobjects::macroobject::apply()","yard::cli::yardoc#apply_locale()","yard::codeobjects::macroobject::apply_macro()","yard::config::arguments()","yard::registry::at()","yard::tags::macrodirective#attach?()","yard::parser::c::cparser#attach_comment()","yard::codeobjects::macroobject#attached?()","yard::codeobjects::methodobject#attr_info()","yard::codeobjects::extrafileobject#attributes()","yard::i18n::poparser::available?()","yard::parser::c::cparser#back()","yard::logger#backtrace()","yard::parser::ruby::legacy::statementlist#balances?()","yard::server::docserverhelper#base_path()","yard::serializers::filesystemserializer#basepath=()","insertion#before()","insertion#before_any()","yard::parser::sourceparser::before_parse_file()","yard::parser::sourceparser::before_parse_file_callbacks()","yard::parser::sourceparser::before_parse_list()","yard::parser::sourceparser::before_parse_list_callbacks()","yard::serializers::base#before_serialize()","yard::docstring#blank?()","yard::parser::ruby::classnode#block()","yard::parser::ruby::loopnode#block()","yard::parser::ruby::methodcallnode#block()","yard::parser::ruby::modulenode#block()","yard::parser::ruby::astnode#block?()","yard::parser::ruby::methodcallnode#block_param()","yard::parser::ruby::parameternode#block_param()","yard::cli::gems#build_gems()","yard::server::commands::base#cache()","yard::templates::template#cache()","yard::templates::template#cache_filename()","yard::cli::yri#cache_object()","yard::server::commands::base#call()","yard::server::commands::librarycommand#call()","yard::server::rackadapter#call()","yard::server::rackmiddleware#call()","yard::server::router#call()","yard::tags::directive#call()","yard::tags::endgroupdirective#call()","yard::tags::groupdirective#call()","yard::tags::macrodirective#call()","yard::tags::methoddirective#call()","yard::tags::parsedirective#call()","yard::tags::scopedirective#call()","yard::tags::visibilitydirective#call()","yard::verifier#call()","yard::parser::ruby::astnode#call?()","yard::parser::ruby::methodcallnode#call?()","yard::docstringparser#call_after_parse_callbacks()","yard::docstringparser#call_directives_after_parse()","yard::parser::ruby::methodcallnode#call_has_paren?()","yard::handlers::base#call_params()","yard::handlers::ruby::base#call_params()","yard::handlers::ruby::legacy::base#call_params()","yard::handlers::base#caller_method()","yard::handlers::ruby::base#caller_method()","yard::handlers::ruby::legacy::base#caller_method()","yard::logger#capture()","yard::parser::c::cparser#char()","yard::parser::ruby::legacy::rubylex#char_no()","yard::templates::helpers::htmlhelper#charset()","yard::server::staticcaching#check_static_cache()","yard::registry::checksum_for()","yard::registry::checksums()","yard::registrystore#checksums_path()","yard::serializers::yardocserializer#checksums_path()","yard::codeobjects::namespaceobject#child()","yard::parser::ruby::astnode#children()","yard::codeobjects::proxy#class()","yard::codeobjects::namespaceobject#class_attributes()","yard::tags::macrodirective#class_method?()","module#class_name()","yard::parser::ruby::classnode#class_name()","yard::parser::ruby::legacy::statement#clean_tokens()","file::cleanpath()","yard::cli::diff#cleanup()","yard::registry::clear()","yard::templates::erbcache::clear!()","yard::logger#clear_line()","yard::templates::helpers::markuphelper::clear_markup_cache()","yard::logger#clear_progress()","yard::handlers::base::clear_subclasses()","yard::parser::ruby::conditionalnode#cmod?()","yard::parser::ruby::legacy::rubylex::bufferedreader#column()","yard::cli::commandparser#commands()","yard::parser::ruby::ripperparser#comment_starts_line?()","yard::parser::c::comment#comments()","yard::parser::ruby::commentnode#comments()","yard::parser::c::statement#comments_range()","yard::cli::command#common_options()","yard::parser::ruby::conditionalnode#condition()","yard::parser::ruby::loopnode#condition()","yard::parser::ruby::astnode#condition?()","yard::parser::ruby::conditionalnode#condition?()","yard::codeobjects::classobject#constants()","yard::codeobjects::namespaceobject#constants()","yard::codeobjects::methodobject#constructor?()","yard::parser::c::cparser#consume_body_statements()","yard::parser::c::cparser#consume_comment()","yard::parser::c::cparser#consume_directive()","yard::parser::c::cparser#consume_quote()","yard::parser::c::cparser#consume_toplevel_statement()","yard::parser::c::cparser#consume_until()","yard::parser::c::cparser#consume_whitespace()","yard::codeobjects::extrafileobject#contents()","yard::codeobjects::extrafileobject#contents=()","yard::parser::sourceparser#convert_encoding()","yard::templates::helpers::htmlhelper#convert_method_to_overload()","yard::docstring#convert_ref_tags()","yard::parser::ruby::legacy::tokenlist#convert_token()","yard::cli::yardoc#copy_assets()","yard::codeobjects::base#copy_to()","yard::codeobjects::base#copyable_attributes()","yard::codeobjects::methodobject#copyable_attributes()","hash::create()","yard::codeobjects::macroobject::create()","hash::create_186()","yard::tags::attributedirective#create_attribute_data()","yard::handlers::ruby::structhandlermethods#create_attributes()","yard::handlers::ruby::structhandlermethods#create_class()","yard::docstringparser#create_directive()","yard::codeobjects::macroobject::create_docstring()","yard::cli::server#create_library_version_if_yardopts_exist()","yard::handlers::ruby::structhandlermethods#create_member_method?()","yard::verifier#create_method_from_expressions()","yard::tags::methoddirective#create_object()","yard::handlers::ruby::structhandlermethods#create_reader()","yard::docstringparser#create_ref_tag()","yard::handlers::ruby::classhandler#create_struct_superclass()","yard::handlers::ruby::legacy::classhandler#create_struct_superclass()","yard::docstringparser#create_tag()","yard::handlers::ruby::structhandlermethods#create_writer()","yard::i18n::potgenerator#current_time()","yard::codeobjects::namespaceobject#cvars()","yard::logger#debug()","yard::parser::ruby::legacy::rubylex::debug?()","yard::parser::ruby::astnode#def?()","yard::parser::ruby::methoddefinitionnode#def?()","yard::parser::ruby::legacy::rubytoken::def_token()","yard::i18n::locale::default=()","yard::options::default_attr()","yard::tags::library::default_factory()","yard::tags::library::default_factory=()","yard::rake::yardoctask#define()","yard::tags::library::define_directive()","yard::tags::library::define_tag()","symbolhash#delete()","yard::options#delete()","yard::registry::delete()","yard::registrystore#delete()","yard::registry::delete_from_disk()","yard::docstring#delete_tag_if()","yard::docstring#delete_tags()","yard::cli::command#description()","yard::cli::config#description()","yard::cli::diff#description()","yard::cli::display#description()","yard::cli::gems#description()","yard::cli::graph#description()","yard::cli::help#description()","yard::cli::i18n#description()","yard::cli::list#description()","yard::cli::markuptypes#description()","yard::cli::server#description()","yard::cli::stats#description()","yard::cli::yri#description()","yard::cli::yardoc#description()","yard::serializers::yardocserializer#deserialize()","yard::registrystore#destroy()","yard::docstringparser#detect_reference()","yard::tags::library#directive_call()","yard::tags::library#directive_create()","yard::tags::library::directive_method_name()","yard::parser::ruby::legacy::rubylex::bufferedreader#divert_read_from()","yard::server::webrickservlet#do_get()","yard::server::router#docs_prefix()","yard::codeobjects::base#docstring()","yard::parser::ruby::commentnode#docstring()","yard::codeobjects::base#docstring=()","yard::parser::ruby::commentnode#docstring=()","yard::parser::ruby::parameternode#double_splat_param()","gem::sourceindex#dump()","yard::serializers::yardocserializer#dump()","yard::docstring#dup()","yard::templates::section#dup()","yard::codeobjects::base#dynamic?()","gem::sourceindex#each()","yard::i18n::messages#each()","yard::options#each()","yard::registry::each()","yard::server::commands::libraryoptions#each()","yard::parser::ruby::conditionalnode#else_block()","yard::templates::templateoptions#embed_mixins_match?()","yard::i18n::text#emit_attribute_event()","yard::i18n::text#emit_empty_line_event()","yard::i18n::text#emit_markup_event()","yard::i18n::text#emit_paragraph_event()","yard::serializers::filesystemserializer#encode_path_components()","yard::cli::config#encode_value()","yard::cli::config#encode_values()","yard::parser::ruby::legacy::rubyparser#encoding_line()","yard::parser::ruby::rubyparser#encoding_line()","yard::handlers::base#ensure_loaded!()","yard::codeobjects::extrafileobject#ensure_parsed()","yard::logger#enter_level()","yard::parser::base#enumerator()","yard::parser::c::cparser#enumerator()","yard::parser::ruby::legacy::rubyparser#enumerator()","yard::parser::ruby::ripperparser#enumerator()","yard::parser::ruby::rubyparser#enumerator()","yard::codeobjects::base#eql?()","yard::codeobjects::extrafileobject#eql?()","yard::server::libraryversion#eql?()","yard::templates::section#eql?()","yard::codeobjects::base#equal?()","yard::codeobjects::extrafileobject#equal?()","yard::codeobjects::proxy#equal?()","yard::codeobjects::rootobject#equal?()","yard::server::libraryversion#equal?()","yard::templates::template#erb()","yard::templates::template#erb_file_for()","yard::templates::template#erb_with()","yard::i18n::potgenerator#escape_message_id()","yard::serializers::base#exists?()","yard::serializers::filesystemserializer#exists?()","yard::codeobjects::macroobject::expand()","yard::codeobjects::macroobject#expand()","yard::tags::macrodirective#expand()","yard::cli::diff#expand_and_parse()","yard::cli::diff#expand_gem()","yard::verifier#expressions=()","yard::serializers::filesystemserializer#extension=()","yard::cli::server#extract_db_from_options_file()","yard::i18n::potgenerator#extract_documents()","yard::i18n::text#extract_messages()","yard::handlers::ruby::legacy::base#extract_method_details()","yard::tags::defaultfactory#extract_name_from_text()","yard::i18n::potgenerator#extract_paragraphs()","yard::handlers::ruby::classhandler#extract_parameters()","yard::handlers::ruby::constanthandler#extract_parameters()","yard::handlers::ruby::legacy::classhandler#extract_parameters()","yard::handlers::ruby::legacy::constanthandler#extract_parameters()","yard::i18n::potgenerator#extract_tag_documents()","yard::i18n::potgenerator#extract_tag_name()","yard::i18n::potgenerator#extract_tag_text()","yard::tags::defaultfactory#extract_title_and_desc_from_text()","yard::tags::defaultfactory#extract_types_and_name_from_text()","yard::tags::defaultfactory#extract_types_and_name_from_text_unstripped()","yard::tags::library::factory_method_for()","yard::tags::library::factory_method_for_directive()","yard::server::commands::staticfilecommand#favicon?()","yard::codeobjects::base#file()","yard::parser::ruby::astnode#file()","yard::templates::template#file()","yard::cli::yardocoptions#file=()","yard::parser::ruby::ripperparser#file_encoding()","yard::server::router#final_options()","yard::codeobjects::macroobject::find()","yard::handlers::ruby::dslhandlermethods#find_attached_macro()","yard::handlers::c::handlermethods#find_constant_docstring()","yard::templates::template::classmethods#find_file()","yard::handlers::processor#find_handlers()","yard::handlers::c::handlermethods#find_method_body()","gem::sourceindex#find_name()","yard::templates::template::classmethods#find_nth_file()","yard::cli::yri#find_object()","yard::codeobjects::macroobject::find_or_create()","yard::tags::macrodirective#find_or_create()","yard::templates::engine::find_template_paths()","yard::parser::c::statement#first_line()","yard::parser::ruby::astnode#first_line()","yard::parser::ruby::commentnode#first_line()","yard::parser::ruby::legacy::statement#first_line()","yard::templates::helpers::markup::rdocmarkup::rdocmarkup#fix_dash_dash()","yard::templates::helpers::markup::rdocmarkdown#fix_typewriter()","yard::templates::helpers::markup::rdocmarkup::rdocmarkup#fix_typewriter()","yard::codeobjects::base#format()","yard::handlers::ruby::methodhandler#format_args()","yard::templates::helpers::methodhelper#format_args()","yard::templates::helpers::methodhelper#format_block()","yard::templates::helpers::methodhelper#format_code()","yard::templates::helpers::methodhelper#format_constant()","yard::templates::helpers::methodhelper#format_lines()","yard::logger#format_log()","yard::templates::helpers::htmlhelper#format_object_name_list()","yard::templates::helpers::basehelper#format_object_title()","yard::templates::helpers::basehelper#format_object_type()","yard::cli::display#format_objects()","yard::templates::helpers::umlhelper#format_path()","yard::templates::helpers::methodhelper#format_return_types()","yard::codeobjects::base#format_source()","yard::templates::helpers::basehelper#format_source()","yard::templates::helpers::basehelper#format_types()","yard::templates::helpers::htmlhelper#format_types()","yard::parser::ruby::ripperparser#freeze_tree()","gem::sourceindex::from_gems_in()","gem::sourceindex::from_installed_gems()","yard::templates::template::classmethods#full_paths()","yard::parser::ruby::astnode#full_source()","yard::server::commands::librarycommand#fulldoc_template()","gem::sourceindex#gem_signature()","yard::server::libraryversion#gemspec()","yard::cli::i18n#general_options()","yard::cli::stats#general_options()","yard::cli::yardoc#general_options()","yard::i18n::potgenerator#generate()","yard::templates::engine::generate()","yard::cli::server#generate_doc_for_first_time()","yard::i18n::potgenerator#generate_message()","yard::cli::i18n#generate_pot()","yard::i18n::potgenerator#generate_pot_creation_date_value()","yard::cli::diff#generate_yardoc()","yard::registrystore#get()","yard::parser::ruby::legacy::rubylex#get_read()","yard::parser::ruby::legacy::rubylex::bufferedreader#get_read()","yard::parser::ruby::legacy::rubylex#getc()","yard::parser::ruby::legacy::rubylex::bufferedreader#getc()","yard::parser::ruby::legacy::rubylex::bufferedreader#getc_already_read()","yard::parser::ruby::legacy::rubylex#getc_of_rests()","yard::parser::ruby::legacy::rubylex#gets()","yard::registry::global_yardoc_file()","yard::templates::helpers::basehelper#globals()","yard::templates::helpers::basehelper#h()","yard::templates::helpers::htmlhelper#h()","yard::templates::helpers::texthelper#h()","yard::templates::helpers::umlhelper#h()","yard::handlers::c::handlermethods#handle_alias()","yard::handlers::c::handlermethods#handle_attribute()","yard::handlers::c::handlermethods#handle_class()","yard::handlers::ruby::dslhandlermethods#handle_comments()","yard::handlers::c::handlermethods#handle_constants()","yard::handlers::c::handlermethods#handle_method()","yard::handlers::c::handlermethods#handle_module()","yard::templates::helpers::markup::rdocmarkup::rdocmarkuptohtml#handle_special_hyperlink()","yard::tags::directive#handler()","yard::handlers::processor#handler_base_class()","yard::handlers::processor#handler_base_namespace()","yard::handlers::base::handlers()","yard::handlers::base::handles()","yard::handlers::base::handles?()","yard::handlers::c::base::handles?()","yard::handlers::processor#handles?()","yard::handlers::ruby::base::handles?()","yard::handlers::ruby::legacy::base::handles?()","yard::tags::library#has_directive?()","symbolhash#has_key?()","yard::parser::ruby::astnode#has_line?()","gem::specification#has_rdoc?()","yard::codeobjects::base#has_tag?()","yard::docstring#has_tag?()","yard::tags::library#has_tag?()","yard::tags::overloadtag#has_tag?()","gem::specification#has_yardoc()","gem::specification#has_yardoc=()","gem::specification#has_yardoc?()","yard::codeobjects::base#hash()","yard::codeobjects::extrafileobject#hash()","yard::codeobjects::proxy#hash()","yard::codeobjects::rootobject#hash()","yard::server::libraryversion#hash()","yard::stubproxy#hash()","yard::docstring#hash_flag=()","yard::i18n::potgenerator#header()","yard::templates::helpers::texthelper#hr()","yard::templates::helpers::htmlhelper#html_markup_asciidoc()","yard::templates::helpers::htmlhelper#html_markup_html()","yard::templates::helpers::htmlhelper#html_markup_markdown()","yard::templates::helpers::htmlhelper#html_markup_none()","yard::templates::helpers::htmlhelper#html_markup_pre()","yard::templates::helpers::htmlhelper#html_markup_rdoc()","yard::templates::helpers::htmlhelper#html_markup_ruby()","yard::templates::helpers::htmlhelper#html_markup_text()","yard::templates::helpers::htmlhelper#html_markup_textile()","yard::templates::helpers::htmlhelper#html_markup_textile_strict()","yard::templates::helpers::htmlhelper#html_syntax_highlight()","yard::templates::helpers::htmlhelper#html_syntax_highlight_plain()","yard::templates::helpers::htmlsyntaxhighlighthelper#html_syntax_highlight_ruby()","yard::templates::helpers::htmlsyntaxhighlighthelper#html_syntax_highlight_ruby_legacy()","yard::templates::helpers::htmlsyntaxhighlighthelper#html_syntax_highlight_ruby_ripper()","yard::templates::helpers::htmlhelper#htmlify()","yard::templates::helpers::htmlhelper#htmlify_line()","yard::parser::ruby::legacy::rubylex#identify_comment()","yard::parser::ruby::legacy::rubylex#identify_gvar()","yard::parser::ruby::legacy::rubylex#identify_here_document()","yard::parser::ruby::legacy::rubylex#identify_identifier()","yard::parser::ruby::legacy::rubylex#identify_number()","yard::parser::ruby::legacy::rubylex#identify_quotation()","yard::parser::ruby::legacy::rubylex#identify_string()","yard::handlers::ruby::dslhandlermethods#implicit_docstring?()","yard::handlers::base::in_file()","yard::templates::template::include_extra()","yard::templates::template::classmethods#include_inherited()","yard::templates::template::classmethods#include_parent()","yard::templates::template::included()","yard::codeobjects::namespaceobject#included_constants()","yard::codeobjects::namespaceobject#included_meths()","yard::templates::helpers::texthelper#indent()","yard::server::commands::displayobjectcommand#index()","yard::parser::ruby::methodcallnode#index_adjust()","yard::parser::ruby::methoddefinitionnode#index_adjust()","gem::sourceindex#index_signature()","yard::codeobjects::classobject#inheritance_tree()","yard::codeobjects::moduleobject#inheritance_tree()","yard::handlers::base::inherited()","yard::codeobjects::classobject#inherited_constants()","yard::codeobjects::classobject#inherited_meths()","object#init()","yard::templates::template#init()","yard::parser::ruby::ripperparser#insert_comments()","insertion#insertion()","yard::codeobjects::base#inspect()","yard::codeobjects::extrafileobject#inspect()","yard::codeobjects::proxy#inspect()","yard::codeobjects::rootobject#inspect()","yard::options#inspect()","yard::parser::ruby::astnode#inspect()","yard::parser::ruby::legacy::statement#inspect()","yard::templates::section#inspect()","yard::templates::template#inspect()","gem::docmanager#install_rdoc()","gem::docmanager#install_rdoc_yard()","gem::docmanager#install_rdoc_yard_orig()","gem::docmanager#install_ri()","gem::docmanager#install_ri_yard()","gem::docmanager#install_ri_yard_orig()","gem::docmanager#install_yardoc()","gem::sourceindex::installed_spec_directories()","yard::logger::instance()","yard::registry::instance()","yard::tags::library::instance()","yard::codeobjects::namespaceobject#instance_attributes()","yard::codeobjects::proxy#instance_of?()","yard::serializers::yardocserializer#internal_dump()","yard::logger#io()","yard::logger#io=()","yard::codeobjects::proxy#is_a?()","yard::tags::overloadtag#is_a?()","yard::templates::template::classmethods#is_a?()","yard::codeobjects::methodobject#is_alias?()","yard::codeobjects::methodobject#is_attribute?()","yard::templates::helpers::filterhelper#is_class?()","yard::codeobjects::classobject#is_exception?()","yard::codeobjects::methodobject#is_explicit?()","yard::templates::helpers::filterhelper#is_method?()","yard::templates::helpers::filterhelper#is_module?()","yard::templates::helpers::filterhelper#is_namespace?()","object#javascripts()","yard::parser::ruby::astnode#jump()","yard::registrystore#keys()","yard::codeobjects::proxy#kind_of?()","yard::tags::overloadtag#kind_of?()","yard::parser::ruby::astnode#kw?()","yard::parser::ruby::keywordnode#kw?()","yard::parser::ruby::methoddefinitionnode#kw?()","gem::sourceindex#latest_specs()","gem::sourceindex#length()","yard::parser::ruby::legacy::rubylex#lex()","yard::parser::ruby::legacy::rubylex#lex_init()","yard::parser::ruby::legacy::rubylex#lex_int2()","yard::server::commands::libraryoptions#library()","yard::codeobjects::base#line()","yard::docstring#line()","yard::parser::ruby::astnode#line()","yard::parser::ruby::legacy::statement#line()","yard::parser::ruby::legacy::rubylex#line_no()","yard::parser::c::statement#line_range()","yard::parser::ruby::astnode#line_range()","yard::parser::ruby::legacy::statement#line_range()","yard::templates::helpers::basehelper#link_file()","yard::templates::helpers::htmlhelper#link_file()","yard::templates::helpers::basehelper#link_include_file()","yard::templates::helpers::htmlhelper#link_include_file()","yard::templates::helpers::basehelper#link_include_object()","yard::templates::helpers::htmlhelper#link_include_object()","yard::templates::helpers::basehelper#link_object()","yard::templates::helpers::htmlhelper#link_object()","yard::templates::helpers::basehelper#link_url()","yard::templates::helpers::htmlhelper#link_url()","yard::templates::helpers::basehelper#linkify()","yard::cli::commandparser#list_commands()","yard::cli::config#list_configuration()","yard::server::router#list_prefix()","yard::parser::ruby::astnode#literal?()","yard::parser::ruby::literalnode#literal?()","yard::config::load()","yard::i18n::locale#load()","yard::registry::load()","yard::registrystore#load()","yard::registry::load!()","yard::registrystore#load!()","yard::registry::load_all()","yard::registrystore#load_all()","yard::config::load_autoload_plugins()","yard::cli::yri#load_cache()","yard::registrystore#load_checksums()","yard::config::load_commandline_plugins()","yard::config::load_commandline_safemode()","yard::cli::diff#load_gem_data()","yard::config::load_gem_plugins()","gem::sourceindex#load_gems_in()","yard::cli::diff#load_git_commit()","yard::handlers::processor#load_handlers()","yard::registrystore#load_locale()","yard::templates::helpers::markuphelper#load_markup_provider()","yard::registrystore#load_object_types()","yard::config::load_plugin()","yard::config::load_plugin_failed()","yard::load_plugins()","yard::config::load_plugins()","yard::registrystore#load_proxy_types()","yard::registrystore#load_root()","yard::cli::command#load_script()","yard::cli::server#load_scripts()","yard::templates::template::classmethods#load_setup_rb()","yard::server::libraryversion#load_source_path()","gem::sourceindex::load_specification()","yard::cli::server#load_template_paths()","gem::docmanager::load_yardoc()","yard::registry::load_yardoc()","yard::registrystore#load_yardoc()","yard::server::commands::librarycommand#load_yardoc()","yard::server::libraryversion#load_yardoc_from_disk()","yard::server::libraryversion#load_yardoc_from_gem()","yard::registrystore#load_yardoc_old()","yard::registry::local_yardoc_file()","yard::registry::locale()","yard::registrystore#locale()","yard::codeobjects::extrafileobject#locale=()","object#log()","yard::parser::ruby::astnode#loop?()","yard::parser::ruby::loopnode#loop?()","yard::templates::helpers::markuphelper#markup_class()","yard::templates::helpers::markuphelper#markup_file_contents()","yard::templates::helpers::markuphelper#markup_for_file()","yard::templates::helpers::markuphelper#markup_provider()","yard::handlers::ruby::handlesextension#matches?()","yard::handlers::ruby::methodcallwrapper#matches?()","yard::handlers::ruby::testnodewrapper#matches?()","yard::handlers::base::matches_file?()","yard::handlers::ruby::structhandlermethods#member_tag_for_member()","yard::handlers::ruby::structhandlermethods#members_from_tags()","symbolhash#merge()","yard::options#merge()","symbolhash#merge!()","yard::handlers::ruby::base::meta_type()","yard::handlers::ruby::base::method_call()","yard::templates::erbcache::method_for()","yard::codeobjects::base#method_missing()","yard::codeobjects::extendedmethodobject#method_missing()","yard::codeobjects::proxy#method_missing()","yard::options#method_missing()","yard::stubproxy#method_missing()","yard::tags::overloadtag#method_missing()","yard::verifier#method_missing()","yard::handlers::ruby::dslhandlermethods#method_name()","yard::parser::ruby::methodcallnode#method_name()","yard::parser::ruby::methoddefinitionnode#method_name()","yard::tags::attributedirective#method_name()","yard::tags::methoddirective#method_name()","yard::handlers::ruby::dslhandlermethods#method_signature()","yard::handlers::ruby::methodhandler#method_signature()","yard::tags::attributedirective#method_signature()","yard::tags::methoddirective#method_signature()","yard::codeobjects::classobject#meths()","yard::codeobjects::namespaceobject#meths()","yard::codeobjects::namespaceobject#mixins()","yard::cli::diff#modified_objects()","yard::cli::config#modify_item()","yard::verifier#modify_nilclass()","yard::codeobjects::methodobject#module_function?()","yard::parser::ruby::modulenode#module_name()","yard::codeobjects::base#name()","yard::codeobjects::methodobject#name()","yard::codeobjects::proxy#name()","yard::parser::ruby::legacy::rubytoken::tkop#name()","yard::tags::overloadtag#name()","yard::parser::ruby::parameternode#named_params()","yard::docstringparser#namespace()","yard::parser::ruby::methodcallnode#namespace()","yard::parser::ruby::methoddefinitionnode#namespace()","yard::parser::ruby::referencenode#namespace()","yard::codeobjects::base#namespace=()","yard::handlers::base#namespace=()","yard::handlers::c::base#namespace_for_variable()","module#namespace_name()","yard::handlers::base::namespace_only()","yard::handlers::base::namespace_only?()","yard::handlers::c::base#namespaces()","gem::sourceindex::new()","insertion::new()","symbolhash::new()","yard::cli::commandparser::new()","yard::cli::config::new()","yard::cli::diff::new()","yard::cli::display::new()","yard::cli::gems::new()","yard::cli::graph::new()","yard::cli::i18n::new()","yard::cli::server::new()","yard::cli::stats::new()","yard::cli::yri::new()","yard::cli::yardoc::new()","yard::cli::yardoptscommand::new()","yard::codeobjects::base::new()","yard::codeobjects::base::new()","yard::codeobjects::classobject::new()","yard::codeobjects::codeobjectlist::new()","yard::codeobjects::extendedmethodobject::new()","yard::codeobjects::extrafileobject::new()","yard::codeobjects::methodobject::new()","yard::codeobjects::namespaceobject::new()","yard::codeobjects::proxy::new()","yard::docstring::new()","yard::docstringparser::new()","yard::handlers::base::new()","yard::handlers::namespacemissingerror::new()","yard::handlers::processor::new()","yard::handlers::ruby::handlesextension::new()","yard::i18n::locale::new()","yard::i18n::message::new()","yard::i18n::messages::new()","yard::i18n::potgenerator::new()","yard::i18n::text::new()","yard::logger::new()","yard::parser::base::new()","yard::parser::c::cparser::new()","yard::parser::c::comment::new()","yard::parser::c::statement::new()","yard::parser::orderedparser::new()","yard::parser::ruby::astnode::new()","yard::parser::ruby::legacy::rubylex::new()","yard::parser::ruby::legacy::rubylex::bufferedreader::new()","yard::parser::ruby::legacy::rubyparser::new()","yard::parser::ruby::legacy::rubytoken::tkid::new()","yard::parser::ruby::legacy::rubytoken::tkopasgn::new()","yard::parser::ruby::legacy::rubytoken::tkunknownchar::new()","yard::parser::ruby::legacy::rubytoken::tkval::new()","yard::parser::ruby::legacy::rubytoken::token::new()","yard::parser::ruby::legacy::statement::new()","yard::parser::ruby::legacy::statementlist::new()","yard::parser::ruby::legacy::tokenlist::new()","yard::parser::ruby::ripperparser::new()","yard::parser::ruby::rubyparser::new()","yard::parser::sourceparser::new()","yard::rake::yardoctask::new()","yard::registrystore::new()","yard::serializers::base::new()","yard::serializers::filesystemserializer::new()","yard::serializers::processserializer::new()","yard::serializers::stdoutserializer::new()","yard::serializers::yardocserializer::new()","yard::server::adapter::new()","yard::server::commands::base::new()","yard::server::commands::librarycommand::new()","yard::server::docserverserializer::new()","yard::server::libraryversion::new()","yard::server::rackmiddleware::new()","yard::server::router::new()","yard::server::webrickservlet::new()","yard::stubproxy::new()","yard::tags::defaulttag::new()","yard::tags::directive::new()","yard::tags::library::new()","yard::tags::optiontag::new()","yard::tags::overloadtag::new()","yard::tags::reftaglist::new()","yard::tags::tag::new()","yard::templates::helpers::markup::rdocmarkdown::new()","yard::templates::helpers::markup::rdocmarkup::rdocmarkup::new()","yard::templates::helpers::markup::rdocmarkup::rdocmarkuptohtml::new()","yard::templates::section::new()","yard::templates::template::new()","yard::templates::template::classmethods#new()","yard::templates::template::classmethods::new()","yard::verifier::new()","yard::docstring::new!()","yard::tags::macrodirective#new?()","yard::parser::ruby::legacy::statementlist#next_statement()","yard::parser::c::cparser#nextchar()","yard::parser::c::cparser#nextline()","yard::templates::templateoptions#no_highlight=()","yard::parser::ruby::astnode::node_class_for()","yard::server::commands::base#not_found()","yard::server::commands::displayobjectcommand#not_found()","yard::server::commands::librarycommand#not_prepared()","yard::tags::directive#object()","yard::tags::overloadtag#object=()","yard::server::commands::displayobjectcommand#object_path()","yard::registrystore#object_types_path()","yard::serializers::yardocserializer#object_types_path()","yard::registrystore#objects_path()","yard::serializers::yardocserializer#objects_path()","gem::sourceindex#old_initialize()","yard::parser::ruby::ripperparser#on_aref()","yard::parser::ruby::ripperparser#on_aref_field()","yard::parser::ruby::ripperparser#on_array()","yard::parser::ruby::ripperparser#on_assoc_new()","yard::parser::ruby::ripperparser#on_assoclist_from_args()","yard::parser::ruby::ripperparser#on_bare_assoc_hash()","yard::parser::ruby::ripperparser#on_body_stmt()","yard::parser::ruby::ripperparser#on_bodystmt()","yard::parser::ruby::ripperparser#on_comment()","yard::parser::ruby::ripperparser#on_const_path_ref()","yard::parser::ruby::ripperparser#on_embdoc()","yard::parser::ruby::ripperparser#on_embdoc_beg()","yard::parser::ruby::ripperparser#on_embdoc_end()","yard::parser::ruby::ripperparser#on_hash()","yard::parser::ruby::ripperparser#on_label()","yard::parser::ruby::ripperparser#on_lambda()","yard::parser::ruby::ripperparser#on_lbracket()","yard::parser::ruby::ripperparser#on_params()","yard::parser::ruby::ripperparser#on_parse_error()","yard::parser::ruby::ripperparser#on_program()","yard::parser::ruby::ripperparser#on_qwords_add()","yard::parser::ruby::ripperparser#on_qwords_new()","yard::parser::ruby::ripperparser#on_rbracket()","yard::parser::ruby::ripperparser#on_rescue()","yard::parser::ruby::ripperparser#on_string_content()","yard::parser::ruby::ripperparser#on_string_literal()","yard::parser::ruby::ripperparser#on_top_const_ref()","yard::parser::ruby::ripperparser#on_unary()","yard::parser::ruby::ripperparser#on_void_stmt()","file::open!()","yard::templates::template#options=()","yard::cli::config#optparse()","yard::cli::diff#optparse()","yard::cli::gems#optparse()","yard::cli::graph#optparse()","yard::cli::server#optparse()","yard::cli::stats#optparse()","yard::cli::yri#optparse()","yard::cli::yardoc#optparse()","gem::sourceindex#outdated()","yard::cli::stats#output()","yard::cli::display#output_options()","yard::cli::yardoc#output_options()","yard::codeobjects::methodobject#overridden_method()","yard::handlers::c::base#override_comments()","yard::handlers::base#owner=()","yard::parser::ruby::methodcallnode#parameters()","yard::parser::ruby::methoddefinitionnode#parameters()","yard::codeobjects::base#parent=()","yard::parse()","yard::docstringparser#parse()","yard::i18n::poparser#parse()","yard::i18n::text#parse()","yard::parser::base#parse()","yard::parser::base::parse()","yard::parser::c::cparser#parse()","yard::parser::orderedparser#parse()","yard::parser::ruby::legacy::rubyparser#parse()","yard::parser::ruby::ripperparser#parse()","yard::parser::ruby::rubyparser#parse()","yard::parser::sourceparser#parse()","yard::parser::sourceparser::parse()","yard::cli::display#parse_arguments()","yard::cli::yardoc#parse_arguments()","yard::cli::yardoptscommand#parse_arguments()","yard::handlers::base#parse_block()","yard::handlers::c::base#parse_block()","yard::handlers::ruby::base#parse_block()","yard::handlers::ruby::legacy::base#parse_block()","yard::parser::c::commentparser#parse_callseq()","yard::templates::helpers::htmlhelper#parse_codeblocks()","yard::docstring#parse_comments()","yard::parser::c::commentparser#parse_comments()","yard::handlers::ruby::classconditionhandler#parse_condition()","yard::handlers::ruby::legacy::classconditionhandler#parse_condition()","yard::docstringparser#parse_content()","yard::parser::ruby::legacy::tokenlist#parse_content()","yard::codeobjects::extrafileobject#parse_contents()","yard::handlers::ruby::classconditionhandler#parse_else_block()","yard::handlers::ruby::legacy::classconditionhandler#parse_else_block()","yard::verifier#parse_expression()","yard::cli::yardoc#parse_files()","yard::i18n::potgenerator#parse_files()","yard::parser::sourceparser::parse_in_order()","yard::templates::helpers::htmlhelper#parse_lang_for_codeblock()","yard::server::router#parse_library_from_path()","yard::i18n::potgenerator#parse_objects()","yard::cli::command#parse_options()","yard::parser::c::commentparser#parse_overrides()","yard::cli::yardoptscommand#parse_rdoc_document_file()","yard::handlers::processor#parse_remaining_files()","yard::templates::section#parse_sections()","yard::tags::overloadtag#parse_signature()","yard::parser::ruby::legacy::statementlist#parse_statements()","yard::parse_string()","yard::parser::sourceparser::parse_string()","yard::handlers::ruby::legacy::classhandler#parse_struct_subclass()","yard::handlers::ruby::classhandler#parse_struct_superclass()","yard::handlers::ruby::classhandler#parse_superclass()","yard::handlers::ruby::legacy::classhandler#parse_superclass()","yard::tags::defaultfactory#parse_tag()","yard::tags::overloadtag#parse_tag()","yard::tags::defaultfactory#parse_tag_with_name()","yard::tags::defaultfactory#parse_tag_with_options()","yard::tags::defaultfactory#parse_tag_with_title_and_text()","yard::tags::defaultfactory#parse_tag_with_types()","yard::tags::defaultfactory#parse_tag_with_types_and_name()","yard::tags::defaultfactory#parse_tag_with_types_and_title()","yard::tags::defaultfactory#parse_tag_with_types_name_and_default()","yard::handlers::ruby::classconditionhandler#parse_then_block()","yard::handlers::ruby::legacy::classconditionhandler#parse_then_block()","yard::parser::c::cparser#parse_toplevel()","yard::parser::c::commentparser#parse_types()","yard::cli::yardoptscommand#parse_yardopts()","yard::cli::yardoptscommand#parse_yardopts_options()","yard::docstring::parser()","yard::parser::sourceparser#parser_class()","yard::parser::sourceparser#parser_type=()","yard::parser::sourceparser::parser_type=()","yard::parser::sourceparser::parser_type_extensions=()","yard::parser::sourceparser::parser_type_for_extension()","yard::parser::sourceparser#parser_type_for_filename()","yard::parser::sourceparser::parser_types=()","yard::registry::partial_resolve()","yard::codeobjects::base#path()","yard::codeobjects::macroobject#path()","yard::codeobjects::methodobject#path()","yard::codeobjects::proxy#path()","yard::codeobjects::rootobject#path()","yard::parser::ruby::referencenode#path()","yard::registry::paths()","yard::registrystore#paths_for_type()","yard::parser::ruby::legacy::rubylex#peek()","yard::parser::ruby::legacy::rubylex::bufferedreader#peek()","yard::parser::ruby::legacy::rubylex::bufferedreader#peek_equal()","yard::parser::ruby::legacy::rubylex#peek_equal?()","yard::parser::ruby::legacy::statementlist#peek_no_space()","array#place()","yard::templates::section#place()","yard::registry::po_dir=()","yard::parser::sourceparser#post_process()","yard::server::libraryversion#prepare!()","gem::sourceindex#prerelease_gems()","gem::sourceindex#prerelease_specs()","yard::parser::ruby::astnode#pretty_print()","yard::parser::c::cparser#prevchar()","yard::logger#print()","yard::cli::yardoc#print_list()","yard::logger#print_no_newline()","yard::cli::yri#print_object()","yard::server::rackadapter#print_start_message()","yard::cli::stats#print_statistics()","yard::cli::stats#print_undocumented_objects()","yard::cli::yri#print_usage()","yard::handlers::ruby::legacy::privateclassmethodhandler#privatize_class_method()","yard::handlers::ruby::privateclassmethodhandler#privatize_class_method()","yard::handlers::ruby::legacy::privateconstanthandler#privatize_constant()","yard::handlers::ruby::privateconstanthandler#privatize_constant()","yard::handlers::base#process()","yard::handlers::base::process()","yard::handlers::processor#process()","yard::parser::ruby::legacy::statementlist#process_block_token()","yard::parser::ruby::legacy::statementlist#process_complex_block_opener()","yard::handlers::ruby::constanthandler#process_constant()","yard::handlers::c::base#process_file()","yard::parser::ruby::legacy::statementlist#process_initial_comment()","yard::handlers::ruby::extendhandler#process_mixin()","yard::handlers::ruby::legacy::extendhandler#process_mixin()","yard::handlers::ruby::legacy::mixinhandler#process_mixin()","yard::handlers::ruby::mixinhandler#process_mixin()","yard::parser::ruby::legacy::statementlist#process_simple_block_opener()","yard::parser::ruby::legacy::statementlist#process_statement_end()","yard::handlers::ruby::constanthandler#process_structclass()","yard::handlers::ruby::legacy::constanthandler#process_structclass()","yard::parser::ruby::legacy::statementlist#process_token()","yard::handlers::c::base#processed_files()","yard::logger#progress()","yard::codeobjects::proxy#proxy_path()","yard::registry::proxy_types()","yard::registrystore#proxy_types_path()","yard::serializers::yardocserializer#proxy_types_path()","yard::templates::helpers::modulehelper#prune_method_listing()","yard::codeobjects::codeobjectlist#push()","yard::parser::ruby::legacy::tokenlist#push()","yard::templates::section#push()","yard::handlers::base#push_state()","yard::parser::ruby::legacy::statementlist#push_token()","yard::registrystore#put()","yard::logger#puts()","file::read_binary()","yard::config::read_config_file()","yard::parser::ruby::legacy::rubylex#read_escape()","yard::tags::attributedirective#readable?()","yard::codeobjects::methodobject#reader?()","yard::server::commands::base#redirect()","yard::parser::ruby::astnode#ref?()","yard::parser::ruby::referencenode#ref?()","gem::sourceindex#refresh!()","yard::handlers::base#register()","yard::i18n::messages#register()","yard::registry::register()","yard::handlers::base#register_docstring()","yard::handlers::c::base#register_docstring()","yard::handlers::c::overridecommenthandler#register_docstring()","yard::handlers::ruby::dslhandlermethods#register_docstring()","yard::handlers::base#register_dynamic()","yard::handlers::base#register_ensure_loaded()","yard::handlers::base#register_file_info()","yard::handlers::c::base#register_file_info()","yard::handlers::c::overridecommenthandler#register_file_info()","yard::handlers::base#register_group()","yard::handlers::processor::register_handler_namespace()","yard::i18n::potgenerator#register_message()","yard::handlers::base#register_module_function()","yard::parser::sourceparser::register_parser_type()","yard::handlers::base#register_source()","yard::handlers::c::base#register_source()","yard::server::register_static_path()","yard::templates::engine::register_template_path()","yard::handlers::base#register_transitive_tags()","yard::handlers::base#register_visibility()","yard::handlers::c::base#register_visibility()","file::relative_path()","yard::codeobjects::base#relative_path()","gem::sourceindex#released_gems()","gem::sourceindex#released_specs()","yard::parser::c::commentparser#remove_private_comments()","gem::sourceindex#remove_spec()","yard::handlers::c::base#remove_var_prefix()","yard::cli::diff#removed_objects()","yard::server::commands::base#render()","yard::templates::engine::render()","yard::templates::template#render_section()","yard::docstring#replace()","yard::cli::diff#require_rubygems()","yard::options#reset_defaults()","yard::templates::template::classmethods#reset_full_paths()","yard::parser::ruby::astnode#reset_line_info()","yard::registry::resolve()","yard::templates::helpers::htmlhelper#resolve_links()","yard::docstring#resolve_reference()","yard::codeobjects::proxy#respond_to?()","yard::server::commands::librarycommand#restore_template_info()","yard::handlers::ruby::structhandlermethods#return_type_from_tag()","yard::registry::root()","yard::registrystore#root()","yard::codeobjects::base#root?()","yard::codeobjects::proxy#root?()","yard::codeobjects::rootobject#root?()","yard::server::router#route()","yard::server::router#route_docs()","yard::server::router#route_index()","yard::server::router#route_list()","yard::server::router#route_search()","yard::server::docserverhelper#router()","yard::ruby18?()","yard::ruby19?()","yard::ruby2?()","yard::cli::command::run()","yard::cli::commandparser#run()","yard::cli::commandparser::run()","yard::cli::config#run()","yard::cli::diff#run()","yard::cli::display#run()","yard::cli::gems#run()","yard::cli::graph#run()","yard::cli::help#run()","yard::cli::i18n#run()","yard::cli::list#run()","yard::cli::markuptypes#run()","yard::cli::server#run()","yard::cli::stats#run()","yard::cli::yri::run()","yard::cli::yri#run()","yard::cli::yardoc#run()","yard::server::commands::base#run()","yard::server::commands::displayfilecommand#run()","yard::server::commands::displayobjectcommand#run()","yard::server::commands::framescommand#run()","yard::server::commands::libraryindexcommand#run()","yard::server::commands::listcommand#run()","yard::server::commands::searchcommand#run()","yard::server::commands::staticfilecommand#run()","yard::templates::template#run()","yard::templates::template::classmethods#run()","yard::verifier#run()","yard::cli::yardoc#run_generate()","yard::cli::yardoc#run_verifier()","yard::templates::helpers::basehelper#run_verifier()","gem::docmanager#run_yardoc()","yard::parser::ruby#s()","yard::parser::ruby::legacy::statementlist#sanitize_block()","yard::parser::ruby::legacy::statementlist#sanitize_statement_end()","yard::tags::methoddirective#sanitized_tag_signature()","yard::config::save()","yard::registry::save()","yard::registrystore#save()","yard::server::commands::librarycommand#save_default_template_info()","yard::codeobjects::extendedmethodobject#scope()","yard::handlers::ruby::extendhandler#scope()","yard::handlers::ruby::legacy::extendhandler#scope()","yard::codeobjects::methodobject#scope=()","yard::handlers::base#scope=()","gem::sourceindex#search()","object#search()","yard::server::commands::searchcommand#search_for_object()","yard::server::router#search_prefix()","yard::templates::template#sections()","yard::cli::server#select_adapter()","yard::tags::library#send_to_factory()","yard::codeobjects::base#sep()","yard::codeobjects::macroobject#sep()","yard::codeobjects::methodobject#sep()","yard::serializers::base#serialize()","yard::serializers::filesystemserializer#serialize()","yard::serializers::processserializer#serialize()","yard::serializers::stdoutserializer#serialize()","yard::serializers::yardocserializer#serialize()","yard::server::commands::libraryoptions#serialize()","yard::serializers::base#serialized_path()","yard::serializers::filesystemserializer#serialized_path()","yard::serializers::yardocserializer#serialized_path()","yard::server::docserverserializer#serialized_path()","yard::server::commands::libraryoptions#serializer()","yard::server::commands::searchcommand#serve_normal()","yard::server::commands::searchcommand#serve_xhr()","yard::templates::engine::set_default_options()","yard::templates::template#set_ivars()","yard::parser::ruby::legacy::rubytoken::token#set_text()","yard::parser::ruby::legacy::rubytoken#set_token_position()","yard::server::adapter::setup()","yard::server::commands::librarycommand#setup_library()","gem::docmanager#setup_rdoc()","yard::server::commands::librarycommand#setup_yardopts()","yard::parser::ruby::legacy::rubyparser#shebang_line()","yard::parser::ruby::rubyparser#shebang_line()","string#shell_split()","yard::parser::c::statement#show()","yard::parser::ruby::astnode#show()","yard::parser::ruby::legacy::statement#show()","yard::logger#show_backtraces()","yard::logger#show_progress()","yard::server::adapter::shutdown()","yard::templates::helpers::htmlhelper#signature()","yard::templates::helpers::texthelper#signature()","yard::templates::helpers::htmlhelper#signature_types()","yard::server::commands::libraryoptions#single_library()","yard::registry::single_object_db=()","gem::sourceindex#size()","yard::parser::ruby::legacy::rubylex#skip_inner_expression()","yard::tags::library::sorted_labels()","yard::parser::ruby::commentnode#source()","yard::parser::ruby::legacy::statement#source()","yard::codeobjects::base#source=()","gem::source_index()","yard::server::libraryversion#source_path_for_disk()","yard::server::libraryversion#source_path_for_gem()","yard::parser::ruby::astnode#source_range()","gem::sourceindex#specification()","yard::parser::ruby::parameternode#splat_param()","yard::parser::ruby::legacy::tokenlist#squeeze()","yard::server::adapter#start()","yard::server::rackadapter#start()","yard::server::webrickadapter#start()","yard::handlers::c::base::statement_class()","yard::cli::stats#stats_for_classes()","yard::cli::stats#stats_for_constants()","yard::cli::stats#stats_for_files()","yard::cli::stats#stats_for_methods()","yard::cli::stats#stats_for_modules()","yard::parser::c::cparser#strip_non_statement_data()","yard::parser::c::cparser#struct()","yard::handlers::ruby::classhandler#struct_superclass_name()","yard::handlers::ruby::legacy::classhandler#struct_superclass_name()","object#stylesheets()","yard::handlers::base::subclasses()","yard::docstring#summary()","yard::templates::template#superb()","yard::parser::ruby::classnode#superclass()","yard::codeobjects::classobject#superclass=()","yard::cli::yardoptscommand#support_rdoc_document_file!()","yard::handlers::c::base#symbols()","yard::codeobjects::base#tag()","yard::docstring#tag()","yard::tags::overloadtag#tag()","yard::templates::helpers::htmlhelper#tag_attrs()","yard::tags::library#tag_create()","yard::docstringparser#tag_is_directive?()","yard::tags::library::tag_method_name()","yard::cli::yardoc#tag_options()","yard::tags::library::tag_or_directive_method_name()","yard::codeobjects::base#tags()","yard::docstring#tags()","yard::tags::overloadtag#tags()","yard::tags::reftaglist#tags()","yard::options#tap()","yard::templates::engine::template()","yard::templates::engine::template!()","yard::templates::engine::template_module_name()","yard::parser::ruby::legacy::rubytoken::tkblockcontents#text()","yard::parser::ruby::legacy::rubytoken::tkstatementend#text()","yard::parser::ruby::conditionalnode#then_block()","yard::registry::thread_local_store()","yard::registry::thread_local_store=()","yard::templates::helpers::umlhelper#tidy()","yard::codeobjects::base#title()","yard::codeobjects::extrafileobject#title()","yard::codeobjects::proxy#title()","yard::codeobjects::rootobject#title()","yard::templates::helpers::texthelper#title_align_right()","yard::templates::section#to_a()","yard::codeobjects::base#to_ary()","yard::codeobjects::proxy#to_ary()","yard::docstringparser#to_docstring()","yard::options#to_hash()","yard::templates::helpers::markup::rdocmarkup::rdocmarkup#to_html()","yard::codeobjects::proxy#to_obj()","yard::docstring#to_raw()","yard::codeobjects::base#to_s()","yard::codeobjects::extrafileobject#to_s()","yard::codeobjects::proxy#to_s()","yard::docstring#to_s()","yard::parser::ruby::legacy::statement#to_s()","yard::parser::ruby::legacy::tokenlist#to_s()","yard::server::libraryversion#to_s()","yard::codeobjects::proxy#to_str()","yard::parser::ruby::legacy::rubylex#token()","yard::parser::ruby::astnode#token?()","yard::parser::base#tokenize()","yard::parser::c::cparser#tokenize()","yard::parser::ruby::legacy::rubyparser#tokenize()","yard::parser::ruby::rubyparser#tokenize()","yard::parser::sourceparser::tokenize()","yard::parser::sourceparser#tokenize()","yard::handlers::ruby::legacy::base#tokval()","yard::handlers::ruby::legacy::base#tokval_list()","yard::codeobjects::extrafileobject#translate()","yard::i18n::locale#translate()","yard::i18n::text#translate()","yard::codeobjects::base#translate_docstring()","yard::config::translate_plugin_name()","yard::config::translate_plugin_names()","yard::parser::ruby::astnode#traverse()","yard::cli::yri#try_load_object()","yard::codeobjects::base#type()","yard::codeobjects::extrafileobject#type()","yard::codeobjects::proxy#type()","yard::tags::overloadtag#type()","yard::tags::tag#type()","yard::codeobjects::proxy#type=()","yard::cli::stats#type_statistics()","yard::templates::helpers::umlhelper#uml_visibility()","yard::parser::ruby::astnode#unfreeze()","yard::parser::ruby::legacy::rubylex#ungetc()","yard::parser::ruby::legacy::rubylex::bufferedreader#ungetc()","yard::verifier#unmodify_nilclass()","yard::parser::ruby::parameternode#unnamed_end_params()","yard::parser::ruby::parameternode#unnamed_optional_params()","yard::parser::ruby::parameternode#unnamed_required_params()","yard::cli::command#unrecognized_option()","yard::cli::graph#unrecognized_option()","yard::templates::section#unshift()","symbolhash#update()","yard::options#update()","yard::server::commands::searchcommand#url_for()","yard::server::docserverhelper#url_for()","yard::templates::helpers::htmlhelper#url_for()","yard::server::docserverhelper#url_for_file()","yard::templates::helpers::htmlhelper#url_for_file()","yard::server::docserverhelper#url_for_frameset()","yard::templates::helpers::htmlhelper#url_for_frameset()","yard::server::docserverhelper#url_for_index()","yard::templates::helpers::htmlhelper#url_for_index()","yard::server::docserverhelper#url_for_list()","yard::templates::helpers::htmlhelper#url_for_list()","yard::server::docserverhelper#url_for_main()","yard::templates::helpers::htmlhelper#url_for_main()","yard::server::docserverserializer#urlencode()","yard::templates::helpers::htmlhelper#urlencode()","yard::tags::methoddirective#use_indented_text()","yard::handlers::ruby::attributehandler#validated_attribute_names()","yard::parser::sourceparser::validated_parser_type()","yard::codeobjects::constantobject#value=()","yard::registrystore#values()","yard::registrystore#values_for_type()","yard::cli::yardoc#verify_markup_options()","yard::cli::config#view_item()","yard::codeobjects::base#visibility=()","yard::handlers::base#visibility=()","yard::server::commands::searchcommand#visible_results()","yard::parser::ruby::ripperparser#visit_event()","yard::parser::ruby::ripperparser#visit_event_arr()","yard::parser::ruby::ripperparser#visit_ns_token()","yard::tags::macrodirective#warn()","yard::logger#warn_no_continuations()","yard::windows?()","yard::templates::template#with_section()","yard::templates::engine::with_serializer()","yard::config::with_yardopts()","yard::serializers::stdoutserializer#word_wrap()","yard::templates::helpers::texthelper#wrap()","yard::cli::display#wrap_layout()","yard::tags::attributedirective#writable?()","yard::registrystore#write_checksums()","yard::registrystore#write_object_types()","yard::registrystore#write_proxy_types()","yard::codeobjects::methodobject#writer?()","rack::request#xhr?()","webrick::httprequest#xhr?()","yard::registry::yardoc_file=()","yard::registry::yardoc_file_for_gem()","yard::cli::yardoptscommand#yardopts()","yard::cli::yardoptscommand#yardopts_options()","yard::templates::template#yieldall()","","","",""],"info":[["Array","","Array.html","",""],["File","","File.html","",""],["Gem","","Gem.html","",""],["Gem::DocManager","","Gem/DocManager.html","",""],["Gem::SourceIndex","","Gem/SourceIndex.html","","<p>The SourceIndex object indexes all the gems available from a particular\nsource (e.g. a list of gem directories, …\n"],["Gem::Specification","","Gem/Specification.html","",""],["Hash","","Hash.html","",""],["Insertion","","Insertion.html","","<p>The Insertion class inserts a value before or after another value in a\nlist.\n<p>@example\n\n<pre>Insertion.new([1, ...</pre>\n"],["Module","","Module.html","",""],["Object","","Object.html","",""],["Rack","","Rack.html","",""],["Rack::Request","","Rack/Request.html","","<p>@private\n"],["String","","String.html","",""],["SymbolHash","","SymbolHash.html","","<p>A subclass of Hash where all keys are converted into Symbols, and\noptionally, all String values are converted …\n"],["WEBrick","","WEBrick.html","",""],["WEBrick::HTTPRequest","","WEBrick/HTTPRequest.html","","<p>@private\n"],["YARD","","YARD.html","",""],["YARD::CLI","","YARD/CLI.html","",""],["YARD::CLI::Command","","YARD/CLI/Command.html","","<p>Abstract base class for CLI utilities. Provides some helper methods for the\noption parser\n<p>@abstract @since …\n"],["YARD::CLI::CommandParser","","YARD/CLI/CommandParser.html","","<p>This class parses a command name out of the <code>yard</code> CLI command\nand calls that command in the form:\n\n<pre>$ yard ...</pre>\n"],["YARD::CLI::Config","","YARD/CLI/Config.html","","<p>CLI command to view or edit configuration options @since 0.6.2\n"],["YARD::CLI::Diff","","YARD/CLI/Diff.html","","<p>CLI command to return the objects that were added/removed from 2 versions\nof a project (library, gem, …\n"],["YARD::CLI::Display","","YARD/CLI/Display.html","","<p>Display one object @since 0.8.6\n"],["YARD::CLI::Gems","","YARD/CLI/Gems.html","","<p>@since 0.6.0\n"],["YARD::CLI::Graph","","YARD/CLI/Graph.html","","<p>A command-line utility to generate Graphviz graphs from a set of objects\n<p>@see Graph#run @since 0.6.0\n"],["YARD::CLI::GraphOptions","","YARD/CLI/GraphOptions.html","","<p>Options to pass to the {Graph} CLI.\n"],["YARD::CLI::Help","","YARD/CLI/Help.html","","<p>Handles help for commands @since 0.6.0\n"],["YARD::CLI::I18n","","YARD/CLI/I18n.html","","<p>CLI command to support internationalization (a.k.a. i18n). I18n feature is\nbased on gettext technology. …\n"],["YARD::CLI::List","","YARD/CLI/List.html","","<p>Lists all constant and method names in the codebase. Uses {Yardoc} –list.\n"],["YARD::CLI::MarkupTypes","","YARD/CLI/MarkupTypes.html","","<p>Lists all markup types @since 0.8.6\n"],["YARD::CLI::Server","","YARD/CLI/Server.html","","<p>A local documentation server @since 0.6.0\n"],["YARD::CLI::Stats","","YARD/CLI/Stats.html","","<p>@since 0.6.0\n"],["YARD::CLI::YRI","","YARD/CLI/YRI.html","","<p>A tool to view documentation in the console like `ri`\n"],["YARD::CLI::Yardoc","","YARD/CLI/Yardoc.html","","<p>Yardoc is the default YARD CLI command (+yard doc+ and historic\n<code>yardoc</code> executable) used to generate and …\n"],["YARD::CLI::YardocOptions","","YARD/CLI/YardocOptions.html","","<p>Default options used in +yard doc+ command.\n"],["YARD::CLI::YardoptsCommand","","YARD/CLI/YardoptsCommand.html","","<p>Abstract base class for command that reads .yardopts file\n<p>@abstract @since 0.8.3\n"],["YARD::CodeObjects","","YARD/CodeObjects.html","","<p>A “code object” is defined as any entity in the Ruby language. Classes,\nmodules, methods, class …\n"],["YARD::CodeObjects::Base","","YARD/CodeObjects/Base.html","","<p><code>Base</code> is the superclass of all code objects recognized by YARD.\nA code object is any entity in the Ruby …\n"],["YARD::CodeObjects::ClassObject","","YARD/CodeObjects/ClassObject.html","","<p>A ClassObject represents a Ruby class in source code. It is a\n{ModuleObject} with extra inheritance semantics …\n"],["YARD::CodeObjects::ClassVariableObject","","YARD/CodeObjects/ClassVariableObject.html","","<p>Represents a class variable inside a namespace. The path is expressed in\nthe form “A::B::@@classvariable” …\n"],["YARD::CodeObjects::CodeObjectList","","YARD/CodeObjects/CodeObjectList.html","","<p>A list of code objects. This array acts like a set (no unique items) but\nalso disallows any {Proxy} objects …\n"],["YARD::CodeObjects::ConstantObject","","YARD/CodeObjects/ConstantObject.html","","<p>A <code>ConstantObject</code> represents a Ruby constant (not a module or\nclass). To access the constant&#39;s (source …\n"],["YARD::CodeObjects::ExtendedMethodObject","","YARD/CodeObjects/ExtendedMethodObject.html","","<p>Represents an instance method of a module that was mixed into the class\nscope of another namespace.\n<p>@see …\n"],["YARD::CodeObjects::ExtraFileObject","","YARD/CodeObjects/ExtraFileObject.html","","<p>An ExtraFileObject represents an extra documentation file (README or other\nfile). It is not strictly …\n"],["YARD::CodeObjects::MacroObject","","YARD/CodeObjects/MacroObject.html","","<p>A MacroObject represents a docstring defined through +@!macro NAME+ and can\nbe reused by specifying the …\n"],["YARD::CodeObjects::MethodObject","","YARD/CodeObjects/MethodObject.html","","<p>Represents a Ruby method in source\n"],["YARD::CodeObjects::ModuleObject","","YARD/CodeObjects/ModuleObject.html","","<p>Represents a Ruby module.\n"],["YARD::CodeObjects::NamespaceObject","","YARD/CodeObjects/NamespaceObject.html","","<p>A “namespace” is any object that can store other objects within itself. The\ntwo main Ruby objects …\n"],["YARD::CodeObjects::Proxy","","YARD/CodeObjects/Proxy.html","","<p>The Proxy class is a way to lazily resolve code objects in cases where the\nobject may not yet exist. …\n"],["YARD::CodeObjects::ProxyMethodError","","YARD/CodeObjects/ProxyMethodError.html","","<p>A special type of <code>NoMethodError</code> when raised from a {Proxy}\n"],["YARD::CodeObjects::RootObject","","YARD/CodeObjects/RootObject.html","","<p>Represents the root namespace object (the invisible Ruby module that holds\nall top level modules, class …\n"],["YARD::Config","","YARD/Config.html","","<p>This class maintains all system-wide configuration for YARD and handles the\nloading of plugins. To access …\n"],["YARD::Docstring","","YARD/Docstring.html","","<p>A documentation string, or “docstring” for short, encapsulates the comments\nand metadata, or …\n"],["YARD::DocstringParser","","YARD/DocstringParser.html","","<p>Parses text and creates a {Docstring} object to represent documentation for\na {CodeObjects::Base}. To …\n"],["YARD::Handlers","","YARD/Handlers.html","","<p>Handlers are called during the data processing part of YARD&#39;s parsing\nphase. This allows YARD as …\n"],["YARD::Handlers::Base","","YARD/Handlers/Base.html","","<p>Handlers are pluggable semantic parsers for YARD&#39;s code generation\nphase. They allow developers to …\n"],["YARD::Handlers::C","","YARD/Handlers/C.html","","<p>CRuby Handlers @since 0.8.0\n"],["YARD::Handlers::C::AliasHandler","","YARD/Handlers/C/AliasHandler.html","",""],["YARD::Handlers::C::AttributeHandler","","YARD/Handlers/C/AttributeHandler.html","",""],["YARD::Handlers::C::Base","","YARD/Handlers/C/Base.html","",""],["YARD::Handlers::C::ClassHandler","","YARD/Handlers/C/ClassHandler.html","",""],["YARD::Handlers::C::ConstantHandler","","YARD/Handlers/C/ConstantHandler.html","",""],["YARD::Handlers::C::HandlerMethods","","YARD/Handlers/C/HandlerMethods.html","",""],["YARD::Handlers::C::InitHandler","","YARD/Handlers/C/InitHandler.html","","<p>Handles the Init_Libname() method\n"],["YARD::Handlers::C::MethodHandler","","YARD/Handlers/C/MethodHandler.html","",""],["YARD::Handlers::C::MixinHandler","","YARD/Handlers/C/MixinHandler.html","",""],["YARD::Handlers::C::ModuleHandler","","YARD/Handlers/C/ModuleHandler.html","",""],["YARD::Handlers::C::OverrideCommentHandler","","YARD/Handlers/C/OverrideCommentHandler.html","","<p>Parses comments\n"],["YARD::Handlers::C::PathHandler","","YARD/Handlers/C/PathHandler.html","",""],["YARD::Handlers::C::StructHandler","","YARD/Handlers/C/StructHandler.html","",""],["YARD::Handlers::C::SymbolHandler","","YARD/Handlers/C/SymbolHandler.html","","<p>Keeps track of function bodies for symbol lookup during Ruby method\ndeclarations\n"],["YARD::Handlers::HandlerAborted","","YARD/Handlers/HandlerAborted.html","","<p>Raise this error when a handler should exit before completing. The\nexception will be silenced, allowing …\n"],["YARD::Handlers::NamespaceMissingError","","YARD/Handlers/NamespaceMissingError.html","","<p>Raised during processing phase when a handler needs to perform an operation\non an object&#39;s namespace …\n"],["YARD::Handlers::Processor","","YARD/Handlers/Processor.html","","<p>Iterates over all statements in a file and delegates them to the\n{Handlers::Base} objects that are registered …\n"],["YARD::Handlers::Ruby","","YARD/Handlers/Ruby.html","",""],["YARD::Handlers::Ruby::AliasHandler","","YARD/Handlers/Ruby/AliasHandler.html","","<p>Handles alias and alias_method calls\n"],["YARD::Handlers::Ruby::AttributeHandler","","YARD/Handlers/Ruby/AttributeHandler.html","","<p>Handles <code>attr_*</code> statements in modules/classes\n"],["YARD::Handlers::Ruby::Base","","YARD/Handlers/Ruby/Base.html","","<p>This is the base handler class for the new-style (1.9) Ruby parser. All\nhandlers that subclass this base …\n"],["YARD::Handlers::Ruby::ClassConditionHandler","","YARD/Handlers/Ruby/ClassConditionHandler.html","","<p>Matches if/unless conditions inside classes and attempts to process only\none branch (by evaluating the …\n"],["YARD::Handlers::Ruby::ClassHandler","","YARD/Handlers/Ruby/ClassHandler.html","","<p>Handles class declarations\n"],["YARD::Handlers::Ruby::ClassVariableHandler","","YARD/Handlers/Ruby/ClassVariableHandler.html","","<p>Handles a class variable (@@variable)\n"],["YARD::Handlers::Ruby::CommentHandler","","YARD/Handlers/Ruby/CommentHandler.html","","<p>Handles any lone comment statement in a Ruby file\n"],["YARD::Handlers::Ruby::ConstantHandler","","YARD/Handlers/Ruby/ConstantHandler.html","","<p>Handles any constant assignment\n"],["YARD::Handlers::Ruby::DSLHandler","","YARD/Handlers/Ruby/DSLHandler.html","","<p>Handles automatic detection of dsl-style methods\n"],["YARD::Handlers::Ruby::DSLHandlerMethods","","YARD/Handlers/Ruby/DSLHandlerMethods.html","",""],["YARD::Handlers::Ruby::ExceptionHandler","","YARD/Handlers/Ruby/ExceptionHandler.html","","<p>Handles &#39;raise&#39; calls inside methods\n"],["YARD::Handlers::Ruby::ExtendHandler","","YARD/Handlers/Ruby/ExtendHandler.html","","<p>Handles &#39;extend&#39; call to include modules into the class scope of\nanother @see MixinHandler\n"],["YARD::Handlers::Ruby::HandlesExtension","","YARD/Handlers/Ruby/HandlesExtension.html","","<p>To implement a custom handler matcher, subclass this class and implement\n{#matches?} to return whether …\n"],["YARD::Handlers::Ruby::Legacy","","YARD/Handlers/Ruby/Legacy.html","",""],["YARD::Handlers::Ruby::Legacy::AliasHandler","","YARD/Handlers/Ruby/Legacy/AliasHandler.html","","<p>(see Ruby::AliasHandler)\n"],["YARD::Handlers::Ruby::Legacy::AttributeHandler","","YARD/Handlers/Ruby/Legacy/AttributeHandler.html","","<p>(see Ruby::AttributeHandler)\n"],["YARD::Handlers::Ruby::Legacy::Base","","YARD/Handlers/Ruby/Legacy/Base.html","","<p>This is the base handler for the legacy parser. To implement a legacy\nhandler, subclass this class.\n<p>@abstract …\n"],["YARD::Handlers::Ruby::Legacy::ClassConditionHandler","","YARD/Handlers/Ruby/Legacy/ClassConditionHandler.html","","<p>(see Ruby::ClassConditionHandler) @since 0.5.4\n"],["YARD::Handlers::Ruby::Legacy::ClassHandler","","YARD/Handlers/Ruby/Legacy/ClassHandler.html","","<p>(see Ruby::ClassHandler)\n"],["YARD::Handlers::Ruby::Legacy::ClassVariableHandler","","YARD/Handlers/Ruby/Legacy/ClassVariableHandler.html","","<p>(see Ruby::ClassVariableHandler)\n"],["YARD::Handlers::Ruby::Legacy::CommentHandler","","YARD/Handlers/Ruby/Legacy/CommentHandler.html","","<p>(see Ruby::CommentHandler)\n"],["YARD::Handlers::Ruby::Legacy::ConstantHandler","","YARD/Handlers/Ruby/Legacy/ConstantHandler.html","","<p>(see Ruby::ConstantHandler)\n"],["YARD::Handlers::Ruby::Legacy::DSLHandler","","YARD/Handlers/Ruby/Legacy/DSLHandler.html","","<p>(see Ruby::DSLHandler)\n"],["YARD::Handlers::Ruby::Legacy::ExceptionHandler","","YARD/Handlers/Ruby/Legacy/ExceptionHandler.html","","<p>(see Ruby::ExceptionHandler)\n"],["YARD::Handlers::Ruby::Legacy::ExtendHandler","","YARD/Handlers/Ruby/Legacy/ExtendHandler.html","","<p>(see Ruby::ExtendHandler)\n"],["YARD::Handlers::Ruby::Legacy::MethodHandler","","YARD/Handlers/Ruby/Legacy/MethodHandler.html","","<p>(see Ruby::MethodHandler)\n"],["YARD::Handlers::Ruby::Legacy::MixinHandler","","YARD/Handlers/Ruby/Legacy/MixinHandler.html","","<p>(see Ruby::MixinHandler)\n"],["YARD::Handlers::Ruby::Legacy::ModuleFunctionHandler","","YARD/Handlers/Ruby/Legacy/ModuleFunctionHandler.html","","<p>(see Ruby::ModuleFunctionHandler)\n"],["YARD::Handlers::Ruby::Legacy::ModuleHandler","","YARD/Handlers/Ruby/Legacy/ModuleHandler.html","","<p>(see Ruby::ModuleHandler)\n"],["YARD::Handlers::Ruby::Legacy::PrivateClassMethodHandler","","YARD/Handlers/Ruby/Legacy/PrivateClassMethodHandler.html","","<p>(see Ruby::PrivateClassMethodHandler)\n"],["YARD::Handlers::Ruby::Legacy::PrivateConstantHandler","","YARD/Handlers/Ruby/Legacy/PrivateConstantHandler.html","","<p>(see Ruby::PrivateConstantHandler)\n"],["YARD::Handlers::Ruby::Legacy::VisibilityHandler","","YARD/Handlers/Ruby/Legacy/VisibilityHandler.html","","<p>(see Ruby::VisibilityHandler)\n"],["YARD::Handlers::Ruby::Legacy::YieldHandler","","YARD/Handlers/Ruby/Legacy/YieldHandler.html","","<p>(see Ruby::YieldHandler)\n"],["YARD::Handlers::Ruby::MethodCallWrapper","","YARD/Handlers/Ruby/MethodCallWrapper.html","",""],["YARD::Handlers::Ruby::MethodConditionHandler","","YARD/Handlers/Ruby/MethodConditionHandler.html","","<p>Handles a conditional inside a method\n"],["YARD::Handlers::Ruby::MethodHandler","","YARD/Handlers/Ruby/MethodHandler.html","","<p>Handles a method definition\n"],["YARD::Handlers::Ruby::MixinHandler","","YARD/Handlers/Ruby/MixinHandler.html","","<p>Handles the &#39;include&#39; statement to mixin a module in the instance\nscope\n"],["YARD::Handlers::Ruby::ModuleFunctionHandler","","YARD/Handlers/Ruby/ModuleFunctionHandler.html","","<p>Handles module_function calls to turn methods into public class methods.\nAlso creates a private instance …\n"],["YARD::Handlers::Ruby::ModuleHandler","","YARD/Handlers/Ruby/ModuleHandler.html","","<p>Handles the declaration of a module\n"],["YARD::Handlers::Ruby::PrivateClassMethodHandler","","YARD/Handlers/Ruby/PrivateClassMethodHandler.html","","<p>Sets visibility of a class method\n"],["YARD::Handlers::Ruby::PrivateConstantHandler","","YARD/Handlers/Ruby/PrivateConstantHandler.html","","<p>Sets visibility of a constant (class, module, const)\n"],["YARD::Handlers::Ruby::StructHandlerMethods","","YARD/Handlers/Ruby/StructHandlerMethods.html","","<p>Helper methods to parse @attr_* tags on a class.\n<p>@deprecated The use of +@attr+ tags are deprecated since …\n"],["YARD::Handlers::Ruby::TestNodeWrapper","","YARD/Handlers/Ruby/TestNodeWrapper.html","",""],["YARD::Handlers::Ruby::VisibilityHandler","","YARD/Handlers/Ruby/VisibilityHandler.html","","<p>Handles &#39;private&#39;, &#39;protected&#39;, and &#39;public&#39; calls.\n"],["YARD::Handlers::Ruby::YieldHandler","","YARD/Handlers/Ruby/YieldHandler.html","","<p>Handles &#39;yield&#39; calls\n"],["YARD::I18n","","YARD/I18n.html","","<p>Namespace for internationalization (i18n) @since 0.8.0\n"],["YARD::I18n::Locale","","YARD/I18n/Locale.html","","<p><code>Locale</code> is a unit of translation. It has {#name} and a set of\nmessages.\n<p>@since 0.8.2\n"],["YARD::I18n::Message","","YARD/I18n/Message.html","","<p><code>Message</code> is a translation target message. It has message ID as\n{#id} and some properties {#locations} …\n"],["YARD::I18n::Messages","","YARD/I18n/Messages.html","","<p>Acts as a container for {Message} objects.\n<p>@since 0.8.1\n"],["YARD::I18n::POParser","","YARD/I18n/POParser.html","","<p><code>Locale</code> is a wrapper for gettext&#39;s PO parsing feature. It\nhides gettext API difference from YARD. …\n"],["YARD::I18n::PotGenerator","","YARD/I18n/PotGenerator.html","","<p>The <code>PotGenerator</code> generates POT format string from\n{CodeObjects::Base} and {CodeObjects::ExtraFileObject}. …\n"],["YARD::I18n::Text","","YARD/I18n/Text.html","","<p>Provides some convenient features for translating a text.\n"],["YARD::Logger","","YARD/Logger.html","","<p>Handles console logging for info, warnings and errors. Uses the stdlib\nLogger class in Ruby for all the …\n"],["YARD::Options","","YARD/Options.html","","<p>Generalized options class for passing around large amounts of options\nbetween objects.\n<p>The options class …\n"],["YARD::Parser","","YARD/Parser.html","","<p>The parser namespace holds all parsing engines used by YARD. Currently only\nRuby and C (Ruby) parsers …\n"],["YARD::Parser::Base","","YARD/Parser/Base.html","","<p>Represents the abstract base parser class that parses source code in a\nspecific way. A parser should …\n"],["YARD::Parser::C","","YARD/Parser/C.html","",""],["YARD::Parser::C::BodyStatement","","YARD/Parser/C/BodyStatement.html","",""],["YARD::Parser::C::CParser","","YARD/Parser/C/CParser.html","",""],["YARD::Parser::C::Comment","","YARD/Parser/C/Comment.html","",""],["YARD::Parser::C::CommentParser","","YARD/Parser/C/CommentParser.html","",""],["YARD::Parser::C::Statement","","YARD/Parser/C/Statement.html","",""],["YARD::Parser::C::ToplevelStatement","","YARD/Parser/C/ToplevelStatement.html","",""],["YARD::Parser::OrderedParser","","YARD/Parser/OrderedParser.html","","<p>Responsible for parsing a list of files in order. The {#parse} method of\nthis class can be called from …\n"],["YARD::Parser::ParserSyntaxError","","YARD/Parser/ParserSyntaxError.html","","<p>Raised when the parser sees a Ruby syntax error\n"],["YARD::Parser::Ruby","","YARD/Parser/Ruby.html","",""],["YARD::Parser::Ruby::AstNode","","YARD/Parser/Ruby/AstNode.html","","<p>An AST node is characterized by a type and a list of children. It is most\neasily represented by the s-expression …\n"],["YARD::Parser::Ruby::ClassNode","","YARD/Parser/Ruby/ClassNode.html","",""],["YARD::Parser::Ruby::CommentNode","","YARD/Parser/Ruby/CommentNode.html","","<p>Represents a lone comment block in source\n"],["YARD::Parser::Ruby::ConditionalNode","","YARD/Parser/Ruby/ConditionalNode.html","",""],["YARD::Parser::Ruby::KeywordNode","","YARD/Parser/Ruby/KeywordNode.html","",""],["YARD::Parser::Ruby::Legacy","","YARD/Parser/Ruby/Legacy.html","",""],["YARD::Parser::Ruby::Legacy::RubyLex","","YARD/Parser/Ruby/Legacy/RubyLex.html","","<p>Lexical analyzer for Ruby source @private\n"],["YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","","YARD/Parser/Ruby/Legacy/RubyLex/BufferedReader.html","","<p>Read an input stream character by character. We allow for unlimited\nungetting of characters just read. …\n"],["YARD::Parser::Ruby::Legacy::RubyParser","","YARD/Parser/Ruby/Legacy/RubyParser.html","","<p>Legacy Ruby parser @since 0.5.6\n"],["YARD::Parser::Ruby::Legacy::RubyToken","","YARD/Parser/Ruby/Legacy/RubyToken.html","","<p>Legacy lexical tokenizer module.\n"],["YARD::Parser::Ruby::Legacy::RubyToken::TkBlockContents","","YARD/Parser/Ruby/Legacy/RubyToken/TkBlockContents.html","","<p>Represents a block\n"],["YARD::Parser::Ruby::Legacy::RubyToken::TkError","","YARD/Parser/Ruby/Legacy/RubyToken/TkError.html","",""],["YARD::Parser::Ruby::Legacy::RubyToken::TkId","","YARD/Parser/Ruby/Legacy/RubyToken/TkId.html","","<p>Represents a Ruby identifier\n"],["YARD::Parser::Ruby::Legacy::RubyToken::TkKW","","YARD/Parser/Ruby/Legacy/RubyToken/TkKW.html","","<p>Represents a Ruby keyword\n"],["YARD::Parser::Ruby::Legacy::RubyToken::TkNode","","YARD/Parser/Ruby/Legacy/RubyToken/TkNode.html","",""],["YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN","","YARD/Parser/Ruby/Legacy/RubyToken/TkOPASGN.html","",""],["YARD::Parser::Ruby::Legacy::RubyToken::TkOp","","YARD/Parser/Ruby/Legacy/RubyToken/TkOp.html","",""],["YARD::Parser::Ruby::Legacy::RubyToken::TkStatementEnd","","YARD/Parser/Ruby/Legacy/RubyToken/TkStatementEnd.html","","<p>Represents an end statement\n"],["YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar","","YARD/Parser/Ruby/Legacy/RubyToken/TkUnknownChar.html","",""],["YARD::Parser::Ruby::Legacy::RubyToken::TkVal","","YARD/Parser/Ruby/Legacy/RubyToken/TkVal.html","","<p>Represents a Ruby value\n"],["YARD::Parser::Ruby::Legacy::RubyToken::TkWhitespace","","YARD/Parser/Ruby/Legacy/RubyToken/TkWhitespace.html","","<p>Represents whitespace\n"],["YARD::Parser::Ruby::Legacy::RubyToken::Token","","YARD/Parser/Ruby/Legacy/RubyToken/Token.html","","<p>Represents a token in the Ruby lexer\n"],["YARD::Parser::Ruby::Legacy::Statement","","YARD/Parser/Ruby/Legacy/Statement.html","",""],["YARD::Parser::Ruby::Legacy::StatementList","","YARD/Parser/Ruby/Legacy/StatementList.html","",""],["YARD::Parser::Ruby::Legacy::TokenList","","YARD/Parser/Ruby/Legacy/TokenList.html","",""],["YARD::Parser::Ruby::LiteralNode","","YARD/Parser/Ruby/LiteralNode.html","",""],["YARD::Parser::Ruby::LoopNode","","YARD/Parser/Ruby/LoopNode.html","",""],["YARD::Parser::Ruby::MethodCallNode","","YARD/Parser/Ruby/MethodCallNode.html","",""],["YARD::Parser::Ruby::MethodDefinitionNode","","YARD/Parser/Ruby/MethodDefinitionNode.html","",""],["YARD::Parser::Ruby::ModuleNode","","YARD/Parser/Ruby/ModuleNode.html","",""],["YARD::Parser::Ruby::ParameterNode","","YARD/Parser/Ruby/ParameterNode.html","",""],["YARD::Parser::Ruby::ReferenceNode","","YARD/Parser/Ruby/ReferenceNode.html","",""],["YARD::Parser::Ruby::RipperParser","","YARD/Parser/Ruby/RipperParser.html","","<p>Internal parser class @since 0.5.6\n"],["YARD::Parser::Ruby::RubyParser","","YARD/Parser/Ruby/RubyParser.html","","<p>Ruby 1.9 parser @!attribute [r] encoding_line @!attribute [r] shebang_line\n@!attribute [r] enumerator …\n"],["YARD::Parser::SourceParser","","YARD/Parser/SourceParser.html","","<p>Responsible for parsing a source file into the namespace. Parsing also\ninvokes handlers to process the …\n"],["YARD::Parser::UndocumentableError","","YARD/Parser/UndocumentableError.html","","<p>Raised when an object is recognized but cannot be documented. This\ngenerally occurs when the Ruby syntax …\n"],["YARD::Rake","","YARD/Rake.html","",""],["YARD::Rake::YardocTask","","YARD/Rake/YardocTask.html","","<p>The rake task to run {CLI::Yardoc} and generate documentation.\n"],["YARD::Registry","","YARD/Registry.html","","<p>The <code>Registry</code> is the centralized data store for all\n{CodeObjects} created during parsing. The storage …\n"],["YARD::RegistryStore","","YARD/RegistryStore.html","","<p>The data store for the {Registry}.\n<p>@see Registry @see Serializers::YardocSerializer\n"],["YARD::Serializers","","YARD/Serializers.html","",""],["YARD::Serializers::Base","","YARD/Serializers/Base.html","","<p>The abstract base serializer. Serializers allow templates to be rendered to\nvarious endpoints. For instance, …\n"],["YARD::Serializers::FileSystemSerializer","","YARD/Serializers/FileSystemSerializer.html","","<p>Implements a serializer that reads from and writes to the filesystem.\n"],["YARD::Serializers::ProcessSerializer","","YARD/Serializers/ProcessSerializer.html","","<p>Serializes an object to a process (like less)\n<p>@example Serializing to a pager (less)\n\n<pre>serializer = ProcessSerializer.new(&#39;less&#39;) ...</pre>\n"],["YARD::Serializers::StdoutSerializer","","YARD/Serializers/StdoutSerializer.html","","<p>A serializer that writes data to standard output.\n"],["YARD::Serializers::YardocSerializer","","YARD/Serializers/YardocSerializer.html","",""],["YARD::Server","","YARD/Server.html","","<p>Namespace for classes and modules that handle serving documentation over\nHTTP\n<p>Implementing a Custom Server …\n"],["YARD::Server::Adapter","","YARD/Server/Adapter.html","","<p>This class implements the bridge between the {Router} and the server\nbackend for a specific server type. …\n"],["YARD::Server::Commands","","YARD/Server/Commands.html","","<p>Commands implement specific kinds of server responses which are routed to\nby the {Router} class. To implement …\n"],["YARD::Server::Commands::Base","","YARD/Server/Commands/Base.html","","<p>This is the base command class used to implement custom commands for a\nserver. A command will be routed …\n"],["YARD::Server::Commands::DisplayFileCommand","","YARD/Server/Commands/DisplayFileCommand.html","","<p>Displays a README or extra file.\n<p>@todo Implement better support for detecting binary (image) filetypes …\n"],["YARD::Server::Commands::DisplayObjectCommand","","YARD/Server/Commands/DisplayObjectCommand.html","","<p>Displays documentation for a specific object identified by the path\n"],["YARD::Server::Commands::FramesCommand","","YARD/Server/Commands/FramesCommand.html","","<p>Displays an object wrapped in frames\n"],["YARD::Server::Commands::LibraryCommand","","YARD/Server/Commands/LibraryCommand.html","","<p>This is the base command for all commands that deal directly with\nlibraries. Some commands do not, but …\n"],["YARD::Server::Commands::LibraryCommand::obj","","YARD/Server/Commands/LibraryCommand/obj.html","",""],["YARD::Server::Commands::LibraryCommand::obj;","","YARD/Server/Commands/LibraryCommand/obj;.html","",""],["YARD::Server::Commands::LibraryIndexCommand","","YARD/Server/Commands/LibraryIndexCommand.html","","<p>Returns the index of libraries served by the server.\n"],["YARD::Server::Commands::LibraryOptions","","YARD/Server/Commands/LibraryOptions.html","",""],["YARD::Server::Commands::ListCommand","","YARD/Server/Commands/ListCommand.html","","<p>Returns a list of objects of a specific type\n"],["YARD::Server::Commands::SearchCommand","","YARD/Server/Commands/SearchCommand.html","","<p>Performs a search over the objects inside of a library and returns the\nresults as HTML or plaintext\n"],["YARD::Server::Commands::StaticFileCommand","","YARD/Server/Commands/StaticFileCommand.html","","<p>Serves static content when no other router matches a request\n"],["YARD::Server::DocServerHelper","","YARD/Server/DocServerHelper.html","","<p>A module that is mixed into {Templates::Template} in order to customize\ncertain template methods.\n"],["YARD::Server::DocServerSerializer","","YARD/Server/DocServerSerializer.html","","<p>A custom {Serializers::Base serializer} which returns resource URLs instead\nof static relative paths …\n"],["YARD::Server::FinishRequest","","YARD/Server/FinishRequest.html","","<p>Short circuits a request by raising an error. This exception is caught by\n{Commands::Base#call} to immediately …\n"],["YARD::Server::LibraryNotPreparedError","","YARD/Server/LibraryNotPreparedError.html","","<p>This exception is raised when {LibraryVersion#prepare!} fails, or discovers\nthat the library is not “prepared” …\n"],["YARD::Server::LibraryVersion","","YARD/Server/LibraryVersion.html","","<p>A library version encapsulates a library&#39;s documentation at a specific\nversion. Although the version …\n"],["YARD::Server::NotFoundError","","YARD/Server/NotFoundError.html","","<p>Raises an error if a resource is not found. This exception is caught by\n{Commands::Base#call} to immediately …\n"],["YARD::Server::RackAdapter","","YARD/Server/RackAdapter.html","","<p>A server adapter to respond to requests using the Rack server\ninfrastructure.\n"],["YARD::Server::RackMiddleware","","YARD/Server/RackMiddleware.html","","<p>This class wraps the {RackAdapter} into a Rack-compatible middleware. See\n{#initialize} for a list of …\n"],["YARD::Server::Router","","YARD/Server/Router.html","","<p>A router class implements the logic used to recognize a request for a\nspecific URL and run specific {Commands::Base …\n"],["YARD::Server::StaticCaching","","YARD/Server/StaticCaching.html","","<p>Implements static caching for requests.\n<p>@see Router Router documentation for “Caching”\n"],["YARD::Server::WebrickAdapter","","YARD/Server/WebrickAdapter.html","","<p>The main adapter to initialize a WEBrick server.\n"],["YARD::Server::WebrickServlet","","YARD/Server/WebrickServlet.html","","<p>The main WEBrick servlet implementation, accepting only GET requests.\n"],["YARD::StubProxy","","YARD/StubProxy.html","","<p>Stubs marshal dumps and acts a delegate class for an object by path\n<p>@private\n"],["YARD::Tags","","YARD/Tags.html","",""],["YARD::Tags::AttributeDirective","","YARD/Tags/AttributeDirective.html","","<p>Defines an attribute with a given name, using indented block data as the\nattribute&#39;s docstring.  …\n"],["YARD::Tags::DefaultFactory","","YARD/Tags/DefaultFactory.html","",""],["YARD::Tags::DefaultTag","","YARD/Tags/DefaultTag.html","",""],["YARD::Tags::Directive","","YARD/Tags/Directive.html","","<p>The base directive class. Subclass this class to create a custom directive,\nregistering it with {Library.define_directive}. …\n"],["YARD::Tags::EndGroupDirective","","YARD/Tags/EndGroupDirective.html","","<p>Ends a group listing definition. Group definition automatically end when\nclass or module blocks are closed, …\n"],["YARD::Tags::GroupDirective","","YARD/Tags/GroupDirective.html","","<p>Defines a group listing. All methods (and attributes) seen after this\ndirective are placed into a group …\n"],["YARD::Tags::Library","","YARD/Tags/Library.html","","<p>Keeps track of all the registered meta-data tags and directives. Also\nallows for defining of custom tags …\n"],["YARD::Tags::MacroDirective","","YARD/Tags/MacroDirective.html","","<p>Defines a block of text to be expanded whenever the macro is called by name\nin subsequent docstrings. …\n"],["YARD::Tags::MethodDirective","","YARD/Tags/MethodDirective.html","","<p>Defines a method object with a given method signature, using indented block\ndata as the method&#39;s …\n"],["YARD::Tags::OptionTag","","YARD/Tags/OptionTag.html","",""],["YARD::Tags::OverloadTag","","YARD/Tags/OverloadTag.html","",""],["YARD::Tags::ParseDirective","","YARD/Tags/ParseDirective.html","","<p>Parses a block of code as if it were present in the source file at that\nlocation. This directive is useful …\n"],["YARD::Tags::RefTag","","YARD/Tags/RefTag.html","",""],["YARD::Tags::RefTagList","","YARD/Tags/RefTagList.html","",""],["YARD::Tags::ScopeDirective","","YARD/Tags/ScopeDirective.html","","<p>Modifies the current parsing scope (class or instance). If this directive\nis defined on a docstring attached …\n"],["YARD::Tags::Tag","","YARD/Tags/Tag.html","","<p>Represents a metadata tag value (+@tag+). Tags can have any combination of\n{#types}, {#name} and {#text}, …\n"],["YARD::Tags::TagFormatError","","YARD/Tags/TagFormatError.html","",""],["YARD::Tags::VisibilityDirective","","YARD/Tags/VisibilityDirective.html","","<p>Modifies the current parsing visibility (public, protected, or private). If\nthis directive is defined …\n"],["YARD::Templates","","YARD/Templates.html","","<p>Namespace for templating system\n"],["YARD::Templates::Engine","","YARD/Templates/Engine.html","","<p>This module manages all creation, handling and rendering of {Template}\nobjects.\n<p>To create a template object …\n"],["YARD::Templates::ErbCache","","YARD/Templates/ErbCache.html","","<p>@since 0.5.4\n"],["YARD::Templates::Helpers","","YARD/Templates/Helpers.html","",""],["YARD::Templates::Helpers::BaseHelper","","YARD/Templates/Helpers/BaseHelper.html","","<p>The base helper module included in all templates.\n"],["YARD::Templates::Helpers::FilterHelper","","YARD/Templates/Helpers/FilterHelper.html","","<p>Helpers for various object types\n"],["YARD::Templates::Helpers::HtmlHelper","","YARD/Templates/Helpers/HtmlHelper.html","","<p>The helper module for HTML templates.\n"],["YARD::Templates::Helpers::HtmlSyntaxHighlightHelper","","YARD/Templates/Helpers/HtmlSyntaxHighlightHelper.html","","<p>Helper methods for syntax highlighting.\n"],["YARD::Templates::Helpers::Markup","","YARD/Templates/Helpers/Markup.html","",""],["YARD::Templates::Helpers::Markup::RDocMarkdown","","YARD/Templates/Helpers/Markup/RDocMarkdown.html","",""],["YARD::Templates::Helpers::Markup::RDocMarkup","","YARD/Templates/Helpers/Markup/RDocMarkup.html","",""],["YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkup","","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkup.html","",""],["YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkup::RDocMarkupToHtml","","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkup/RDocMarkupToHtml.html","",""],["YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkupToHtml","","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkupToHtml.html","",""],["YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkupToHtml::RDoc","","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkupToHtml/RDoc.html","",""],["YARD::Templates::Helpers::MarkupHelper","","YARD/Templates/Helpers/MarkupHelper.html","","<p>Helper methods for loading and managing markup types.\n"],["YARD::Templates::Helpers::MethodHelper","","YARD/Templates/Helpers/MethodHelper.html","","<p>Helper methods for method objects.\n"],["YARD::Templates::Helpers::ModuleHelper","","YARD/Templates/Helpers/ModuleHelper.html","","<p>Helper methods for managing module objects.\n"],["YARD::Templates::Helpers::TextHelper","","YARD/Templates/Helpers/TextHelper.html","","<p>Helper methods for text template formats.\n"],["YARD::Templates::Helpers::UMLHelper","","YARD/Templates/Helpers/UMLHelper.html","","<p>Helpers for UML template format\n"],["YARD::Templates::Section","","YARD/Templates/Section.html","","<p>Abstracts the structure for a section and its subsections into an ordered\nlist of sections and subsections. …\n"],["YARD::Templates::Template","","YARD/Templates/Template.html","",""],["YARD::Templates::Template::ClassMethods","","YARD/Templates/Template/ClassMethods.html","",""],["YARD::Templates::TemplateOptions","","YARD/Templates/TemplateOptions.html","","<p>An Options class containing default options for base template rendering.\nFor options specific to generation …\n"],["YARD::Verifier","","YARD/Verifier.html","","<p>Similar to a Proc, but runs a set of Ruby expressions using a small DSL to\nmake tag lookups easier.\n<p>The …\n"],["+","YARD::Docstring","YARD/Docstring.html#method-i-2B","(other)","<p>Adds another {Docstring}, copying over tags.\n<p>@param [Docstring, String] other the other docstring (or …\n"],["<<","YARD::CodeObjects::CodeObjectList","YARD/CodeObjects/CodeObjectList.html#method-i-3C-3C","(value)",""],["<<","YARD::Logger","YARD/Logger.html#method-i-3C-3C","(msg = '')",""],["<<","YARD::Parser::Ruby::Legacy::TokenList","YARD/Parser/Ruby/Legacy/TokenList.html#method-i-3C-3C","(*tokens)",""],["<<","YARD::Templates::Section","YARD/Templates/Section.html#method-i-3C-3C","(*args)",""],["<=>","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-3C-3D-3E","(other)","<p>@return [Boolean]\n"],["==","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-3D-3D","(other)",""],["==","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-3D-3D","(other)",""],["==","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-3D-3D","(other)",""],["==","YARD::I18n::Message","YARD/I18n/Message.html#method-i-3D-3D","(other)","<p>@param [Message] other the <code>Message</code> to be compared. @return\n[Boolean] checks whether this message is equal …\n"],["==","YARD::I18n::Messages","YARD/I18n/Messages.html#method-i-3D-3D","(other)","<p>Checks if this messages list is equal to another messages list.\n<p>@param [Messages] other the container …\n"],["==","YARD::Options","YARD/Options.html#method-i-3D-3D","(other)","<p>@return [Boolean] whether another Options object equals the\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">keys</span> <span class=\"ruby-keyword\">and</span> <span class=\"ruby-identifier\">values</span> <span class=\"ruby-identifier\">of</span> <span class=\"ruby-identifier\">this</span> <span class=\"ruby-identifier\">options</span> <span class=\"ruby-identifier\">object</span>\n</pre>\n"],["==","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-3D-3D","(ast)","<p>@return [Boolean] whether the node is equal to another by checking\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">list</span> <span class=\"ruby-keyword\">and</span> <span class=\"ruby-identifier\">type</span>\n</pre>\n<p>@private\n"],["==","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-3D-3D","(other)",""],["==","YARD::Templates::Section","YARD/Templates/Section.html#method-i-3D-3D","(other)",""],["===","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-c-3D-3D-3D","(other)","<p>Compares the class with subclasses\n<p>@param [Object] other the other object to compare classes with @return …\n"],["===","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-3D-3D-3D","(other)","<p>@return [Boolean]\n"],["===","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-c-3D-3D-3D","(other)",""],["P","Object","Object.html#method-i-P","(namespace, name = nil, type = nil)","<p>Shortcut for creating a YARD::CodeObjects::Proxy via a path\n<p>@see YARD::CodeObjects::Proxy @see YARD::Registry.resolve …\n"],["S","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-S","(*args)","<p>Alias for creating a {Section} with arguments @see Section#initialize\n@since 0.6.0\n"],["T","YARD::Templates::Template","YARD/Templates/Template.html#method-i-T","(*path)","<p>Loads a template specified by path. If <code>:template</code> or\n<code>:format</code> is specified in the {#options} hash, they …\n"],["T","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-T","(*path)",""],["Token","YARD::Parser::Ruby::Legacy::RubyToken","YARD/Parser/Ruby/Legacy/RubyToken.html#method-i-Token","(token, value = nil)","<p>@private\n"],["[]","Hash","Hash.html#method-c-5B-5D","(*args)",""],["[]","SymbolHash","SymbolHash.html#method-i-5B-5D","(key)","<p>Accessed a symbolized key @param [#to_sym] key the key to access @return\n[Object] the value associated …\n"],["[]","SymbolHash","SymbolHash.html#method-c-5B-5D","(*hsh)","<p>@overload [](hash)\n\n<pre>Creates a SymbolHash object from an existing Hash\n\n@example\n  SymbolHash[&#39;x&#39; =&gt; 1, ...</pre>\n"],["[]","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-5B-5D","(key)","<p>Accesses a custom attribute on the object @param [#to_s] key the name of\nthe custom attribute @return …\n"],["[]","YARD::I18n::Messages","YARD/I18n/Messages.html#method-i-5B-5D","(id)","<p>@param [String] id the message ID to perform a lookup on. @return [Message,\nnil] a registered message …\n"],["[]","YARD::Options","YARD/Options.html#method-i-5B-5D","(key)","<p>Delegates calls with Hash syntax to actual method with key name\n<p>@example Calling on an option key with …\n"],["[]","YARD::Registry","YARD/Registry.html#method-c-5B-5D","(path)",""],["[]","YARD::RegistryStore","YARD/RegistryStore.html#method-i-5B-5D","(key)",""],["[]","YARD::Templates::Section","YARD/Templates/Section.html#method-i-5B-5D","(*args)",""],["[]=","SymbolHash","SymbolHash.html#method-i-5B-5D-3D","(key, value)","<p>Assigns a value to a symbolized key @param [#to_sym] key the key @param\n[Object] value the value to be …\n"],["[]=","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-5B-5D-3D","(key, value)","<p>Sets a custom attribute on the object @param [#to_s] key the name of the\ncustom attribute @param [Object] …\n"],["[]=","YARD::Options","YARD/Options.html#method-i-5B-5D-3D","(key, value)","<p>Delegates setter calls with Hash syntax to the attribute setter with the\nkey name\n<p>@example Setting an …\n"],["[]=","YARD::RegistryStore","YARD/RegistryStore.html#method-i-5B-5D-3D","(key, value)",""],["__p","Object","Object.html#method-i-__p","(path)","<p>@private\n"],["_dump","Gem::Specification","Gem/Specification.html#method-i-_dump","(limit)",""],["_dump","YARD::StubProxy","YARD/StubProxy.html#method-i-_dump","(depth)",""],["_dump_with_rdoc","Gem::Specification","Gem/Specification.html#method-i-_dump_with_rdoc","(limit)",""],["_dump_without_rdoc","Gem::Specification","Gem/Specification.html#method-i-_dump_without_rdoc","(limit)",""],["_load","YARD::StubProxy","YARD/StubProxy.html#method-c-_load","(str)",""],["abort!","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-abort-21","()","<p>Aborts a handler by raising {Handlers::HandlerAborted}. An exception will\nonly be logged in debugging …\n"],["accept_paragraph","YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkupToHtml","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkupToHtml.html#method-i-accept_paragraph","(*args)",""],["adapter","YARD::Server::Commands::LibraryOptions","YARD/Server/Commands/LibraryOptions.html#method-i-adapter","()",""],["add","YARD::Logger","YARD/Logger.html#method-i-add","(*args)","<p>Override this internal Logger method to clear line\n"],["add_api_verifier","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-add_api_verifier","()","<p>Adds verifier rule for APIs @return [void] @since 0.8.1\n"],["add_comment","YARD::I18n::Message","YARD/I18n/Message.html#method-i-add_comment","(comment)","<p>Adds a comment for the message.\n<p>@param [String] comment the comment for the message to be added. @return …\n"],["add_comment","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-add_comment","(line, node = nil, before_node = nil, into = false)",""],["add_default_paths","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-add_default_paths","()","<p>Adds paths in {SEARCH_PATHS_FILE} @since 0.5.1\n"],["add_expressions","YARD::Verifier","YARD/Verifier.html#method-i-add_expressions","(*expressions)","<p>Adds a set of expressions and recompiles the verifier\n<p>@param [Array&lt;String&gt;] expressions a list …\n"],["add_extra_files","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-add_extra_files","(*files)","<p>Adds a set of extra documentation files to be processed @param\n[Array&lt;String&gt;] files the set of …\n"],["add_file","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-add_file","(file, line = nil, has_comments = false)","<p>Associates a file with a code object, optionally adding the line where it\nwas defined. By convention, …\n"],["add_gem_paths","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-add_gem_paths","()","<p>Adds all RubyGems yardoc files to search paths @return [void]\n"],["add_gems","YARD::CLI::Gems","YARD/CLI/Gems.html#method-i-add_gems","(gems)",""],["add_gems","YARD::CLI::Server","YARD/CLI/Server.html#method-i-add_gems","()",""],["add_gems_from_gemfile","YARD::CLI::Server","YARD/CLI/Server.html#method-i-add_gems_from_gemfile","(gemfile = nil)",""],["add_ignored_plugins_file","YARD::Config","YARD/Config.html#method-c-add_ignored_plugins_file","()","<p>Legacy support for {IGNORED_PLUGINS}\n"],["add_libraries","YARD::CLI::Server","YARD/CLI/Server.html#method-i-add_libraries","(args)",""],["add_library","YARD::Server::Adapter","YARD/Server/Adapter.html#method-i-add_library","(library)","<p>Adds a library to the {#libraries} mapping for a given library object.\n@example Adding a new library …\n"],["add_location","YARD::I18n::Message","YARD/I18n/Message.html#method-i-add_location","(path, line)","<p>Adds location information for the message.\n<p>@param [String] path the path where the message appears. @param …\n"],["add_options","YARD::Templates::Template","YARD/Templates/Template.html#method-i-add_options","(opts = nil)",""],["add_reader_tags","YARD::Handlers::Ruby::StructHandlerMethods","YARD/Handlers/Ruby/StructHandlerMethods.html#method-i-add_reader_tags","(klass, new_method, member)","<p>Creates the auto-generated docstring for the getter method of a\nstruct&#39;s member. This is used so …\n"],["add_spec","Gem::SourceIndex","Gem/SourceIndex.html#method-i-add_spec","(gem_spec, name = gem_spec.full_name)","<p>Add a gem specification to the source index.\n"],["add_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-add_specs","(*gem_specs)","<p>Add gem specifications to the source index.\n"],["add_tag","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-add_tag","(tag_data, factory_method = nil)","<p>@since 0.6.0\n"],["add_tag","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-add_tag","(*tags)","<p>Add tags to the {#docstring} @see Docstring#add_tag @since 0.8.4\n"],["add_tag","YARD::Docstring","YARD/Docstring.html#method-i-add_tag","(*tags)","<p>Adds a tag or reftag object to the tag list. If you want to parse tag data\nbased on the {Tags::DefaultFactory} …\n"],["add_token","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-add_token","(token, data)",""],["add_visibility_verifier","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-add_visibility_verifier","()","<p>Adds verifier rule for visibilities @return [void] @since 0.5.6\n"],["add_writer_tags","YARD::Handlers::Ruby::StructHandlerMethods","YARD/Handlers/Ruby/StructHandlerMethods.html#method-i-add_writer_tags","(klass, new_method, member)","<p>Creates the auto-generated docstring for the setter method of a\nstruct&#39;s member. This is used so …\n"],["added_objects","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-added_objects","(registry1, registry2)",""],["advance","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-advance","(num = 1)",""],["advance_loop","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-advance_loop","(&block)",""],["after","Insertion","Insertion.html#method-i-after","(val, recursive = false)","<p>Inserts the value after <code>val</code>.\n<p>@example If subsections are ignored\n\n<pre>Insertion.new([1, [2], 3], :X).after(1) ...</pre>\n"],["after_any","Insertion","Insertion.html#method-i-after_any","(val)","<p>Alias for {#after} with <code>recursive</code> set to true @since 0.6.0\n"],["after_parse","YARD::DocstringParser","YARD/DocstringParser.html#method-c-after_parse","(&block)","<p>Creates a callback that is called after a docstring is successfully parsed.\nUse this method to perform …\n"],["after_parse","YARD::Tags::AttributeDirective","YARD/Tags/AttributeDirective.html#method-i-after_parse","()",""],["after_parse","YARD::Tags::Directive","YARD/Tags/Directive.html#method-i-after_parse","()","<p>Called after parsing all directives and tags in the docstring. Used to\nperform any cleanup after all …\n"],["after_parse","YARD::Tags::MethodDirective","YARD/Tags/MethodDirective.html#method-i-after_parse","()",""],["after_parse_callbacks","YARD::DocstringParser","YARD/DocstringParser.html#method-c-after_parse_callbacks","()","<p>@return [Array&lt;Proc&gt;] the {after_parse} callback proc objects\n"],["after_parse_file","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-after_parse_file","(&block)","<p>Registers a callback to be called after an individual file is parsed. The\nblock passed to this method …\n"],["after_parse_file_callbacks","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-after_parse_file_callbacks","()","<p>@return [Array&lt;Proc&gt;] the list of callbacks to be called after\n\n<pre>parsing a file. Should only be used ...</pre>\n"],["after_parse_list","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-after_parse_list","(&block)","<p>Registers a callback to be called after a list of files is parsed via\n{parse}. The block passed to this …\n"],["after_parse_list_callbacks","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-after_parse_list_callbacks","()","<p>@return [Array&lt;Proc&gt;] the list of callbacks to be called after\n\n<pre>parsing a list of files. Should only ...</pre>\n"],["after_serialize","YARD::Serializers::Base","YARD/Serializers/Base.html#method-i-after_serialize","(data)","<p>Called after serialization.\n<p>@abstract Should run code after serialization. @param [String] data the\ndata …\n"],["aliases","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-aliases","()","<p>Returns all alias names of the object @return [Array&lt;Symbol&gt;] the\nalias names\n"],["align_right","YARD::Templates::Helpers::TextHelper","YARD/Templates/Helpers/TextHelper.html#method-i-align_right","(text, spacer = ' ', col = 72)","<p>@return [String] aligns text to the right\n"],["all","YARD::Registry","YARD/Registry.html#method-c-all","(*types)","<p>Returns all objects in the registry that match one of the types provided in\nthe <code>types</code> list (if <code>types</code> …\n"],["all=","YARD::Docstring","YARD/Docstring.html#method-i-all-3D","(content, parse = true)",""],["all_disk_objects","YARD::RegistryStore","YARD/RegistryStore.html#method-i-all_disk_objects","()",""],["all_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-i-all_gems","()","<p>TODO: remove method\n"],["all_objects","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-all_objects","()",""],["all_objects","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-all_objects","()","<p>@return [Array&lt;CodeObjects::Base&gt;] all the parsed objects in the\nregistry,\n\n<pre>removing any objects ...</pre>\n"],["all_objects","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-all_objects","()","<p>The list of all objects to process. Override this method to change which\nobjects YARD should generate …\n"],["anchor_for","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-anchor_for","(object)","<p>@param [CodeObjects::Base] object the object to get an anchor for @return\n[String] the anchor for a specific …\n"],["anonymous?","YARD::Tags::MacroDirective","YARD/Tags/MacroDirective.html#method-i-anonymous-3F","()",""],["any","YARD::Templates::Section","YARD/Templates/Section.html#method-i-any","(item)",""],["apply","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-c-apply","(docstring, call_params = [], full_source = '', block_source = '', method_object = nil)","<p>Applies a macro on a docstring by creating any macro data inside of the\ndocstring first. Equivalent to …\n"],["apply_locale","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-apply_locale","()","<p>Applies the specified locale to collected objects @return [void] @since\n0.8.3\n"],["apply_macro","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-c-apply_macro","(macro, docstring, call_params = [], full_source = '', block_source = '')","<p>Applies a macro to a docstring, interpolating the macro&#39;s data on the\ndocstring and appending any …\n"],["arguments","YARD::Config","YARD/Config.html#method-c-arguments","()","<p>@return [Array&lt;String&gt;] arguments from commandline and yardopts file\n"],["at","YARD::Registry","YARD/Registry.html#method-c-at","(path)","<p>Returns the object at a specific path. @param [String, :root] path the\npathname to look for. If <code>path</code> …\n"],["attach?","YARD::Tags::MacroDirective","YARD/Tags/MacroDirective.html#method-i-attach-3F","()",""],["attach_comment","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-attach_comment","(statement)",""],["attached?","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-i-attached-3F","()","<p>@return [Boolean] whether this macro is attached to a method\n"],["attr_info","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-attr_info","()","<p>Returns the read/writer info for the attribute if it is one @return\n[SymbolHash] if there is information …\n"],["attributes","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-attributes","()",""],["available?","YARD::I18n::POParser","YARD/I18n/POParser.html#method-c-available-3F","()","<p>@return [Boolean] true if gettext is available, false otherwise.\n"],["back","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-back","(num = 1)",""],["backtrace","YARD::Logger","YARD/Logger.html#method-i-backtrace","(exc, level_meth = :error)","<p>Prints the backtrace <code>exc</code> to the logger as error data.\n<p>@param [Array&lt;String&gt;] exc the backtrace list …\n"],["balances?","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-balances-3F","(tk)","<p>Handles the balancing of parentheses and blocks\n<p>@param [RubyToken::Token] tk the token to process @return …\n"],["base_path","YARD::Server::DocServerHelper","YARD/Server/DocServerHelper.html#method-i-base_path","(path)","<p>@example The base path for a library &#39;foo&#39;\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">base_path</span>(<span class=\"ruby-string\">&#39;docs&#39;</span>) <span class=\"ruby-comment\"># =&gt; &#39;docs/foo&#39;</span>\n</pre>\n<p>@param [String] path …\n"],["basepath=","YARD::Serializers::FileSystemSerializer","YARD/Serializers/FileSystemSerializer.html#method-i-basepath-3D","(value)",""],["before","Insertion","Insertion.html#method-i-before","(val, recursive = false)","<p>Inserts the value before <code>val</code> @param [Object] val the object\nthe value will be inserted before @param …\n"],["before_any","Insertion","Insertion.html#method-i-before_any","(val)","<p>Alias for {#before} with <code>recursive</code> set to true @since 0.6.0\n"],["before_parse_file","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-before_parse_file","(&block)","<p>Registers a callback to be called before an individual file is parsed. The\nblock passed to this method …\n"],["before_parse_file_callbacks","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-before_parse_file_callbacks","()","<p>@return [Array&lt;Proc&gt;] the list of callbacks to be called before\n\n<pre>parsing a file. Should only be used ...</pre>\n"],["before_parse_list","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-before_parse_list","(&block)","<p>Registers a callback to be called before a list of files is parsed via\n{parse}. The block passed to this …\n"],["before_parse_list_callbacks","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-before_parse_list_callbacks","()","<p>@return [Array&lt;Proc&gt;] the list of callbacks to be called before\n\n<pre>parsing a list of files. Should ...</pre>\n"],["before_serialize","YARD::Serializers::Base","YARD/Serializers/Base.html#method-i-before_serialize","()","<p>Called before serialization.\n<p>@abstract Should run code before serialization. Should return false\n\n<pre>if serialization ...</pre>\n"],["blank?","YARD::Docstring","YARD/Docstring.html#method-i-blank-3F","(only_visible_tags = true)","<p>Returns true if the docstring has no content that is visible to a template.\n<p>@param [Boolean] only_visible_tags …\n"],["block","YARD::Parser::Ruby::ClassNode","YARD/Parser/Ruby/ClassNode.html#method-i-block","()",""],["block","YARD::Parser::Ruby::LoopNode","YARD/Parser/Ruby/LoopNode.html#method-i-block","()",""],["block","YARD::Parser::Ruby::MethodCallNode","YARD/Parser/Ruby/MethodCallNode.html#method-i-block","()",""],["block","YARD::Parser::Ruby::ModuleNode","YARD/Parser/Ruby/ModuleNode.html#method-i-block","()",""],["block?","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-block-3F","()","<p>@return [Boolean] whether the node has a block\n"],["block_param","YARD::Parser::Ruby::MethodCallNode","YARD/Parser/Ruby/MethodCallNode.html#method-i-block_param","()",""],["block_param","YARD::Parser::Ruby::ParameterNode","YARD/Parser/Ruby/ParameterNode.html#method-i-block_param","()",""],["build_gems","YARD::CLI::Gems","YARD/CLI/Gems.html#method-i-build_gems","()","<p>Builds .yardoc files for all non-existing gems\n"],["cache","YARD::Server::Commands::Base","YARD/Server/Commands/Base.html#method-i-cache","(data)","<p>Override this method to implement custom caching mechanisms for\n<p>@example Caching to memory\n\n<pre>$memory_cache ...</pre>\n"],["cache","YARD::Templates::Template","YARD/Templates/Template.html#method-i-cache","(section)",""],["cache_filename","YARD::Templates::Template","YARD/Templates/Template.html#method-i-cache_filename","(section)",""],["cache_object","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-cache_object","(name, path)","<p>Caches the .yardoc file where an object can be found in the {CACHE_FILE}\n@return [void]\n"],["call","YARD::Server::Commands::Base","YARD/Server/Commands/Base.html#method-i-call","(request)","<p>The main method called by a router with a request object.\n<p>@note This command should not be overridden …\n"],["call","YARD::Server::Commands::LibraryCommand","YARD/Server/Commands/LibraryCommand.html#method-i-call","(request)",""],["call","YARD::Server::RackAdapter","YARD/Server/RackAdapter.html#method-i-call","(env)","<p>Responds to Rack requests and builds a response with the {Router}. @return\n[Array(Numeric,Hash,Array)] …\n"],["call","YARD::Server::RackMiddleware","YARD/Server/RackMiddleware.html#method-i-call","(env)",""],["call","YARD::Server::Router","YARD/Server/Router.html#method-i-call","(request)","<p>Perform routing on a specific request, serving the request as a static file\nthrough {Commands::StaticFileCommand} …\n"],["call","YARD::Tags::Directive","YARD/Tags/Directive.html#method-i-call","()","<p>Called when processing the directive. Subclasses should implement this\nmethod to perform all functionality …\n"],["call","YARD::Tags::EndGroupDirective","YARD/Tags/EndGroupDirective.html#method-i-call","()",""],["call","YARD::Tags::GroupDirective","YARD/Tags/GroupDirective.html#method-i-call","()",""],["call","YARD::Tags::MacroDirective","YARD/Tags/MacroDirective.html#method-i-call","()",""],["call","YARD::Tags::MethodDirective","YARD/Tags/MethodDirective.html#method-i-call","()",""],["call","YARD::Tags::ParseDirective","YARD/Tags/ParseDirective.html#method-i-call","()",""],["call","YARD::Tags::ScopeDirective","YARD/Tags/ScopeDirective.html#method-i-call","()",""],["call","YARD::Tags::VisibilityDirective","YARD/Tags/VisibilityDirective.html#method-i-call","()",""],["call","YARD::Verifier","YARD/Verifier.html#method-i-call","(object)","<p>Tests the expressions on the object.\n<p>@note If the object is a {CodeObjects::Proxy} the result will always …\n"],["call?","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-call-3F","()","<p>@return [Boolean] whether the node is a method call\n"],["call?","YARD::Parser::Ruby::MethodCallNode","YARD/Parser/Ruby/MethodCallNode.html#method-i-call-3F","()",""],["call_after_parse_callbacks","YARD::DocstringParser","YARD/DocstringParser.html#method-i-call_after_parse_callbacks","()","<p>Calls all {after_parse} callbacks\n"],["call_directives_after_parse","YARD::DocstringParser","YARD/DocstringParser.html#method-i-call_directives_after_parse","()","<p>Calls the {Directive#after_parse} callback on all the created directives.\n"],["call_has_paren?","YARD::Parser::Ruby::MethodCallNode","YARD/Parser/Ruby/MethodCallNode.html#method-i-call_has_paren-3F","()",""],["call_params","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-call_params","()","<p>@abstract Implement this method to return the parameters in a method call\n\n<pre>statement. It should return ...</pre>\n"],["call_params","YARD::Handlers::Ruby::Base","YARD/Handlers/Ruby/Base.html#method-i-call_params","()","<p>@group Macro Handling\n"],["call_params","YARD::Handlers::Ruby::Legacy::Base","YARD/Handlers/Ruby/Legacy/Base.html#method-i-call_params","()",""],["caller_method","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-caller_method","()","<p>@abstract Implement this method to return the method being called in\n\n<pre>a method call. It should return nil ...</pre>\n"],["caller_method","YARD::Handlers::Ruby::Base","YARD/Handlers/Ruby/Base.html#method-i-caller_method","()",""],["caller_method","YARD::Handlers::Ruby::Legacy::Base","YARD/Handlers/Ruby/Legacy/Base.html#method-i-caller_method","()",""],["capture","YARD::Logger","YARD/Logger.html#method-i-capture","(msg, nontty_log = :debug, &block)","<p>Captures the duration of a block of code for benchmark analysis. Also calls\n{#progress} on the message …\n"],["char","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-char","(num = 1)",""],["char_no","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-char_no","()",""],["charset","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-charset","()","<p>Returns the current character set. The default value can be overridden by\nsetting the <code>LANG</code> environment …\n"],["check_static_cache","YARD::Server::StaticCaching","YARD/Server/StaticCaching.html#method-i-check_static_cache","()","<p>Called by a router to return the cached object. By default, this method\nperforms disk-based caching. …\n"],["checksum_for","YARD::Registry","YARD/Registry.html#method-c-checksum_for","(data)","<p>@param [String] data data to checksum @return [String] the SHA1 checksum\nfor data\n"],["checksums","YARD::Registry","YARD/Registry.html#method-c-checksums","()","<p>@return [Hash{String =&gt; String}] a set of checksums for files\n"],["checksums_path","YARD::RegistryStore","YARD/RegistryStore.html#method-i-checksums_path","()",""],["checksums_path","YARD::Serializers::YardocSerializer","YARD/Serializers/YardocSerializer.html#method-i-checksums_path","()",""],["child","YARD::CodeObjects::NamespaceObject","YARD/CodeObjects/NamespaceObject.html#method-i-child","(opts = {})","<p>Looks for a child that matches the attributes specified by\n<code>opts</code>.\n<p>@example Finds a child by name and scope …\n"],["children","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-children","()","<p>@return [Array&lt;AstNode&gt;] the {AstNode} children inside the node\n"],["class","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-class","()","<p>Returns the class name of the object the proxy is mimicking, if resolved.\nOtherwise returns <code>Proxy</code>. @return …\n"],["class_attributes","YARD::CodeObjects::NamespaceObject","YARD/CodeObjects/NamespaceObject.html#method-i-class_attributes","()","<p>Only the class attributes @return [Hash] a list of method names and their\nread/write objects @see #attributes …\n"],["class_method?","YARD::Tags::MacroDirective","YARD/Tags/MacroDirective.html#method-i-class_method-3F","()",""],["class_name","Module","Module.html#method-i-class_name","()","<p>Returns the class name of a full module namespace path\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">module</span> <span class=\"ruby-constant\">A</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">B</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">C</span>; <span class=\"ruby-identifier\">class_name</span> <span class=\"ruby-keyword\">end</span> <span class=\"ruby-comment\"># =&gt; &quot;C&quot;</span>\n</pre>\n"],["class_name","YARD::Parser::Ruby::ClassNode","YARD/Parser/Ruby/ClassNode.html#method-i-class_name","()",""],["clean_tokens","YARD::Parser::Ruby::Legacy::Statement","YARD/Parser/Ruby/Legacy/Statement.html#method-i-clean_tokens","(tokens)",""],["cleanpath","File","File.html#method-c-cleanpath","(path)","<p>Cleans a path by removing extraneous &#39;..&#39;, &#39;.&#39; and\n&#39;/&#39; characters\n<p>@example Clean …\n"],["cleanup","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-cleanup","(gemfile)",""],["clear","YARD::Registry","YARD/Registry.html#method-c-clear","()","<p>Clears the registry @return [void]\n"],["clear!","YARD::Templates::ErbCache","YARD/Templates/ErbCache.html#method-c-clear-21","()",""],["clear_line","YARD::Logger","YARD/Logger.html#method-i-clear_line","()",""],["clear_markup_cache","YARD::Templates::Helpers::MarkupHelper","YARD/Templates/Helpers/MarkupHelper.html#method-c-clear_markup_cache","()","<p>Clears the markup provider cache information. Mainly used for testing.\n@return [void]\n"],["clear_progress","YARD::Logger","YARD/Logger.html#method-i-clear_progress","()","<p>Clears the progress indicator in the TTY display. @return [void] @since\n0.8.2\n"],["clear_subclasses","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-clear_subclasses","()","<p>Clear all registered subclasses. Testing purposes only @return [void]\n"],["cmod?","YARD::Parser::Ruby::ConditionalNode","YARD/Parser/Ruby/ConditionalNode.html#method-i-cmod-3F","()",""],["column","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","YARD/Parser/Ruby/Legacy/RubyLex/BufferedReader.html#method-i-column","()",""],["commands","YARD::CLI::CommandParser","YARD/CLI/CommandParser.html#method-i-commands","()",""],["comment_starts_line?","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-comment_starts_line-3F","(charno)",""],["comments","YARD::Parser::C::Comment","YARD/Parser/C/Comment.html#method-i-comments","()",""],["comments","YARD::Parser::Ruby::CommentNode","YARD/Parser/Ruby/CommentNode.html#method-i-comments","()",""],["comments_range","YARD::Parser::C::Statement","YARD/Parser/C/Statement.html#method-i-comments_range","()",""],["common_options","YARD::CLI::Command","YARD/CLI/Command.html#method-i-common_options","(opts)","<p>Adds a set of common options to the tail of the OptionParser\n<p>@param [OptionParser] opts the option parser …\n"],["condition","YARD::Parser::Ruby::ConditionalNode","YARD/Parser/Ruby/ConditionalNode.html#method-i-condition","()",""],["condition","YARD::Parser::Ruby::LoopNode","YARD/Parser/Ruby/LoopNode.html#method-i-condition","()",""],["condition?","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-condition-3F","()","<p>@return [Boolean] whether the node is a if/elsif/else condition\n"],["condition?","YARD::Parser::Ruby::ConditionalNode","YARD/Parser/Ruby/ConditionalNode.html#method-i-condition-3F","()",""],["constants","YARD::CodeObjects::ClassObject","YARD/CodeObjects/ClassObject.html#method-i-constants","(opts = {})","<p>Returns the list of constants matching the options hash.\n<p>@param [Hash] opts the options hash to match …\n"],["constants","YARD::CodeObjects::NamespaceObject","YARD/CodeObjects/NamespaceObject.html#method-i-constants","(opts = {})","<p>Returns all constants in the namespace\n<p>@option opts [Boolean] :included (true) whether or not to include …\n"],["constructor?","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-constructor-3F","()","<p>@return whether or not the method is the #initialize constructor method\n"],["consume_body_statements","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-consume_body_statements","()",""],["consume_comment","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-consume_comment","(add_comment = true)",""],["consume_directive","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-consume_directive","()",""],["consume_quote","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-consume_quote","(type = '\"')",""],["consume_toplevel_statement","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-consume_toplevel_statement","()",""],["consume_until","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-consume_until","(end_char, bracket_level = 0, brace_level = 0, add_comment = true)",""],["consume_whitespace","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-consume_whitespace","()",""],["contents","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-contents","()",""],["contents=","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-contents-3D","(contents)",""],["convert_encoding","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-i-convert_encoding","(content)","<p>Searches for encoding line and forces encoding @since 0.5.3\n"],["convert_method_to_overload","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-convert_method_to_overload","(meth)","<p>Converts a {CodeObjects::MethodObject} into an overload object @since 0.5.3\n"],["convert_ref_tags","YARD::Docstring","YARD/Docstring.html#method-i-convert_ref_tags","()","<p>Maps valid reference tags\n<p>@return [Array&lt;Tags::RefTag&gt;] the list of valid reference tags\n"],["convert_token","YARD::Parser::Ruby::Legacy::TokenList","YARD/Parser/Ruby/Legacy/TokenList.html#method-i-convert_token","(lex, tk)",""],["copy_assets","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-copy_assets","()","<p>Copies any assets to the output directory @return [void] @since 0.6.0\n"],["copy_to","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-copy_to","(other)","<p>Copies all data in this object to another code object, except for uniquely\nidentifying information (path, …\n"],["copyable_attributes","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-copyable_attributes","()","<p>Override this method if your code object subclass does not allow copying of\ncertain attributes.\n<p>@return …\n"],["copyable_attributes","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-copyable_attributes","()",""],["create","Hash","Hash.html#method-c-create","(*args)",""],["create","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-c-create","(macro_name, data, method_object = nil)","<p>Creates a new macro and fills in the relevant properties. @param [String]\nmacro_name the name of the …\n"],["create_186","Hash","Hash.html#method-c-create_186","(*args)",""],["create_attribute_data","YARD::Tags::AttributeDirective","YARD/Tags/AttributeDirective.html#method-i-create_attribute_data","(object)",""],["create_attributes","YARD::Handlers::Ruby::StructHandlerMethods","YARD/Handlers/Ruby/StructHandlerMethods.html#method-i-create_attributes","(klass, members)","<p>Creates the given member methods and attaches them to the given\nClassObject.\n<p>@param [ClassObject] klass …\n"],["create_class","YARD::Handlers::Ruby::StructHandlerMethods","YARD/Handlers/Ruby/StructHandlerMethods.html#method-i-create_class","(classname, superclass)","<p>Creates and registers a class object with the given name and superclass\nname. Returns it for further …\n"],["create_directive","YARD::DocstringParser","YARD/DocstringParser.html#method-i-create_directive","(tag_name, tag_buf)","<p>Creates a new directive using the registered {#library} @return [Directive]\nthe directive object that …\n"],["create_docstring","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-c-create_docstring","(macro_name, data, method_object = nil)",""],["create_library_version_if_yardopts_exist","YARD::CLI::Server","YARD/CLI/Server.html#method-i-create_library_version_if_yardopts_exist","(library, dir)","<p>@param [String] library The library name. @param [String, nil] dir The\nargument provided on the CLI after …\n"],["create_member_method?","YARD::Handlers::Ruby::StructHandlerMethods","YARD/Handlers/Ruby/StructHandlerMethods.html#method-i-create_member_method-3F","(klass, member, type = :read)","<p>Determines whether to create an attribute method based on the class&#39;s\ntags.\n<p>@param [ClassObject] klass …\n"],["create_method_from_expressions","YARD::Verifier","YARD/Verifier.html#method-i-create_method_from_expressions","()","<p>Creates the <code>__execute</code> method by evaluating the expressions as\nRuby code @return [void]\n"],["create_object","YARD::Tags::MethodDirective","YARD/Tags/MethodDirective.html#method-i-create_object","()",""],["create_reader","YARD::Handlers::Ruby::StructHandlerMethods","YARD/Handlers/Ruby/StructHandlerMethods.html#method-i-create_reader","(klass, member)","<p>Creates the getter (reader) method and attaches it to the class as an\nattribute. Also sets up the docstring …\n"],["create_ref_tag","YARD::DocstringParser","YARD/DocstringParser.html#method-i-create_ref_tag","(tag_name, name, object_name)","<p>Creates a {Tags::RefTag}\n"],["create_struct_superclass","YARD::Handlers::Ruby::ClassHandler","YARD/Handlers/Ruby/ClassHandler.html#method-i-create_struct_superclass","(superclass, superclass_def)",""],["create_struct_superclass","YARD::Handlers::Ruby::Legacy::ClassHandler","YARD/Handlers/Ruby/Legacy/ClassHandler.html#method-i-create_struct_superclass","(superclass, superclass_def)",""],["create_tag","YARD::DocstringParser","YARD/DocstringParser.html#method-i-create_tag","(tag_name, tag_buf = '')","<p>Creates a tag from the {Tags::DefaultFactory tag factory}.\n<p>To add an already created tag object, append …\n"],["create_writer","YARD::Handlers::Ruby::StructHandlerMethods","YARD/Handlers/Ruby/StructHandlerMethods.html#method-i-create_writer","(klass, member)","<p>Creates the setter (writer) method and attaches it to the class as an\nattribute. Also sets up the docstring …\n"],["current_time","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-current_time","()",""],["cvars","YARD::CodeObjects::NamespaceObject","YARD/CodeObjects/NamespaceObject.html#method-i-cvars","()","<p>Returns class variables defined in this namespace. @return\n[Array&lt;ClassVariableObject&gt;] a list …\n"],["debug","YARD::Logger","YARD/Logger.html#method-i-debug","(*args)","<p>Changes the debug level to DEBUG if $DEBUG is set and writes a debugging\nmessage.\n"],["debug?","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-c-debug-3F","()",""],["def?","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-def-3F","()","<p>@return [Boolean] whether the node is a method definition\n"],["def?","YARD::Parser::Ruby::MethodDefinitionNode","YARD/Parser/Ruby/MethodDefinitionNode.html#method-i-def-3F","()",""],["def_token","YARD::Parser::Ruby::Legacy::RubyToken","YARD/Parser/Ruby/Legacy/RubyToken.html#method-c-def_token","(token_n, super_token = Token, reading = nil, *opts)","<p>@private\n"],["default=","YARD::I18n::Locale","YARD/I18n/Locale.html#method-c-default-3D","(locale)",""],["default_attr","YARD::Options","YARD/Options.html#method-c-default_attr","(key, default)","<p>@!macro [attach] yard.default_attr\n\n<pre>@!attribute $1</pre>\n<p>Defines an attribute named <code>key</code> and sets a default value …\n"],["default_factory","YARD::Tags::Library","YARD/Tags/Library.html#method-c-default_factory","()","<p>@!attribute default_factory Replace the factory object responsible for\nparsing tags by setting this to …\n"],["default_factory=","YARD::Tags::Library","YARD/Tags/Library.html#method-c-default_factory-3D","(factory)",""],["define","YARD::Rake::YardocTask","YARD/Rake/YardocTask.html#method-i-define","()","<p>Defines the rake task @return [void]\n"],["define_directive","YARD::Tags::Library","YARD/Tags/Library.html#method-c-define_directive","(tag, tag_meth = nil, directive_class = nil)","<p>@macro [attach] yard.directive\n\n<pre>@!method $1_directive\n@!visibility private\n@yard.directive $1 [$2] $-1</pre>\n"],["define_tag","YARD::Tags::Library","YARD/Tags/Library.html#method-c-define_tag","(label, tag, meth = nil)","<p>Convenience method to define a new tag using one of {Tag}&#39;s factory\nmethods, or the regular {DefaultFactory#parse_tag} …\n"],["delete","SymbolHash","SymbolHash.html#method-i-delete","(key)","<p>Deleted a key and value associated with it @param [#to_sym] key the key to\ndelete @return [void]\n"],["delete","YARD::Options","YARD/Options.html#method-i-delete","(key)","<p>Deletes an option value for <code>key</code>\n<p>@param [Symbol, String] key the key to delete a value for @return [Object]\n…\n"],["delete","YARD::Registry","YARD/Registry.html#method-c-delete","(object)","<p>Deletes an object from the registry @param [CodeObjects::Base] object the\nobject to remove @return [void] …\n"],["delete","YARD::RegistryStore","YARD/RegistryStore.html#method-i-delete","(key)","<p>Deletes an object at a given path @param [#to_sym] key the key to delete\n@return [void]\n"],["delete_from_disk","YARD::Registry","YARD/Registry.html#method-c-delete_from_disk","()","<p>Deletes the yardoc file from disk @return [void]\n"],["delete_tag_if","YARD::Docstring","YARD/Docstring.html#method-i-delete_tag_if","(&block)","<p>Deletes all tags where the block returns true @yieldparam [Tags::Tag] tag\nthe tag that is being tested …\n"],["delete_tags","YARD::Docstring","YARD/Docstring.html#method-i-delete_tags","(name)","<p>Delete all tags with <code>name</code> @param [String] name the tag name\n@return [void] @since 0.7.0\n"],["description","YARD::CLI::Command","YARD/CLI/Command.html#method-i-description","()",""],["description","YARD::CLI::Config","YARD/CLI/Config.html#method-i-description","()",""],["description","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-description","()",""],["description","YARD::CLI::Display","YARD/CLI/Display.html#method-i-description","()",""],["description","YARD::CLI::Gems","YARD/CLI/Gems.html#method-i-description","()",""],["description","YARD::CLI::Graph","YARD/CLI/Graph.html#method-i-description","()",""],["description","YARD::CLI::Help","YARD/CLI/Help.html#method-i-description","()",""],["description","YARD::CLI::I18n","YARD/CLI/I18n.html#method-i-description","()",""],["description","YARD::CLI::List","YARD/CLI/List.html#method-i-description","()",""],["description","YARD::CLI::MarkupTypes","YARD/CLI/MarkupTypes.html#method-i-description","()",""],["description","YARD::CLI::Server","YARD/CLI/Server.html#method-i-description","()",""],["description","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-description","()",""],["description","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-description","()",""],["description","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-description","()",""],["deserialize","YARD::Serializers::YardocSerializer","YARD/Serializers/YardocSerializer.html#method-i-deserialize","(path, is_path = false)",""],["destroy","YARD::RegistryStore","YARD/RegistryStore.html#method-i-destroy","(force = false)","<p>Deletes the .yardoc database on disk\n<p>@param [Boolean] force if force is not set to true, the file/directory …\n"],["detect_reference","YARD::DocstringParser","YARD/DocstringParser.html#method-i-detect_reference","(content)",""],["directive_call","YARD::Tags::Library","YARD/Tags/Library.html#method-i-directive_call","(tag, parser)","<p>@return [Directive]\n"],["directive_create","YARD::Tags::Library","YARD/Tags/Library.html#method-i-directive_create","(tag_name, tag_buf, parser)","<p>Creates a new directive with tag information and a docstring parser object.\n@param [String] tag_name …\n"],["directive_method_name","YARD::Tags::Library","YARD/Tags/Library.html#method-c-directive_method_name","(tag_name)",""],["divert_read_from","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","YARD/Parser/Ruby/Legacy/RubyLex/BufferedReader.html#method-i-divert_read_from","(reserve)",""],["do_GET","YARD::Server::WebrickServlet","YARD/Server/WebrickServlet.html#method-i-do_GET","(request, response)",""],["docs_prefix","YARD::Server::Router","YARD/Server/Router.html#method-i-docs_prefix","()","<p>@return [String] the URI prefix for all object documentation requests\n"],["docstring","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-docstring","(locale = I18n::Locale.default)","<p>The documentation string associated with the object\n<p>@param [String, I18n::Locale] locale (I18n::Locale.default) …\n"],["docstring","YARD::Parser::Ruby::CommentNode","YARD/Parser/Ruby/CommentNode.html#method-i-docstring","()",""],["docstring=","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-docstring-3D","(comments)","<p>Attaches a docstring to a code object by parsing the comments attached to\nthe statement and filling the …\n"],["docstring=","YARD::Parser::Ruby::CommentNode","YARD/Parser/Ruby/CommentNode.html#method-i-docstring-3D","(value)",""],["double_splat_param","YARD::Parser::Ruby::ParameterNode","YARD/Parser/Ruby/ParameterNode.html#method-i-double_splat_param","()",""],["dump","Gem::SourceIndex","Gem/SourceIndex.html#method-i-dump","()",""],["dump","YARD::Serializers::YardocSerializer","YARD/Serializers/YardocSerializer.html#method-i-dump","(object)",""],["dup","YARD::Docstring","YARD/Docstring.html#method-i-dup","()","<p>Deep-copies a docstring\n<p>@note This method creates a new docstring with new tag lists, but does\n\n<pre>not create ...</pre>\n"],["dup","YARD::Templates::Section","YARD/Templates/Section.html#method-i-dup","()",""],["dynamic?","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-dynamic-3F","()","<p>Is the object defined conditionally at runtime? @see #dynamic\n"],["each","Gem::SourceIndex","Gem/SourceIndex.html#method-i-each","()","<p>Iterate over the specifications in the source index.\n"],["each","YARD::I18n::Messages","YARD/I18n/Messages.html#method-i-each","(&block)","<p>Enumerates each {Message} in the container.\n<p>@yieldparam [Message] message the next message object in\n\n<pre>the ...</pre>\n"],["each","YARD::Options","YARD/Options.html#method-i-each","(&block)","<p>Yields over every option key and value @yield [key, value] every option key\nand value @yieldparam [Symbol] …\n"],["each","YARD::Registry","YARD/Registry.html#method-c-each","(&block)","<p>Iterates over {all} with no arguments\n"],["each","YARD::Server::Commands::LibraryOptions","YARD/Server/Commands/LibraryOptions.html#method-i-each","(&block)",""],["else_block","YARD::Parser::Ruby::ConditionalNode","YARD/Parser/Ruby/ConditionalNode.html#method-i-else_block","()",""],["embed_mixins_match?","YARD::Templates::TemplateOptions","YARD/Templates/TemplateOptions.html#method-i-embed_mixins_match-3F","(mixin)","<p>@param [CodeObjects::Base] mixin accepts any code object, but returns\n\n<pre>nil unless the object is a module.</pre>\n"],["emit_attribute_event","YARD::I18n::Text","YARD/I18n/Text.html#method-i-emit_attribute_event","(match_data, line_no)",""],["emit_empty_line_event","YARD::I18n::Text","YARD/I18n/Text.html#method-i-emit_empty_line_event","(line, line_no)",""],["emit_markup_event","YARD::I18n::Text","YARD/I18n/Text.html#method-i-emit_markup_event","(line, line_no)",""],["emit_paragraph_event","YARD::I18n::Text","YARD/I18n/Text.html#method-i-emit_paragraph_event","(paragraph, paragraph_start_line, line_no, &block)",""],["encode_path_components","YARD::Serializers::FileSystemSerializer","YARD/Serializers/FileSystemSerializer.html#method-i-encode_path_components","(*components)","<p>Remove special chars from filenames. Windows disallows \\ / : * ? “ &lt;\n&gt; | but we will just …\n"],["encode_value","YARD::CLI::Config","YARD/CLI/Config.html#method-i-encode_value","(value)",""],["encode_values","YARD::CLI::Config","YARD/CLI/Config.html#method-i-encode_values","()",""],["encoding_line","YARD::Parser::Ruby::Legacy::RubyParser","YARD/Parser/Ruby/Legacy/RubyParser.html#method-i-encoding_line","()",""],["encoding_line","YARD::Parser::Ruby::RubyParser","YARD/Parser/Ruby/RubyParser.html#method-i-encoding_line","()",""],["ensure_loaded!","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-ensure_loaded-21","(object, max_retries = 1)","<p>Ensures that a specific <code>object</code> has been parsed and loaded into\nthe registry. This is necessary when adding …\n"],["ensure_parsed","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-ensure_parsed","()",""],["enter_level","YARD::Logger","YARD/Logger.html#method-i-enter_level","(new_level = level, &block)","<p>Sets the logger level for the duration of the block\n<p>@example\n\n<pre>log.enter_level(Logger::ERROR) do\n  YARD.parse_string ...</pre>\n"],["enumerator","YARD::Parser::Base","YARD/Parser/Base.html#method-i-enumerator","()","<p>This method should be implemented to return a list of semantic tokens\nrepresenting the source code to …\n"],["enumerator","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-enumerator","()",""],["enumerator","YARD::Parser::Ruby::Legacy::RubyParser","YARD/Parser/Ruby/Legacy/RubyParser.html#method-i-enumerator","()",""],["enumerator","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-enumerator","()",""],["enumerator","YARD::Parser::Ruby::RubyParser","YARD/Parser/Ruby/RubyParser.html#method-i-enumerator","()",""],["eql?","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-eql-3F","(other)",""],["eql?","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-eql-3F","(other)",""],["eql?","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-eql-3F","(other)","<p>@return [Boolean] whether another LibraryVersion is equal to this one\n"],["eql?","YARD::Templates::Section","YARD/Templates/Section.html#method-i-eql-3F","(other)",""],["equal?","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-equal-3F","(other)","<p>Tests if another object is equal to this, including a proxy @param [Base,\nProxy] other if other is a …\n"],["equal?","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-equal-3F","(other)",""],["equal?","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-equal-3F","(other)","<p>@return [Boolean]\n"],["equal?","YARD::CodeObjects::RootObject","YARD/CodeObjects/RootObject.html#method-i-equal-3F","(other)",""],["equal?","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-equal-3F","(other)",""],["erb","YARD::Templates::Template","YARD/Templates/Template.html#method-i-erb","(section, &block)","<p>@param [String, Symbol] section the section name @yield calls subsections\nto be rendered @return [String] …\n"],["erb_file_for","YARD::Templates::Template","YARD/Templates/Template.html#method-i-erb_file_for","(section)",""],["erb_with","YARD::Templates::Template","YARD/Templates/Template.html#method-i-erb_with","(content, filename = nil)",""],["escape_message_id","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-escape_message_id","(message_id)",""],["exists?","YARD::Serializers::Base","YARD/Serializers/Base.html#method-i-exists-3F","(object)","<p>Returns whether an object has been serialized\n<p>@abstract This method should return whether the endpoint …\n"],["exists?","YARD::Serializers::FileSystemSerializer","YARD/Serializers/FileSystemSerializer.html#method-i-exists-3F","(object)","<p>Checks the disk for an object and returns whether it was serialized.\n<p>@param [CodeObjects::Base] object …\n"],["expand","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-c-expand","(macro_data, call_params = [], full_source = '', block_source = '')","<p>Expands <code>macro_data</code> using the interpolation parameters.\n<p>Interpolation rules:\n<p>$0, $1, $2, … = the Nth parameter …\n"],["expand","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-i-expand","(call_params = [], full_source = '', block_source = '')","<p>Expands the macro using @param [Array&lt;String&gt;] call_params a list of\ntokens that are passed\n\n<pre>to the ...</pre>\n"],["expand","YARD::Tags::MacroDirective","YARD/Tags/MacroDirective.html#method-i-expand","(macro_data)",""],["expand_and_parse","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-expand_and_parse","(gemfile, io)",""],["expand_gem","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-expand_gem","(gemfile, io)",""],["expressions=","YARD::Verifier","YARD/Verifier.html#method-i-expressions-3D","(value)",""],["extension=","YARD::Serializers::FileSystemSerializer","YARD/Serializers/FileSystemSerializer.html#method-i-extension-3D","(value)",""],["extract_db_from_options_file","YARD::CLI::Server","YARD/CLI/Server.html#method-i-extract_db_from_options_file","(options_file)",""],["extract_documents","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-extract_documents","(object)",""],["extract_messages","YARD::I18n::Text","YARD/I18n/Text.html#method-i-extract_messages","()","<p>Extracts translation target messages from +@input+.\n<p>@yield [:attribute, name, value, line_no] the block …\n"],["extract_method_details","YARD::Handlers::Ruby::Legacy::Base","YARD/Handlers/Ruby/Legacy/Base.html#method-i-extract_method_details","()","<p>Extracts method information for macro expansion only\n<p>@todo This is a duplicate implementation of {MethodHandler}. …\n"],["extract_name_from_text","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-extract_name_from_text","(text)","<p>Extracts the name from raw tag text returning the name and remaining value\n<p>@param [String] text the raw …\n"],["extract_paragraphs","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-extract_paragraphs","(file)",""],["extract_parameters","YARD::Handlers::Ruby::ClassHandler","YARD/Handlers/Ruby/ClassHandler.html#method-i-extract_parameters","(superclass)","<p>Extract the parameters from the Struct.new AST node, returning them as a\nlist of strings\n<p>@param [MethodCallNode] …\n"],["extract_parameters","YARD::Handlers::Ruby::ConstantHandler","YARD/Handlers/Ruby/ConstantHandler.html#method-i-extract_parameters","(superclass)","<p>Extract the parameters from the Struct.new AST node, returning them as a\nlist of strings\n<p>@param [MethodCallNode] …\n"],["extract_parameters","YARD::Handlers::Ruby::Legacy::ClassHandler","YARD/Handlers/Ruby/Legacy/ClassHandler.html#method-i-extract_parameters","(superstring)","<p>Extracts the parameter list from the Struct.new declaration and returns it\nformatted as a list of member …\n"],["extract_parameters","YARD::Handlers::Ruby::Legacy::ConstantHandler","YARD/Handlers/Ruby/Legacy/ConstantHandler.html#method-i-extract_parameters","(parameters)",""],["extract_tag_documents","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-extract_tag_documents","(tag)",""],["extract_tag_name","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-extract_tag_name","(tag)",""],["extract_tag_text","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-extract_tag_text","(tag)",""],["extract_title_and_desc_from_text","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-extract_title_and_desc_from_text","(text)",""],["extract_types_and_name_from_text","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-extract_types_and_name_from_text","(text, opening_types = TYPELIST_OPENING_CHARS, closing_types = TYPELIST_CLOSING_CHARS)","<p>Parses a [], &lt;&gt;, {} or () block at the beginning of a line of text\ninto a list of comma delimited …\n"],["extract_types_and_name_from_text_unstripped","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-extract_types_and_name_from_text_unstripped","(text, opening_types = TYPELIST_OPENING_CHARS, closing_types = TYPELIST_CLOSING_CHARS)",""],["factory_method_for","YARD::Tags::Library","YARD/Tags/Library.html#method-c-factory_method_for","(tag)","<p>Returns the factory method used to parse the tag text for a specific tag\n<p>@param [Symbol] tag the tag name …\n"],["factory_method_for_directive","YARD::Tags::Library","YARD/Tags/Library.html#method-c-factory_method_for_directive","(directive)","<p>Returns the factory method used to parse the tag text for a specific\ndirective\n<p>@param [Symbol] directive …\n"],["favicon?","YARD::Server::Commands::StaticFileCommand","YARD/Server/Commands/StaticFileCommand.html#method-i-favicon-3F","()","<p>Return an empty favicon.ico if it does not exist so that browsers don&#39;t\ncomplain.\n"],["file","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-file","()","<p>Returns the filename the object was first parsed at, taking definitions\nwith docstrings first.\n<p>@return …\n"],["file","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-file","()","<p>@return [String] the filename the node was parsed from\n"],["file","YARD::Templates::Template","YARD/Templates/Template.html#method-i-file","(basename, allow_inherited = false)","<p>Returns the contents of a file. If <code>allow_inherited</code> is set to\n<code>true</code>, use +{{{__super__}}}+ inside the file …\n"],["file=","YARD::CLI::YardocOptions","YARD/CLI/YardocOptions.html#method-i-file-3D","(v)",""],["file_encoding","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-file_encoding","()",""],["final_options","YARD::Server::Router","YARD/Server/Router.html#method-i-final_options","(library, paths)","<p>Adds extra :library/:path option keys to the adapter options. Use this\nmethod when passing options to …\n"],["find","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-c-find","(macro_name)","<p>Finds a macro using <code>macro_name</code> @param [#to_s] macro_name the\nname of the macro @return [MacroObject] …\n"],["find_attached_macro","YARD::Handlers::Ruby::DSLHandlerMethods","YARD/Handlers/Ruby/DSLHandlerMethods.html#method-i-find_attached_macro","()",""],["find_constant_docstring","YARD::Handlers::C::HandlerMethods","YARD/Handlers/C/HandlerMethods.html#method-i-find_constant_docstring","(object)",""],["find_file","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-find_file","(basename)","<p>Searches for a file identified by <code>basename</code> in the\ntemplate&#39;s path as well as any mixed in template …\n"],["find_handlers","YARD::Handlers::Processor","YARD/Handlers/Processor.html#method-i-find_handlers","(statement)","<p>Searches for all handlers in {Base.subclasses} that match the\n<code>statement</code>\n<p>@param statement the statement …\n"],["find_method_body","YARD::Handlers::C::HandlerMethods","YARD/Handlers/C/HandlerMethods.html#method-i-find_method_body","(object, symbol)",""],["find_name","Gem::SourceIndex","Gem/SourceIndex.html#method-i-find_name","(gem_name, requirement = Gem::Requirement.default)","<p>Find a gem by an exact match on the short name.\n"],["find_nth_file","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-find_nth_file","(basename, index = 1)","<p>Searches for the nth file (where n = <code>index</code>) identified by\nbasename in the template&#39;s path and any …\n"],["find_object","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-find_object","(name)","<p>Locates an object by name starting in the cached paths and then searching\nthrough any search paths.\n<p>@param …\n"],["find_or_create","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-c-find_or_create","(macro_name, data, method_object = nil)","<p>Parses a given docstring and determines if the macro is “new” or not. If\nthe macro has $variable …\n"],["find_or_create","YARD::Tags::MacroDirective","YARD/Tags/MacroDirective.html#method-i-find_or_create","()",""],["find_template_paths","YARD::Templates::Engine","YARD/Templates/Engine.html#method-c-find_template_paths","(from_template, path)","<p>Searches through the registered {template_paths} and returns all full\ndirectories that have the <code>path</code> …\n"],["first_line","YARD::Parser::C::Statement","YARD/Parser/C/Statement.html#method-i-first_line","()",""],["first_line","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-first_line","()","<p>@return [String] the first line of source represented by the node.\n"],["first_line","YARD::Parser::Ruby::CommentNode","YARD/Parser/Ruby/CommentNode.html#method-i-first_line","()",""],["first_line","YARD::Parser::Ruby::Legacy::Statement","YARD/Parser/Ruby/Legacy/Statement.html#method-i-first_line","()",""],["fix_dash_dash","YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkup","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkup.html#method-i-fix_dash_dash","(text)","<p>Don&#39;t allow – to turn into &amp;#8212; element. The chances of this\nbeing some –option is far more …\n"],["fix_typewriter","YARD::Templates::Helpers::Markup::RDocMarkdown","YARD/Templates/Helpers/Markup/RDocMarkdown.html#method-i-fix_typewriter","(html)",""],["fix_typewriter","YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkup","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkup.html#method-i-fix_typewriter","(text)","<p>Fixes RDoc behaviour with ++ only supporting alphanumeric text.\n<p>@todo Refactor into own SimpleMarkup subclass …\n"],["format","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-format","(options = {})","<p>Renders the object using the {Templates::Engine templating system}.\n<p>@example Formats a class in plaintext …\n"],["format_args","YARD::Handlers::Ruby::MethodHandler","YARD/Handlers/Ruby/MethodHandler.html#method-i-format_args","()",""],["format_args","YARD::Templates::Helpers::MethodHelper","YARD/Templates/Helpers/MethodHelper.html#method-i-format_args","(object)","<p>@return [String] formatted arguments for a method\n"],["format_block","YARD::Templates::Helpers::MethodHelper","YARD/Templates/Helpers/MethodHelper.html#method-i-format_block","(object)","<p>@return [String] formatted block if one exists\n"],["format_code","YARD::Templates::Helpers::MethodHelper","YARD/Templates/Helpers/MethodHelper.html#method-i-format_code","(object, show_lines = false)","<p>@return [String] formats source of an object\n"],["format_constant","YARD::Templates::Helpers::MethodHelper","YARD/Templates/Helpers/MethodHelper.html#method-i-format_constant","(value)","<p>@return [String] formats source code of a constant value\n"],["format_lines","YARD::Templates::Helpers::MethodHelper","YARD/Templates/Helpers/MethodHelper.html#method-i-format_lines","(object)","<p>@return [String] formats line numbers for source code of an object\n"],["format_log","YARD::Logger","YARD/Logger.html#method-i-format_log","(sev, time, prog, msg)","<p>Log format (from Logger implementation). Used by Logger internally\n"],["format_object_name_list","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-format_object_name_list","(objects)","<p>Formats a list of objects and links them @return [String] a formatted list\nof objects\n"],["format_object_title","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-format_object_title","(object)","<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">s</span> = <span class=\"ruby-identifier\">format_object_title</span> <span class=\"ruby-constant\">ModuleObject</span>.<span class=\"ruby-identifier\">new</span>(:<span class=\"ruby-identifier\">root</span>, :<span class=\"ruby-constant\">MyModuleName</span>)\n<span class=\"ruby-identifier\">s</span> <span class=\"ruby-comment\"># =&gt; &quot;Module: MyModuleName&quot;</span>\n</pre>\n"],["format_object_type","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-format_object_type","(object)","<p>@example Formatted type of an exception class\n\n<pre>o = ClassObject.new(:root, :MyError)\no.superclass = P(&#39;RuntimeError&#39;) ...</pre>\n"],["format_objects","YARD::CLI::Display","YARD/CLI/Display.html#method-i-format_objects","()","<p>@return [String] the output data for all formatted objects\n"],["format_path","YARD::Templates::Helpers::UMLHelper","YARD/Templates/Helpers/UMLHelper.html#method-i-format_path","(object)","<p>Formats the path of an object for Graphviz syntax @param\n[CodeObjects::Base] object an object to format …\n"],["format_return_types","YARD::Templates::Helpers::MethodHelper","YARD/Templates/Helpers/MethodHelper.html#method-i-format_return_types","(object)","<p>@return [String] formatted and linked return types for a method\n"],["format_source","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-format_source","(source)","<p>Formats source code by removing leading indentation\n<p>@param [String] source the source code to format @return …\n"],["format_source","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-format_source","(value)","<p>Indents and formats source code\n<p>@param [String] value the input source code @return [String] formatted …\n"],["format_types","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-format_types","(list, brackets = true)","<p>Formats a list of return types for output and links each type.\n<p>@example Formatting types\n\n<pre>format_types([&#39;String&#39;, ...</pre>\n"],["format_types","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-format_types","(typelist, brackets = true)","<p>Formats a list of types from a tag.\n<p>@param [Array&lt;String&gt;, FalseClass] typelist\n\n<pre>the list of types ...</pre>\n"],["freeze_tree","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-freeze_tree","(node = nil)",""],["from_gems_in","Gem::SourceIndex","Gem/SourceIndex.html#method-c-from_gems_in","(*spec_dirs)","<p>Creates a new SourceIndex from the ruby format gem specifications in\n<code>spec_dirs</code>.\n"],["from_installed_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-c-from_installed_gems","(*deprecated)","<p>Factory method to construct a source index instance for a given path.\n<p>deprecated &mdash; If supplied, from_installed_gems …\n"],["full_paths","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-full_paths","()","<p>@return [Array&lt;String&gt;] a list of full paths @note This method caches\npath results. Paths should …\n"],["full_source","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-full_source","()","<p>@return [String] the full source that the node was parsed from\n"],["fulldoc_template","YARD::Server::Commands::LibraryCommand","YARD/Server/Commands/LibraryCommand.html#method-i-fulldoc_template","()","<p>Hack to load a custom fulldoc template object that does not do any\nrendering/generation. We need this …\n"],["gem_signature","Gem::SourceIndex","Gem/SourceIndex.html#method-i-gem_signature","(gem_full_name)","<p>The signature for the given gem specification.\n"],["gemspec","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-gemspec","()","<p>@return [Gem::Specification] a gemspec object for a given library. Used\n\n<pre>for :gem source types.</pre>\n<p>@return …\n"],["general_options","YARD::CLI::I18n","YARD/CLI/I18n.html#method-i-general_options","(opts)",""],["general_options","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-general_options","(opts)",""],["general_options","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-general_options","(opts)","<p>Adds general options\n"],["generate","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-generate","()","<p>Generates POT from +@messages+.\n<p>One PO file entry is generated from a <code>Message</code> in +@messages+.\n<p>Locations …\n"],["generate","YARD::Templates::Engine","YARD/Templates/Engine.html#method-c-generate","(objects, options = {})","<p>Passes a set of objects to the <code>:fulldoc</code> template for full\ndocumentation generation. This is called by …\n"],["generate_doc_for_first_time","YARD::CLI::Server","YARD/CLI/Server.html#method-i-generate_doc_for_first_time","(libver)",""],["generate_message","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-generate_message","(pot, message)",""],["generate_pot","YARD::CLI::I18n","YARD/CLI/I18n.html#method-i-generate_pot","(relative_base_path)",""],["generate_pot_creation_date_value","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-generate_pot_creation_date_value","()",""],["generate_yardoc","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-generate_yardoc","(dir)",""],["get","YARD::RegistryStore","YARD/RegistryStore.html#method-i-get","(key)","<p>Gets a {CodeObjects::Base} from the store\n<p>@param [String, Symbol] key the path name of the object to look …\n"],["get_read","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-get_read","()",""],["get_read","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","YARD/Parser/Ruby/Legacy/RubyLex/BufferedReader.html#method-i-get_read","()",""],["getc","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-getc","()",""],["getc","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","YARD/Parser/Ruby/Legacy/RubyLex/BufferedReader.html#method-i-getc","()",""],["getc_already_read","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","YARD/Parser/Ruby/Legacy/RubyLex/BufferedReader.html#method-i-getc_already_read","()",""],["getc_of_rests","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-getc_of_rests","()",""],["gets","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-gets","()",""],["global_yardoc_file","YARD::Registry","YARD/Registry.html#method-c-global_yardoc_file","(spec, for_writing = false)","<p>@group Retrieving yardoc File Locations\n"],["globals","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-globals","()","<p>An object that keeps track of global state throughout the entire template\nrendering process (including …\n"],["h","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-h","(text)","<p>Escapes text. This is used a lot by the HtmlHelper and there should be some\nhelper to “clean up” …\n"],["h","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-h","(text)","<p>Escapes HTML entities\n<p>@param [String] text the text to escape @return [String] the HTML with\nescaped entities …\n"],["h","YARD::Templates::Helpers::TextHelper","YARD/Templates/Helpers/TextHelper.html#method-i-h","(text)","<p>@return [String] escapes text\n"],["h","YARD::Templates::Helpers::UMLHelper","YARD/Templates/Helpers/UMLHelper.html#method-i-h","(text)","<p>Encodes text in escaped Graphviz syntax @param [String] text text to encode\n@return [String] the encoded …\n"],["handle_alias","YARD::Handlers::C::HandlerMethods","YARD/Handlers/C/HandlerMethods.html#method-i-handle_alias","(var_name, new_name, old_name)",""],["handle_attribute","YARD::Handlers::C::HandlerMethods","YARD/Handlers/C/HandlerMethods.html#method-i-handle_attribute","(var_name, name, read, write)",""],["handle_class","YARD::Handlers::C::HandlerMethods","YARD/Handlers/C/HandlerMethods.html#method-i-handle_class","(var_name, class_name, parent, in_module = nil)",""],["handle_comments","YARD::Handlers::Ruby::DSLHandlerMethods","YARD/Handlers/Ruby/DSLHandlerMethods.html#method-i-handle_comments","()",""],["handle_constants","YARD::Handlers::C::HandlerMethods","YARD/Handlers/C/HandlerMethods.html#method-i-handle_constants","(type, var_name, const_name, value)",""],["handle_method","YARD::Handlers::C::HandlerMethods","YARD/Handlers/C/HandlerMethods.html#method-i-handle_method","(scope, var_name, name, func_name, source_file = nil)",""],["handle_module","YARD::Handlers::C::HandlerMethods","YARD/Handlers/C/HandlerMethods.html#method-i-handle_module","(var_name, module_name, in_module = nil)",""],["handle_special_HYPERLINK","YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkupToHtml","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkupToHtml.html#method-i-handle_special_HYPERLINK","(special)","<p>Disable auto-link of URLs\n"],["handler","YARD::Tags::Directive","YARD/Tags/Directive.html#method-i-handler","()","<p>@!attribute [r] handler @return [Handlers::Base, nil] the handler object\nthe docstring parser\n\n<pre>might be ...</pre>\n"],["handler_base_class","YARD::Handlers::Processor","YARD/Handlers/Processor.html#method-i-handler_base_class","()","<p>Returns the handler base class @return [Base] the base class\n"],["handler_base_namespace","YARD::Handlers::Processor","YARD/Handlers/Processor.html#method-i-handler_base_namespace","()","<p>The module holding the handlers to be loaded\n<p>@return [Module] the module containing the handlers depending …\n"],["handlers","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-handlers","()","<p>@return [Array] a list of matchers for the handler object. @see handles?\n"],["handles","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-handles","(*matches)","<p>Declares the statement type which will be processed by this handler.\n<p>A match need not be unique to a handler. …\n"],["handles?","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-handles-3F","(statement)","<p>This class is implemented by {Ruby::Base} and {Ruby::Legacy::Base}. To\nimplement a base handler class …\n"],["handles?","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-c-handles-3F","(statement, processor)","<p>@return [Boolean] whether the handler handles this statement\n"],["handles?","YARD::Handlers::Processor","YARD/Handlers/Processor.html#method-i-handles-3F","(handler, statement)",""],["handles?","YARD::Handlers::Ruby::Base","YARD/Handlers/Ruby/Base.html#method-c-handles-3F","(node)","<p>@return [Boolean] whether or not an {AstNode} object should be\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">handled</span> <span class=\"ruby-identifier\">by</span> <span class=\"ruby-identifier\">this</span> <span class=\"ruby-identifier\">handler</span>\n</pre>\n"],["handles?","YARD::Handlers::Ruby::Legacy::Base","YARD/Handlers/Ruby/Legacy/Base.html#method-c-handles-3F","(stmt)","<p>@return [Boolean] whether or not a {Parser::Ruby::Legacy::Statement} object\nshould be handled\n\n<pre>by this ...</pre>\n"],["has_directive?","YARD::Tags::Library","YARD/Tags/Library.html#method-i-has_directive-3F","(tag_name)","<p>@param [#to_s] tag_name the name of the tag to look for @return [Boolean]\nwhether a directive by the …\n"],["has_key?","SymbolHash","SymbolHash.html#method-i-has_key-3F","(key)","<p>Tests if a symbolized key exists @param [#to_sym] key the key to test\n@return [Boolean] whether the key …\n"],["has_line?","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-has_line-3F","()","<p>@return [Boolean] whether the node has a {#line_range} set\n"],["has_rdoc?","Gem::Specification","Gem/Specification.html#method-i-has_rdoc-3F","()",""],["has_tag?","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-has_tag-3F","(name)","<p>Tests if the {#docstring} has a tag @see Docstring#has_tag?\n"],["has_tag?","YARD::Docstring","YARD/Docstring.html#method-i-has_tag-3F","(name)","<p>Returns true if at least one tag by the name <code>name</code> was declared\n<p>@param [String] name the tag name to search …\n"],["has_tag?","YARD::Tags::Library","YARD/Tags/Library.html#method-i-has_tag-3F","(tag_name)","<p>@param [#to_s] tag_name the name of the tag to look for @return [Boolean]\nwhether a tag by the given …\n"],["has_tag?","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-has_tag-3F","(name)",""],["has_yardoc","Gem::Specification","Gem/Specification.html#method-i-has_yardoc","()",""],["has_yardoc=","Gem::Specification","Gem/Specification.html#method-i-has_yardoc-3D","(value)","<p>@since 0.5.3\n"],["has_yardoc?","Gem::Specification","Gem/Specification.html#method-i-has_yardoc-3F","()",""],["hash","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-hash","()","<p>@return [Integer] the object&#39;s hash value (for equality checking)\n"],["hash","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-hash","()",""],["hash","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-hash","()","<p>@return [Integer] the object&#39;s hash value (for equality checking)\n"],["hash","YARD::CodeObjects::RootObject","YARD/CodeObjects/RootObject.html#method-i-hash","()",""],["hash","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-hash","()","<p>@return [Fixnum] used for Hash mapping.\n"],["hash","YARD::StubProxy","YARD/StubProxy.html#method-i-hash","()",""],["hash_flag=","YARD::Docstring","YARD/Docstring.html#method-i-hash_flag-3D","(v)",""],["header","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-header","()",""],["hr","YARD::Templates::Helpers::TextHelper","YARD/Templates/Helpers/TextHelper.html#method-i-hr","(col = 72, sep = \"-\")","<p>@return [String] returns a horizontal rule for output\n"],["html_markup_asciidoc","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_markup_asciidoc","(text)","<p>Converts Asciidoc to HTML @param [String] text input Asciidoc text @return\n[String] output HTML\n"],["html_markup_html","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_markup_html","(text)","<p>Converts HTML to HTML @param [String] text input html @return [String]\noutput HTML @since 0.6.0\n"],["html_markup_markdown","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_markup_markdown","(text)","<p>Converts Markdown to HTML @param [String] text input Markdown text @return\n[String] output HTML @since …\n"],["html_markup_none","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_markup_none","(text)","<p>@return [String] the same text with no markup @since 0.6.6\n"],["html_markup_pre","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_markup_pre","(text)","<p>Converts plaintext to pre-formatted HTML @param [String] text the input\ntext @return [String] the output …\n"],["html_markup_rdoc","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_markup_rdoc","(text)","<p>Converts RDoc formatting (SimpleMarkup) to HTML @param [String] text the\ninput RDoc formatted text @return …\n"],["html_markup_ruby","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_markup_ruby","(source)","<p>Highlights Ruby source. Similar to {#html_syntax_highlight}, but this\nmethod is meant to be called from …\n"],["html_markup_text","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_markup_text","(text)","<p>Converts plaintext to regular HTML @param [String] text the input text\n@return [String] the output HTML …\n"],["html_markup_textile","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_markup_textile","(text)","<p>Converts Textile to HTML @param [String] text the input Textile text\n@return [String] output HTML @since …\n"],["html_markup_textile_strict","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_markup_textile_strict","(text)","<p>Converts plaintext to strict Textile (hard breaks) @param [String] text the\ninput textile data @return …\n"],["html_syntax_highlight","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_syntax_highlight","(source, type = nil)","<p>Syntax highlights <code>source</code> in language <code>type</code>.\n<p>@note To support a specific language <code>type</code>, implement the\nmethod …\n"],["html_syntax_highlight_plain","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-html_syntax_highlight_plain","(source)","<p>@return [String] unhighlighted source\n"],["html_syntax_highlight_ruby","YARD::Templates::Helpers::HtmlSyntaxHighlightHelper","YARD/Templates/Helpers/HtmlSyntaxHighlightHelper.html#method-i-html_syntax_highlight_ruby","(source)","<p>Highlights Ruby source @param [String] source the Ruby source code @return\n[String] the highlighted  …\n"],["html_syntax_highlight_ruby_legacy","YARD::Templates::Helpers::HtmlSyntaxHighlightHelper","YARD/Templates/Helpers/HtmlSyntaxHighlightHelper.html#method-i-html_syntax_highlight_ruby_legacy","(source)",""],["html_syntax_highlight_ruby_ripper","YARD::Templates::Helpers::HtmlSyntaxHighlightHelper","YARD/Templates/Helpers/HtmlSyntaxHighlightHelper.html#method-i-html_syntax_highlight_ruby_ripper","(source)",""],["htmlify","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-htmlify","(text, markup = options.markup)","<p>Turns text into HTML using <code>markup</code> style formatting.\n<p>@param [String] text the text to format @param [Symbol] …\n"],["htmlify_line","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-htmlify_line","(*args)","<p>@return [String] HTMLified text as a single line (paragraphs removed)\n"],["identify_comment","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-identify_comment","()",""],["identify_gvar","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-identify_gvar","()",""],["identify_here_document","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-identify_here_document","()",""],["identify_identifier","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-identify_identifier","()",""],["identify_number","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-identify_number","(start)",""],["identify_quotation","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-identify_quotation","(initial_char)",""],["identify_string","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-identify_string","(ltype, quoted = ltype, opener=nil, initial_char = nil)",""],["implicit_docstring?","YARD::Handlers::Ruby::DSLHandlerMethods","YARD/Handlers/Ruby/DSLHandlerMethods.html#method-i-implicit_docstring-3F","()",""],["in_file","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-in_file","(filename)","<p>Declares that a handler should only be called when inside a filename by its\nbasename or a regex match …\n"],["include_extra","YARD::Templates::Template","YARD/Templates/Template.html#method-c-include_extra","(template, options)","<p>Includes the {extra_includes} modules into the template object.\n<p>@param [Template] template the template …\n"],["include_inherited","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-include_inherited","(full_paths)",""],["include_parent","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-include_parent","()",""],["included","YARD::Templates::Template","YARD/Templates/Template.html#method-c-included","(klass)","<p>@!parse extend ClassMethods @private\n"],["included_constants","YARD::CodeObjects::NamespaceObject","YARD/CodeObjects/NamespaceObject.html#method-i-included_constants","()","<p>Returns constants included from any mixins @return\n[Array&lt;ConstantObject&gt;] a list of constant objects …\n"],["included_meths","YARD::CodeObjects::NamespaceObject","YARD/CodeObjects/NamespaceObject.html#method-i-included_meths","(opts = {})","<p>Returns methods included from any mixins that match the attributes\nspecified by <code>opts</code>. If no options are …\n"],["indent","YARD::Templates::Helpers::TextHelper","YARD/Templates/Helpers/TextHelper.html#method-i-indent","(text, len = 4)","<p>@return [String] indents <code>text</code> by <code>len</code> characters.\n"],["index","YARD::Server::Commands::DisplayObjectCommand","YARD/Server/Commands/DisplayObjectCommand.html#method-i-index","()",""],["index_adjust","YARD::Parser::Ruby::MethodCallNode","YARD/Parser/Ruby/MethodCallNode.html#method-i-index_adjust","()",""],["index_adjust","YARD::Parser::Ruby::MethodDefinitionNode","YARD/Parser/Ruby/MethodDefinitionNode.html#method-i-index_adjust","()",""],["index_signature","Gem::SourceIndex","Gem/SourceIndex.html#method-i-index_signature","()","<p>The signature for the source index.  Changes in the signature indicate a\nchange in the index.\n"],["inheritance_tree","YARD::CodeObjects::ClassObject","YARD/CodeObjects/ClassObject.html#method-i-inheritance_tree","(include_mods = false)","<p>Returns the inheritance tree of the object including self.\n<p>@param [Boolean] include_mods whether or not …\n"],["inheritance_tree","YARD::CodeObjects::ModuleObject","YARD/CodeObjects/ModuleObject.html#method-i-inheritance_tree","(include_mods = false)","<p>Returns the inheritance tree of mixins.\n<p>@param [Boolean] include_mods if true, will include mixed in\n\n<pre>modules ...</pre>\n"],["inherited","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-inherited","(subclass)",""],["inherited_constants","YARD::CodeObjects::ClassObject","YARD/CodeObjects/ClassObject.html#method-i-inherited_constants","()","<p>Returns only the constants that were inherited.\n<p>@return [Array&lt;ConstantObject&gt;] the list of inherited …\n"],["inherited_meths","YARD::CodeObjects::ClassObject","YARD/CodeObjects/ClassObject.html#method-i-inherited_meths","(opts = {})","<p>Returns only the methods that were inherited.\n<p>@return [Array&lt;MethodObject&gt;] the list of inherited …\n"],["init","Object","Object.html#method-i-init","()",""],["init","YARD::Templates::Template","YARD/Templates/Template.html#method-i-init","()","<p>Initialization called on the template. Override this in a\n&#39;setup.rb&#39; file in the template&#39;s …\n"],["insert_comments","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-insert_comments","()",""],["insertion","Insertion","Insertion.html#method-i-insertion","(val, rel, recursive = false, list = @list)","<p>This method performs the actual insertion\n<p>@param [Object] val the value to insert @param [Fixnum] rel …\n"],["inspect","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-inspect","()","<p>Inspects the object, returning the type and path @return [String] a string\ndescribing the object\n"],["inspect","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-inspect","()",""],["inspect","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-inspect","()","<p>Returns a text representation of the Proxy @return [String] the\nobject&#39;s #inspect method or P(OBJECTPATH) …\n"],["inspect","YARD::CodeObjects::RootObject","YARD/CodeObjects/RootObject.html#method-i-inspect","()",""],["inspect","YARD::Options","YARD/Options.html#method-i-inspect","()","<p>Inspects the object\n"],["inspect","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-inspect","()","<p>@return [String] inspects the object\n"],["inspect","YARD::Parser::Ruby::Legacy::Statement","YARD/Parser/Ruby/Legacy/Statement.html#method-i-inspect","()",""],["inspect","YARD::Templates::Section","YARD/Templates/Section.html#method-i-inspect","()",""],["inspect","YARD::Templates::Template","YARD/Templates/Template.html#method-i-inspect","()",""],["install_rdoc","Gem::DocManager","Gem/DocManager.html#method-i-install_rdoc","()",""],["install_rdoc_yard","Gem::DocManager","Gem/DocManager.html#method-i-install_rdoc_yard","()",""],["install_rdoc_yard_orig","Gem::DocManager","Gem/DocManager.html#method-i-install_rdoc_yard_orig","()",""],["install_ri","Gem::DocManager","Gem/DocManager.html#method-i-install_ri","()",""],["install_ri_yard","Gem::DocManager","Gem/DocManager.html#method-i-install_ri_yard","()",""],["install_ri_yard_orig","Gem::DocManager","Gem/DocManager.html#method-i-install_ri_yard_orig","()",""],["install_yardoc","Gem::DocManager","Gem/DocManager.html#method-i-install_yardoc","()",""],["installed_spec_directories","Gem::SourceIndex","Gem/SourceIndex.html#method-c-installed_spec_directories","()","<p>Returns a list of directories from Gem.path that contain specifications.\n"],["instance","YARD::Logger","YARD/Logger.html#method-c-instance","(pipe = STDOUT)","<p>The logger instance @return [Logger] the logger instance\n"],["instance","YARD::Registry","YARD/Registry.html#method-c-instance","()","<p>The registry singleton instance.\n<p>@deprecated use Registry.methodname directly. @return [Registry] returns …\n"],["instance","YARD::Tags::Library","YARD/Tags/Library.html#method-c-instance","()","<p>@!attribute instance @return [Library] the main Library instance object.\n"],["instance_attributes","YARD::CodeObjects::NamespaceObject","YARD/CodeObjects/NamespaceObject.html#method-i-instance_attributes","()","<p>Only the instance attributes @return [Hash] a list of method names and\ntheir read/write objects @see …\n"],["instance_of?","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-instance_of-3F","(klass)","<p>@return [Boolean]\n"],["internal_dump","YARD::Serializers::YardocSerializer","YARD/Serializers/YardocSerializer.html#method-i-internal_dump","(object, first_object = false)",""],["io","YARD::Logger","YARD/Logger.html#method-i-io","()","<p>@return [IO] the IO object being logged to @since 0.8.2\n"],["io=","YARD::Logger","YARD/Logger.html#method-i-io-3D","(pipe)",""],["is_a?","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-is_a-3F","(klass)","<p>@return [Boolean]\n"],["is_a?","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-is_a-3F","(other)",""],["is_a?","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-is_a-3F","(klass)",""],["is_alias?","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-is_alias-3F","()","<p>Tests if the object is defined as an alias of another method @return\n[Boolean] whether the object is …\n"],["is_attribute?","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-is_attribute-3F","()","<p>Tests if the object is defined as an attribute in the namespace @return\n[Boolean] whether the object …\n"],["is_class?","YARD::Templates::Helpers::FilterHelper","YARD/Templates/Helpers/FilterHelper.html#method-i-is_class-3F","(object)","<p>@return [Boolean] whether an object is a class\n"],["is_exception?","YARD::CodeObjects::ClassObject","YARD/CodeObjects/ClassObject.html#method-i-is_exception-3F","()","<p>Whether or not the class is a Ruby Exception\n<p>@return [Boolean] whether the object represents a Ruby exception …\n"],["is_explicit?","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-is_explicit-3F","()","<p>Tests boolean {#explicit} value.\n<p>@return [Boolean] whether the method is explicitly defined in source …\n"],["is_method?","YARD::Templates::Helpers::FilterHelper","YARD/Templates/Helpers/FilterHelper.html#method-i-is_method-3F","(object)","<p>@return [Boolean] whether an object is a method\n"],["is_module?","YARD::Templates::Helpers::FilterHelper","YARD/Templates/Helpers/FilterHelper.html#method-i-is_module-3F","(object)","<p>@return [Boolean] whether an object is a module\n"],["is_namespace?","YARD::Templates::Helpers::FilterHelper","YARD/Templates/Helpers/FilterHelper.html#method-i-is_namespace-3F","(object)","<p>@return [Boolean] whether an object is a namespace\n"],["javascripts","Object","Object.html#method-i-javascripts","()",""],["jump","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-jump","(*node_types)","<p>Searches through the node and all descendants and returns the first node\nwith a type matching any of …\n"],["keys","YARD::RegistryStore","YARD/RegistryStore.html#method-i-keys","(reload = false)","<p>Gets all path names from the store. Loads the entire database if\n<code>reload</code> is <code>true</code>\n<p>@param [Boolean] reload …\n"],["kind_of?","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-kind_of-3F","(klass)","<p>@return [Boolean]\n"],["kind_of?","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-kind_of-3F","(other)",""],["kw?","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-kw-3F","()","<p>@return [Boolean] whether the node is a keyword\n"],["kw?","YARD::Parser::Ruby::KeywordNode","YARD/Parser/Ruby/KeywordNode.html#method-i-kw-3F","()",""],["kw?","YARD::Parser::Ruby::MethodDefinitionNode","YARD/Parser/Ruby/MethodDefinitionNode.html#method-i-kw-3F","()",""],["latest_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-latest_specs","(include_prerelease=false)","<p>Returns an Array specifications for the latest released versions of each\ngem in this index.\n"],["length","Gem::SourceIndex","Gem/SourceIndex.html#method-i-length","()",""],["lex","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-lex","()",""],["lex_init","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-lex_init","()",""],["lex_int2","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-lex_int2","()",""],["library","YARD::Server::Commands::LibraryOptions","YARD/Server/Commands/LibraryOptions.html#method-i-library","()",""],["line","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-line","()","<p>Returns the line the object was first parsed at (or nil)\n<p>@return [Fixnum] the line where the object was …\n"],["line","YARD::Docstring","YARD/Docstring.html#method-i-line","()","<p>@return [Fixnum] the first line of the {#line_range} @return [nil] if there\nis no associated {#line_range} …\n"],["line","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-line","()","<p>@return [Fixnum] the starting line number of the node\n"],["line","YARD::Parser::Ruby::Legacy::Statement","YARD/Parser/Ruby/Legacy/Statement.html#method-i-line","()","<p>@return [Fixnum] the first line of Ruby source\n"],["line_no","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-line_no","()","<p>io functions\n"],["line_range","YARD::Parser::C::Statement","YARD/Parser/C/Statement.html#method-i-line_range","()",""],["line_range","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-line_range","()","<p>@return [Range] the line range in {#full_source} represented\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">by</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">node</span>\n</pre>\n"],["line_range","YARD::Parser::Ruby::Legacy::Statement","YARD/Parser/Ruby/Legacy/Statement.html#method-i-line_range","()","<p>@return [Range&lt;Fixnum&gt;] the first to last lines of Ruby source @since\n0.5.4\n"],["link_file","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-link_file","(filename, title = nil, anchor = nil)","<p>Links to an extra file\n<p>@param [String] filename the filename to link to @param [String] title the\ntitle …\n"],["link_file","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-link_file","(filename, title = nil, anchor = nil)","<p>(see BaseHelper#link_file)\n"],["link_include_file","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-link_include_file","(file)","<p>Include a file as a docstring in output @since 0.7.0 @param [String] file\nthe filename to include @return …\n"],["link_include_file","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-link_include_file","(file)","<p>(see BaseHelper#link_include_file)\n"],["link_include_object","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-link_include_object","(obj)","<p>Includes an object&#39;s docstring into output. @since 0.6.0 @param\n[CodeObjects::Base] obj the object …\n"],["link_include_object","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-link_include_object","(obj)","<p>(see BaseHelper#link_include_object)\n"],["link_object","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-link_object","(obj, title = nil)","<p>Links to an object with an optional title\n<p>@param [CodeObjects::Base] obj the object to link to @param …\n"],["link_object","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-link_object","(obj, title = nil, anchor = nil, relative = true)","<p>(see BaseHelper#link_object)\n"],["link_url","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-link_url","(url, title = nil, params = nil)","<p>Links to a URL\n<p>@param [String] url the URL to link to @param [String] title the optional\ntitle to display …\n"],["link_url","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-link_url","(url, title = nil, params = {})","<p>(see BaseHelper#link_url)\n"],["linkify","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-linkify","(*args)","<p>Links objects or URLs. This method will delegate to the correct\n<code>link_</code> method depending on the arguments …\n"],["list_commands","YARD::CLI::CommandParser","YARD/CLI/CommandParser.html#method-i-list_commands","()",""],["list_configuration","YARD::CLI::Config","YARD/CLI/Config.html#method-i-list_configuration","()",""],["list_prefix","YARD::Server::Router","YARD/Server/Router.html#method-i-list_prefix","()","<p>@return [String] the URI prefix for all class/method/file list requests\n"],["literal?","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-literal-3F","()","<p>@return [Boolean] whether the node is a literal value\n"],["literal?","YARD::Parser::Ruby::LiteralNode","YARD/Parser/Ruby/LiteralNode.html#method-i-literal-3F","()",""],["load","YARD::Config","YARD/Config.html#method-c-load","()","<p>Loads settings from {CONFIG_FILE}. This method is called by YARD at load\ntime and should not be called …\n"],["load","YARD::I18n::Locale","YARD/I18n/Locale.html#method-i-load","(locale_directory)","<p>Loads translation messages from <code>locale_directory</code>/{#name}.po.\n<p>@param [String] locale_directory the directory …\n"],["load","YARD::Registry","YARD/Registry.html#method-c-load","(files = [], reparse = false)","<p>Loads the registry and/or parses a list of files\n<p>@example Loads the yardoc file or parses files &#39;a&#39;, …\n"],["load","YARD::RegistryStore","YARD/RegistryStore.html#method-i-load","(file = nil)","<p>@param [String, nil] file the name of the yardoc db to load @return\n[Boolean] whether the database was …\n"],["load!","YARD::Registry","YARD/Registry.html#method-c-load-21","(file = yardoc_file)","<p>Loads a yardoc file and forces all objects cached on disk into memory.\nEquivalent to calling {load_yardoc} …\n"],["load!","YARD::RegistryStore","YARD/RegistryStore.html#method-i-load-21","(file = nil)","<p>Loads the .yardoc file and loads all cached objects into memory\nautomatically.\n<p>@param [String, nil] file …\n"],["load_all","YARD::Registry","YARD/Registry.html#method-c-load_all","()","<p>Forces all objects cached on disk into memory\n<p>@example Loads all objects from disk\n\n<pre>Registry.load\nRegistry.all.count ...</pre>\n"],["load_all","YARD::RegistryStore","YARD/RegistryStore.html#method-i-load_all","()","<p>Loads all cached objects into memory @return [void]\n"],["load_autoload_plugins","YARD::Config","YARD/Config.html#method-c-load_autoload_plugins","()","<p>Load plugins set in :autoload_plugins\n"],["load_cache","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-load_cache","()","<p>Loads {CACHE_FILE} @return [void]\n"],["load_checksums","YARD::RegistryStore","YARD/RegistryStore.html#method-i-load_checksums","()",""],["load_commandline_plugins","YARD::Config","YARD/Config.html#method-c-load_commandline_plugins","()","<p>Load plugins from {#arguments}\n"],["load_commandline_safemode","YARD::Config","YARD/Config.html#method-c-load_commandline_safemode","()","<p>Check for command-line safe_mode switch in {#arguments}\n"],["load_gem_data","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-load_gem_data","(gemfile)",""],["load_gem_plugins","YARD::Config","YARD/Config.html#method-c-load_gem_plugins","()","<p>Load gem plugins if :load_plugins is true\n"],["load_gems_in","Gem::SourceIndex","Gem/SourceIndex.html#method-i-load_gems_in","(*spec_dirs)","<p>Reconstruct the source index from the specifications in\n<code>spec_dirs</code>.\n"],["load_git_commit","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-load_git_commit","(commit)",""],["load_handlers","YARD::Handlers::Processor","YARD/Handlers/Processor.html#method-i-load_handlers","()","<p>Loads handlers from {#handler_base_namespace}. This ensures that Ruby1.9\nhandlers are never loaded into …\n"],["load_locale","YARD::RegistryStore","YARD/RegistryStore.html#method-i-load_locale","(name)",""],["load_markup_provider","YARD::Templates::Helpers::MarkupHelper","YARD/Templates/Helpers/MarkupHelper.html#method-i-load_markup_provider","(type = options.markup)","<p>Attempts to load the first valid markup provider in {MARKUP_PROVIDERS}. If\na provider is specified, immediately …\n"],["load_object_types","YARD::RegistryStore","YARD/RegistryStore.html#method-i-load_object_types","()",""],["load_plugin","YARD::Config","YARD/Config.html#method-c-load_plugin","(name)","<p>Loads an individual plugin by name. It is not necessary to include the\n<code>yard-</code> plugin prefix here.\n<p>@param …\n"],["load_plugin_failed","YARD::Config","YARD/Config.html#method-c-load_plugin_failed","(name, exception)","<p>Print a warning if the plugin failed to load @return [false]\n"],["load_plugins","YARD","YARD.html#method-c-load_plugins","()","<p>(see YARD::Config.load_plugins) @deprecated Use {Config.load_plugins}\n"],["load_plugins","YARD::Config","YARD/Config.html#method-c-load_plugins","()","<p>Loads gems that match the name &#39;yard-*&#39; (recommended) or\n&#39;yard_*&#39; except those listed …\n"],["load_proxy_types","YARD::RegistryStore","YARD/RegistryStore.html#method-i-load_proxy_types","()","<p>@deprecated The registry no longer tracks proxy types\n"],["load_root","YARD::RegistryStore","YARD/RegistryStore.html#method-i-load_root","()",""],["load_script","YARD::CLI::Command","YARD/CLI/Command.html#method-i-load_script","(file)","<p>Loads a Ruby script. If <code>Config.options[:safe_mode]</code> is enabled,\nthis method will do nothing.\n<p>@param [String] …\n"],["load_scripts","YARD::CLI::Server","YARD/CLI/Server.html#method-i-load_scripts","()",""],["load_setup_rb","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-load_setup_rb","()",""],["load_source_path","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-load_source_path","()",""],["load_specification","Gem::SourceIndex","Gem/SourceIndex.html#method-c-load_specification","(file_name)","<p>Loads a ruby-format specification from <code>file_name</code> and returns\nthe loaded spec.\n"],["load_template_paths","YARD::CLI::Server","YARD/CLI/Server.html#method-i-load_template_paths","()",""],["load_yardoc","Gem::DocManager","Gem/DocManager.html#method-c-load_yardoc","()",""],["load_yardoc","YARD::Registry","YARD/Registry.html#method-c-load_yardoc","(file = yardoc_file)","<p>Loads a yardoc file directly\n<p>@param [String] file the yardoc file to load. @return [Registry] the\nregistry …\n"],["load_yardoc","YARD::RegistryStore","YARD/RegistryStore.html#method-i-load_yardoc","()",""],["load_yardoc","YARD::Server::Commands::LibraryCommand","YARD/Server/Commands/LibraryCommand.html#method-i-load_yardoc","()",""],["load_yardoc_from_disk","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-load_yardoc_from_disk","()","<p>Called when a library of source type “disk” is to be prepared. In this\ncase, the {#yardoc_file} …\n"],["load_yardoc_from_gem","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-load_yardoc_from_gem","()","<p>Called when a library of source type “gem” is to be prepared. In this case,\nthe {#yardoc_file} …\n"],["load_yardoc_old","YARD::RegistryStore","YARD/RegistryStore.html#method-i-load_yardoc_old","()",""],["local_yardoc_file","YARD::Registry","YARD/Registry.html#method-c-local_yardoc_file","(spec, for_writing = false)",""],["locale","YARD::Registry","YARD/Registry.html#method-c-locale","(name)","<p>@param [String] name the locale name. @return [I18n::Locale] the locale\nobject for <code>name</code>. @since 0.8.3 …\n"],["locale","YARD::RegistryStore","YARD/RegistryStore.html#method-i-locale","(name)","<p>@param [String] name the locale name. @return [I18n::Locale] the locale\nobject for <code>name</code>. @since 0.8.3 …\n"],["locale=","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-locale-3D","(locale)","<p>@param [String] locale the locale name to be translated. @return [void]\n@since 0.8.3\n"],["log","Object","Object.html#method-i-log","()","<p>The global {YARD::Logger} instance\n<p>@return [YARD::Logger] the global {YARD::Logger} instance @see YARD::Logger\n…\n"],["loop?","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-loop-3F","()","<p>@return [Boolean] whether the node is a loop\n"],["loop?","YARD::Parser::Ruby::LoopNode","YARD/Parser/Ruby/LoopNode.html#method-i-loop-3F","()",""],["markup_class","YARD::Templates::Helpers::MarkupHelper","YARD/Templates/Helpers/MarkupHelper.html#method-i-markup_class","(type = options.markup)","<p>Gets the markup provider class/module constant for a markup type Call\n{#load_markup_provider} before …\n"],["markup_file_contents","YARD::Templates::Helpers::MarkupHelper","YARD/Templates/Helpers/MarkupHelper.html#method-i-markup_file_contents","(contents)","<p>Strips any shebang lines on the file contents that pertain to markup or\npreprocessing data.\n<p>@deprecated …\n"],["markup_for_file","YARD::Templates::Helpers::MarkupHelper","YARD/Templates/Helpers/MarkupHelper.html#method-i-markup_for_file","(contents, filename)","<p>Checks for a shebang or looks at the file extension to determine the markup\ntype for the file contents. …\n"],["markup_provider","YARD::Templates::Helpers::MarkupHelper","YARD/Templates/Helpers/MarkupHelper.html#method-i-markup_provider","(type = options.markup)","<p>Gets the markup provider name for a markup type Call\n{#load_markup_provider} before using this method. …\n"],["matches?","YARD::Handlers::Ruby::HandlesExtension","YARD/Handlers/Ruby/HandlesExtension.html#method-i-matches-3F","(node)","<p>Tests if the node matches the handler @param [Parser::Ruby::AstNode] node a\nRuby node @return [Boolean] …\n"],["matches?","YARD::Handlers::Ruby::MethodCallWrapper","YARD/Handlers/Ruby/MethodCallWrapper.html#method-i-matches-3F","(node)",""],["matches?","YARD::Handlers::Ruby::TestNodeWrapper","YARD/Handlers/Ruby/TestNodeWrapper.html#method-i-matches-3F","(node)",""],["matches_file?","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-matches_file-3F","(filename)","<p>@return [Boolean] whether the filename matches the declared file\n\n<pre>match for a handler. If no file match ...</pre>\n"],["member_tag_for_member","YARD::Handlers::Ruby::StructHandlerMethods","YARD/Handlers/Ruby/StructHandlerMethods.html#method-i-member_tag_for_member","(klass, member, type = :read)","<p>Extracts the user&#39;s defined @member tag for a given class and its\nmember. Returns nil if the user …\n"],["members_from_tags","YARD::Handlers::Ruby::StructHandlerMethods","YARD/Handlers/Ruby/StructHandlerMethods.html#method-i-members_from_tags","(klass)","<p>Retrieves all members defined in @attr* tags\n<p>@param [ClassObject] klass the class with the attributes …\n"],["merge","SymbolHash","SymbolHash.html#method-i-merge","(hash)","<p>Merges the contents of another hash into a new SymbolHash object\n<p>@param [Hash] hash the hash of objects …\n"],["merge","YARD::Options","YARD/Options.html#method-i-merge","(opts)","<p>Creates a new options object and sets options hash or object value onto\nthat object.\n<p>@param [Options, …\n"],["merge!","SymbolHash","SymbolHash.html#method-i-merge-21","(hash)",""],["meta_type","YARD::Handlers::Ruby::Base","YARD/Handlers/Ruby/Base.html#method-c-meta_type","(type)","<p>Matcher for handling a node with a specific meta-type. An {AstNode} has a\n{AstNode#type} to define its …\n"],["method_call","YARD::Handlers::Ruby::Base","YARD/Handlers/Ruby/Base.html#method-c-method_call","(name = nil)","<p>Matcher for handling any type of method call. Method calls can be expressed\nby many {AstNode} types depending …\n"],["method_for","YARD::Templates::ErbCache","YARD/Templates/ErbCache.html#method-c-method_for","(filename, &block)",""],["method_missing","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-method_missing","(meth, *args, &block)","<p>@overload dynamic_attr_name\n\n<pre>@return the value of attribute named by the method attribute name\n@raise [NoMethodError] ...</pre>\n"],["method_missing","YARD::CodeObjects::ExtendedMethodObject","YARD/CodeObjects/ExtendedMethodObject.html#method-i-method_missing","(sym, *args, &block)","<p>Sends all methods to the {MethodObject} assigned in {#initialize} @see\n#initialize @see MethodObject …\n"],["method_missing","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-method_missing","(meth, *args, &block)","<p>Dispatches the method to the resolved object.\n<p>@raise [ProxyMethodError] if the proxy cannot find the real …\n"],["method_missing","YARD::Options","YARD/Options.html#method-i-method_missing","(meth, *args, &block)","<p>Handles setting and accessing of unregistered keys similar to an OpenStruct\nobject.\n<p>@note It is not recommended …\n"],["method_missing","YARD::StubProxy","YARD/StubProxy.html#method-i-method_missing","(meth, *args, &block)",""],["method_missing","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-method_missing","(*args, &block)",""],["method_missing","YARD::Verifier","YARD/Verifier.html#method-i-method_missing","(sym, *args, &block)","<p>Passes any method calls to the object from the {#call}\n"],["method_name","YARD::Handlers::Ruby::DSLHandlerMethods","YARD/Handlers/Ruby/DSLHandlerMethods.html#method-i-method_name","()",""],["method_name","YARD::Parser::Ruby::MethodCallNode","YARD/Parser/Ruby/MethodCallNode.html#method-i-method_name","(name_only = false)",""],["method_name","YARD::Parser::Ruby::MethodDefinitionNode","YARD/Parser/Ruby/MethodDefinitionNode.html#method-i-method_name","(name_only = false)",""],["method_name","YARD::Tags::AttributeDirective","YARD/Tags/AttributeDirective.html#method-i-method_name","()",""],["method_name","YARD::Tags::MethodDirective","YARD/Tags/MethodDirective.html#method-i-method_name","()",""],["method_signature","YARD::Handlers::Ruby::DSLHandlerMethods","YARD/Handlers/Ruby/DSLHandlerMethods.html#method-i-method_signature","()",""],["method_signature","YARD::Handlers::Ruby::MethodHandler","YARD/Handlers/Ruby/MethodHandler.html#method-i-method_signature","()",""],["method_signature","YARD::Tags::AttributeDirective","YARD/Tags/AttributeDirective.html#method-i-method_signature","()",""],["method_signature","YARD::Tags::MethodDirective","YARD/Tags/MethodDirective.html#method-i-method_signature","()",""],["meths","YARD::CodeObjects::ClassObject","YARD/CodeObjects/ClassObject.html#method-i-meths","(opts = {})","<p>Returns the list of methods matching the options hash. Returns all methods\nif hash is empty.\n<p>@param [Hash] …\n"],["meths","YARD::CodeObjects::NamespaceObject","YARD/CodeObjects/NamespaceObject.html#method-i-meths","(opts = {})","<p>Returns all methods that match the attributes specified by\n<code>opts</code>. If no options are provided, returns …\n"],["mixins","YARD::CodeObjects::NamespaceObject","YARD/CodeObjects/NamespaceObject.html#method-i-mixins","(*scopes)","<p>Returns for specific scopes. If no scopes are provided, returns all mixins.\n@param [Array&lt;Symbol&gt;] …\n"],["modified_objects","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-modified_objects","(registry1, registry2)",""],["modify_item","YARD::CLI::Config","YARD/CLI/Config.html#method-i-modify_item","()",""],["modify_nilclass","YARD::Verifier","YARD/Verifier.html#method-i-modify_nilclass","()","<p>Modifies nil to not throw NoMethodErrors. This allows syntax like\nobject.tag(:return).text to work if …\n"],["module_function?","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-module_function-3F","()","<p>@return [Boolean] whether or not this method was created as a module\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">function</span>\n</pre>\n<p>@since 0.8.0\n"],["module_name","YARD::Parser::Ruby::ModuleNode","YARD/Parser/Ruby/ModuleNode.html#method-i-module_name","()",""],["name","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-name","(prefix = false)","<p>The name of the object @param [Boolean] prefix whether to show a prefix.\nImplement\n\n<pre>this in a subclass ...</pre>\n"],["name","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-name","(prefix = false)","<p>Returns the name of the object.\n<p>@example The name of an instance method (with prefix)\n\n<pre>an_instance_method.name(true) ...</pre>\n"],["name","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-name","(prefix = false)","<p>(see Base#name)\n"],["name","YARD::Parser::Ruby::Legacy::RubyToken::TkOp","YARD/Parser/Ruby/Legacy/RubyToken/TkOp.html#method-i-name","()",""],["name","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-name","(prefix = false)",""],["named_params","YARD::Parser::Ruby::ParameterNode","YARD/Parser/Ruby/ParameterNode.html#method-i-named_params","()",""],["namespace","YARD::DocstringParser","YARD/DocstringParser.html#method-i-namespace","()",""],["namespace","YARD::Parser::Ruby::MethodCallNode","YARD/Parser/Ruby/MethodCallNode.html#method-i-namespace","()",""],["namespace","YARD::Parser::Ruby::MethodDefinitionNode","YARD/Parser/Ruby/MethodDefinitionNode.html#method-i-namespace","()",""],["namespace","YARD::Parser::Ruby::ReferenceNode","YARD/Parser/Ruby/ReferenceNode.html#method-i-namespace","()",""],["namespace=","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-namespace-3D","(obj)","<p>Sets the namespace the object is defined in.\n<p>@param [NamespaceObject, :root, nil] obj the new namespace …\n"],["namespace=","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-namespace-3D","(v)",""],["namespace_for_variable","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-namespace_for_variable","(var)",""],["namespace_name","Module","Module.html#method-i-namespace_name","()","<p>Returns the module namespace path minus the class/module name\n<p>@example\n\n<pre>module A::B::C; namespace_name end ...</pre>\n"],["namespace_only","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-namespace_only","()","<p>Declares that the handler should only be called when inside a\n{CodeObjects::NamespaceObject}, not a method …\n"],["namespace_only?","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-namespace_only-3F","()","<p>@return [Boolean] whether the handler should only be processed inside\n\n<pre>a namespace.</pre>\n"],["namespaces","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-namespaces","()",""],["new","Gem::SourceIndex","Gem/SourceIndex.html#method-c-new","(specifications={})","<p>Constructs a source index instance from the provided specifications, which\nis a Hash of gem full names …\n"],["new","Insertion","Insertion.html#method-c-new","(list, value)","<p>Creates an insertion object on a list with a value to be inserted. To\nfinalize the insertion, call {#before} …\n"],["new","SymbolHash","SymbolHash.html#method-c-new","(symbolize_value = true)","<p>Creates a new SymbolHash object\n<p>@param [Boolean] symbolize_value converts any String values into Symbols …\n"],["new","YARD::CLI::CommandParser","YARD/CLI/CommandParser.html#method-c-new","()",""],["new","YARD::CLI::Config","YARD/CLI/Config.html#method-c-new","()",""],["new","YARD::CLI::Diff","YARD/CLI/Diff.html#method-c-new","()",""],["new","YARD::CLI::Display","YARD/CLI/Display.html#method-c-new","(*args)",""],["new","YARD::CLI::Gems","YARD/CLI/Gems.html#method-c-new","()",""],["new","YARD::CLI::Graph","YARD/CLI/Graph.html#method-c-new","()","<p>Creates a new instance of the command-line utility\n"],["new","YARD::CLI::I18n","YARD/CLI/I18n.html#method-c-new","()",""],["new","YARD::CLI::Server","YARD/CLI/Server.html#method-c-new","()","<p>Creates a new instance of the Server command line utility\n"],["new","YARD::CLI::Stats","YARD/CLI/Stats.html#method-c-new","(parse = true)","<p>@param [Boolean] parse whether to parse and load registry (see {#parse})\n"],["new","YARD::CLI::YRI","YARD/CLI/YRI.html#method-c-new","()",""],["new","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-c-new","()","<p>Creates a new instance of the commandline utility\n"],["new","YARD::CLI::YardoptsCommand","YARD/CLI/YardoptsCommand.html#method-c-new","()","<p>Creates a new command that reads .yardopts\n"],["new","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-c-new","(namespace, name, *args, &block)","<p>Allocates a new code object @return [Base] @see #initialize\n"],["new","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-c-new","(namespace, name, *args, &block)","<p>Creates a new code object\n<p>@example Create a method in the root namespace\n\n<pre>CodeObjects::Base.new(:root, &#39;#method&#39;) ...</pre>\n"],["new","YARD::CodeObjects::ClassObject","YARD/CodeObjects/ClassObject.html#method-c-new","(namespace, name, *args, &block)","<p>Creates a new class object in <code>namespace</code> with <code>name</code>\n<p>@see Base.new\n"],["new","YARD::CodeObjects::CodeObjectList","YARD/CodeObjects/CodeObjectList.html#method-c-new","(owner = Registry.root)","<p>Creates a new object list associated with a namespace\n<p>@param [NamespaceObject] owner the namespace the …\n"],["new","YARD::CodeObjects::ExtendedMethodObject","YARD/CodeObjects/ExtendedMethodObject.html#method-c-new","(obj)","<p>Sets up a delegate for {MethodObject} obj.\n<p>@param [MethodObject] obj the instance method to treat as a …\n"],["new","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-c-new","(filename, contents = nil)","<p>Creates a new extra file object. @param [String] filename the location on\ndisk of the file @param [String] …\n"],["new","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-c-new","(namespace, name, scope = :instance, &block)","<p>Creates a new method object in <code>namespace</code> with\n<code>name</code> and an instance or class <code>scope</code>\n<p>If scope is <code>:module</code> …\n"],["new","YARD::CodeObjects::NamespaceObject","YARD/CodeObjects/NamespaceObject.html#method-c-new","(namespace, name, *args, &block)","<p>Creates a new namespace object inside <code>namespace</code> with\n<code>name</code>. @see Base#initialize\n"],["new","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-c-new","(namespace, name, type = nil)","<p>Creates a new Proxy\n<p>@raise [ArgumentError] if namespace is not a NamespaceObject @return\n[Proxy] self …\n"],["new","YARD::Docstring","YARD/Docstring.html#method-c-new","(content = '', object = nil)","<p>Creates a new docstring with the raw contents attached to an optional\nobject. Parsing will be done by …\n"],["new","YARD::DocstringParser","YARD/DocstringParser.html#method-c-new","(library = Tags::Library.instance)","<p>Creates a new parser to parse docstring data\n<p>@param [Tags::Library] library a tag library for recognizing …\n"],["new","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-new","(source_parser, stmt)",""],["new","YARD::Handlers::NamespaceMissingError","YARD/Handlers/NamespaceMissingError.html#method-c-new","(object)",""],["new","YARD::Handlers::Processor","YARD/Handlers/Processor.html#method-c-new","(parser)","<p>Creates a new Processor for a <code>file</code>. @param [SourceParser]\nparser the parser used to initialize the processor …\n"],["new","YARD::Handlers::Ruby::HandlesExtension","YARD/Handlers/Ruby/HandlesExtension.html#method-c-new","(name)","<p>Creates a new extension with a specific matcher value <code>name</code>\n@param [Object] name the matcher value to …\n"],["new","YARD::I18n::Locale","YARD/I18n/Locale.html#method-c-new","(name)","<p>Creates a locale for <code>name</code> locale.\n<p>@param [String] name the locale name.\n"],["new","YARD::I18n::Message","YARD/I18n/Message.html#method-c-new","(id)","<p>Creates a trasnlate target message for message ID <code>id</code>.\n<p>@param [String] id the message ID of the translate …\n"],["new","YARD::I18n::Messages","YARD/I18n/Messages.html#method-c-new","()","<p>Creates a new container.\n"],["new","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-c-new","(relative_base_path)","<p>Creates a POT generator that uses <code>relative_base_path</code> to\ngenerate locations for a msgid. <code>relative_base_path</code> …\n"],["new","YARD::I18n::Text","YARD/I18n/Text.html#method-c-new","(input, options={})","<p>Creates a text object that has translation related features for the input\ntext.\n<p>@param [#each_line] input …\n"],["new","YARD::Logger","YARD/Logger.html#method-c-new","(pipe, *args)","<p>Creates a new logger\n"],["new","YARD::Parser::Base","YARD/Parser/Base.html#method-c-new","(source, filename)","<p>This default constructor does nothing. The subclass is responsible for\nstoring the source contents and …\n"],["new","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-c-new","(source, file = '(stdin)')",""],["new","YARD::Parser::C::Comment","YARD/Parser/C/Comment.html#method-c-new","(source, file = nil, line = nil)",""],["new","YARD::Parser::C::Statement","YARD/Parser/C/Statement.html#method-c-new","(source, file = nil, line = nil)",""],["new","YARD::Parser::OrderedParser","YARD/Parser/OrderedParser.html#method-c-new","(global_state, files)","<p>Creates a new OrderedParser with the global state and a list of files to\nparse.\n<p>@note OrderedParser sets …\n"],["new","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-c-new","(type, arr, opts = {})","<p>Creates a new AST node\n<p>@param [Symbol] type the type of node being created @param\n[Array&lt;AstNode&gt;] …\n"],["new","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-c-new","(content)",""],["new","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","YARD/Parser/Ruby/Legacy/RubyLex/BufferedReader.html#method-c-new","(content)",""],["new","YARD::Parser::Ruby::Legacy::RubyParser","YARD/Parser/Ruby/Legacy/RubyParser.html#method-c-new","(source, filename)",""],["new","YARD::Parser::Ruby::Legacy::RubyToken::TkId","YARD/Parser/Ruby/Legacy/RubyToken/TkId.html#method-c-new","(line_no, char_no, name)",""],["new","YARD::Parser::Ruby::Legacy::RubyToken::TkOPASGN","YARD/Parser/Ruby/Legacy/RubyToken/TkOPASGN.html#method-c-new","(line_no, char_no, op)",""],["new","YARD::Parser::Ruby::Legacy::RubyToken::TkUnknownChar","YARD/Parser/Ruby/Legacy/RubyToken/TkUnknownChar.html#method-c-new","(line_no, char_no, id)",""],["new","YARD::Parser::Ruby::Legacy::RubyToken::TkVal","YARD/Parser/Ruby/Legacy/RubyToken/TkVal.html#method-c-new","(line_no, char_no, value = nil)",""],["new","YARD::Parser::Ruby::Legacy::RubyToken::Token","YARD/Parser/Ruby/Legacy/RubyToken/Token.html#method-c-new","(line_no, char_no)","<p>Creates a new Token object @param [Integer] line_no the line number to\ninitialize the token to @param …\n"],["new","YARD::Parser::Ruby::Legacy::Statement","YARD/Parser/Ruby/Legacy/Statement.html#method-c-new","(tokens, block = nil, comments = nil)",""],["new","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-c-new","(content)","<p>Creates a new statement list\n<p>@param [TokenList, String] content the tokens to create the list from\n"],["new","YARD::Parser::Ruby::Legacy::TokenList","YARD/Parser/Ruby/Legacy/TokenList.html#method-c-new","(content = nil)",""],["new","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-c-new","(source, filename, *args)",""],["new","YARD::Parser::Ruby::RubyParser","YARD/Parser/Ruby/RubyParser.html#method-c-new","(source, filename)",""],["new","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-new","(parser_type = SourceParser.parser_type, globals1 = nil, globals2 = nil)","<p>@overload initialize(parser_type = SourceParser.parser_type, globals = nil)\n\n<pre>Creates a new parser object ...</pre>\n"],["new","YARD::Rake::YardocTask","YARD/Rake/YardocTask.html#method-c-new","(name = :yard)","<p>Creates a new task with name <code>name</code>.\n<p>@param [String, Symbol] name the name of the rake task @yield a block …\n"],["new","YARD::RegistryStore","YARD/RegistryStore.html#method-c-new","()",""],["new","YARD::Serializers::Base","YARD/Serializers/Base.html#method-c-new","(opts = {})","<p>Creates a new serializer with options\n<p>@param [Hash] opts the options to assign to {#options}\n"],["new","YARD::Serializers::FileSystemSerializer","YARD/Serializers/FileSystemSerializer.html#method-c-new","(opts = {})","<p>Creates a new FileSystemSerializer with options\n<p>@option opts [String] :basepath (&#39;doc&#39;) the base …\n"],["new","YARD::Serializers::ProcessSerializer","YARD/Serializers/ProcessSerializer.html#method-c-new","(cmd)","<p>Creates a new ProcessSerializer for the shell command <code>cmd</code>\n<p>@param [String] cmd the command that will accept …\n"],["new","YARD::Serializers::StdoutSerializer","YARD/Serializers/StdoutSerializer.html#method-c-new","(wrap = nil)","<p>Creates a serializer to print text to stdout\n<p>@param [Fixnum, nil] wrap if wrap is a number, wraps text …\n"],["new","YARD::Serializers::YardocSerializer","YARD/Serializers/YardocSerializer.html#method-c-new","(yfile)",""],["new","YARD::Server::Adapter","YARD/Server/Adapter.html#method-c-new","(libs, opts = {}, server_opts = {})","<p>Creates a new adapter object\n<p>@param [Hash{String=&gt;Array&lt;LibraryVersion&gt;}] libs a list of\nlibraries, …\n"],["new","YARD::Server::Commands::Base","YARD/Server/Commands/Base.html#method-c-new","(opts = {})","<p>Creates a new command object, setting attributes named by keys in the\noptions hash. After initialization, …\n"],["new","YARD::Server::Commands::LibraryCommand","YARD/Server/Commands/LibraryCommand.html#method-c-new","(opts = {})",""],["new","YARD::Server::DocServerSerializer","YARD/Server/DocServerSerializer.html#method-c-new","(command = nil)",""],["new","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-c-new","(name, version = nil, yardoc = nil, source = :disk)","<p>@param [String] name the name of the library @param [String] version the\nspecific (usually, but not always, …\n"],["new","YARD::Server::RackMiddleware","YARD/Server/RackMiddleware.html#method-c-new","(app, opts = {})","<p>Creates a new Rack-based middleware for serving YARD documentation.\n<p>@param app the next Rack middleware …\n"],["new","YARD::Server::Router","YARD/Server/Router.html#method-c-new","(adapter)","<p>Creates a new router for a specific adapter\n<p>@param [Adapter] adapter the adapter to route requests to …\n"],["new","YARD::Server::WebrickServlet","YARD/Server/WebrickServlet.html#method-c-new","(server, adapter)",""],["new","YARD::StubProxy","YARD/StubProxy.html#method-c-new","(path, transient = false)",""],["new","YARD::Tags::DefaultTag","YARD/Tags/DefaultTag.html#method-c-new","(tag_name, text, types = nil, name = nil, defaults = nil)",""],["new","YARD::Tags::Directive","YARD/Tags/Directive.html#method-c-new","(tag, parser)","<p>@param [Tag] tag the meta-data tag containing all input to the docstring\n@param [DocstringParser] parser …\n"],["new","YARD::Tags::Library","YARD/Tags/Library.html#method-c-new","(factory = Library.default_factory)",""],["new","YARD::Tags::OptionTag","YARD/Tags/OptionTag.html#method-c-new","(tag_name, name, pair)",""],["new","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-c-new","(tag_name, text)",""],["new","YARD::Tags::RefTagList","YARD/Tags/RefTagList.html#method-c-new","(tag_name, owner, name = nil)",""],["new","YARD::Tags::Tag","YARD/Tags/Tag.html#method-c-new","(tag_name, text, types = nil, name = nil)","<p>Creates a new tag object with a tag name and text. Optionally, formally\ndeclared types and a key name …\n"],["new","YARD::Templates::Helpers::Markup::RDocMarkdown","YARD/Templates/Helpers/Markup/RDocMarkdown.html#method-c-new","(text)",""],["new","YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkup","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkup.html#method-c-new","(text)",""],["new","YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkupToHtml","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkupToHtml.html#method-c-new","()",""],["new","YARD::Templates::Section","YARD/Templates/Section.html#method-c-new","(name, *args)",""],["new","YARD::Templates::Template","YARD/Templates/Template.html#method-c-new","(opts = TemplateOptions.new)",""],["new","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-new","(*args)","<p>Creates a new template object to be rendered with {Template#run}\n"],["new","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-c-new","(path, full_paths)",""],["new","YARD::Verifier","YARD/Verifier.html#method-c-new","(*expressions)","<p>Creates a verifier from a set of expressions\n<p>@param [Array&lt;String&gt;] expressions a list of Ruby expressions …\n"],["new!","YARD::Docstring","YARD/Docstring.html#method-c-new-21","(text, tags = [], object = nil, raw_data = nil, ref_object = nil)","<p>Creates a new docstring without performing any parsing through a\n{DocstringParser}. This method is called …\n"],["new?","YARD::Tags::MacroDirective","YARD/Tags/MacroDirective.html#method-i-new-3F","()",""],["next_statement","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-next_statement","()","<p>Returns the next statement in the token stream\n<p>@return [Statement] the next statement\n"],["nextchar","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-nextchar","(num = 1)",""],["nextline","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-nextline","()",""],["no_highlight=","YARD::Templates::TemplateOptions","YARD/Templates/TemplateOptions.html#method-i-no_highlight-3D","(value)",""],["node_class_for","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-c-node_class_for","(type)","<p>Finds the node subclass that should be instantiated for a specific node\ntype\n<p>@param [Symbol] type the …\n"],["not_found","YARD::Server::Commands::Base","YARD/Server/Commands/Base.html#method-i-not_found","()","<p>Sets the body and headers (but not status) for a 404 response. Does nothing\nif the body is already set. …\n"],["not_found","YARD::Server::Commands::DisplayObjectCommand","YARD/Server/Commands/DisplayObjectCommand.html#method-i-not_found","()",""],["not_prepared","YARD::Server::Commands::LibraryCommand","YARD/Server/Commands/LibraryCommand.html#method-i-not_prepared","()",""],["object","YARD::Tags::Directive","YARD/Tags/Directive.html#method-i-object","()","<p>@!attribute [r] object @return [CodeObjects::Base, nil] the object the\nparent docstring is\n\n<pre>attached to. ...</pre>\n"],["object=","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-object-3D","(value)",""],["object_path","YARD::Server::Commands::DisplayObjectCommand","YARD/Server/Commands/DisplayObjectCommand.html#method-i-object_path","()",""],["object_types_path","YARD::RegistryStore","YARD/RegistryStore.html#method-i-object_types_path","()",""],["object_types_path","YARD::Serializers::YardocSerializer","YARD/Serializers/YardocSerializer.html#method-i-object_types_path","()",""],["objects_path","YARD::RegistryStore","YARD/RegistryStore.html#method-i-objects_path","()",""],["objects_path","YARD::Serializers::YardocSerializer","YARD/Serializers/YardocSerializer.html#method-i-objects_path","()",""],["old_initialize","Gem::SourceIndex","Gem/SourceIndex.html#method-i-old_initialize","(specifications={})","<p>Undef old methods\n"],["on_aref","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_aref","(*args)",""],["on_aref_field","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_aref_field","(*args)",""],["on_array","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_array","(other)",""],["on_assoc_new","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_assoc_new","(*args)",""],["on_assoclist_from_args","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_assoclist_from_args","(*args)",""],["on_bare_assoc_hash","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_bare_assoc_hash","(*args)",""],["on_body_stmt","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_body_stmt","(*args)",""],["on_bodystmt","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_bodystmt","(*args)",""],["on_comment","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_comment","(comment)",""],["on_const_path_ref","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_const_path_ref","(*args)",""],["on_embdoc","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_embdoc","(text)",""],["on_embdoc_beg","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_embdoc_beg","(text)",""],["on_embdoc_end","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_embdoc_end","(text)",""],["on_hash","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_hash","(*args)",""],["on_label","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_label","(data)",""],["on_lambda","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_lambda","(*args)",""],["on_lbracket","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_lbracket","(tok)",""],["on_params","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_params","(*args)",""],["on_parse_error","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_parse_error","(msg)",""],["on_program","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_program","(*args)",""],["on_qwords_add","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_qwords_add","(list, item)",""],["on_qwords_new","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_qwords_new","(*args)",""],["on_rbracket","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_rbracket","(tok)",""],["on_rescue","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_rescue","(exc, *args)",""],["on_string_content","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_string_content","(*args)",""],["on_string_literal","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_string_literal","(*args)",""],["on_top_const_ref","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_top_const_ref","(*args)",""],["on_unary","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_unary","(op, val)",""],["on_void_stmt","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-on_void_stmt","()",""],["open!","File","File.html#method-c-open-21","(file, *args, &block)","<p>Forces opening a file (for writing) by first creating the file&#39;s\ndirectory @param [String] file the …\n"],["options=","YARD::Templates::Template","YARD/Templates/Template.html#method-i-options-3D","(value)",""],["optparse","YARD::CLI::Config","YARD/CLI/Config.html#method-i-optparse","(*args)",""],["optparse","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-optparse","(*args)",""],["optparse","YARD::CLI::Gems","YARD/CLI/Gems.html#method-i-optparse","(*args)","<p>Parses options\n"],["optparse","YARD::CLI::Graph","YARD/CLI/Graph.html#method-i-optparse","(*args)","<p>Parses commandline options. @param [Array&lt;String&gt;] args each\ntokenized argument\n"],["optparse","YARD::CLI::Server","YARD/CLI/Server.html#method-i-optparse","(*args)",""],["optparse","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-optparse","(*args)","<p>Parses commandline options. @param [Array&lt;String&gt;] args each\ntokenized argument\n"],["optparse","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-optparse","(*args)","<p>Parses commandline options. @param [Array&lt;String&gt;] args each\ntokenized argument\n"],["optparse","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-optparse","(*args)","<p>Parses commandline options. @param [Array&lt;String&gt;] args each\ntokenized argument\n"],["outdated","Gem::SourceIndex","Gem/SourceIndex.html#method-i-outdated","()","<p>Returns an Array of Gem::Specifications that are not up to date.\n"],["output","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-output","(name, data, undoc = nil)","<p>Prints a statistic to standard out. This method is optimized for getting\nInteger values, though it allows …\n"],["output_options","YARD::CLI::Display","YARD/CLI/Display.html#method-i-output_options","(opts)",""],["output_options","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-output_options","(opts)","<p>Adds output options\n"],["overridden_method","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-overridden_method","()","<p>@return [MethodObject] the object that this method overrides @return [nil]\nif it does not override a …\n"],["override_comments","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-override_comments","()",""],["owner=","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-owner-3D","(v)",""],["parameters","YARD::Parser::Ruby::MethodCallNode","YARD/Parser/Ruby/MethodCallNode.html#method-i-parameters","(include_block_param = true)",""],["parameters","YARD::Parser::Ruby::MethodDefinitionNode","YARD/Parser/Ruby/MethodDefinitionNode.html#method-i-parameters","(include_block_param = true)",""],["parent=","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-parent-3D","(obj)",""],["parse","YARD","YARD.html#method-c-parse","(*args)","<p>An alias to {Parser::SourceParser}&#39;s parsing method\n<p>@example Parse a glob of files\n\n<pre>YARD.parse(&#39;lib ...</pre>\n"],["parse","YARD::DocstringParser","YARD/DocstringParser.html#method-i-parse","(content, object = nil, handler = nil)","<p>Parses all content and returns itself.\n<p>@param [String] content the docstring text to parse @param\n[CodeObjects::Base] …\n"],["parse","YARD::I18n::POParser","YARD/I18n/POParser.html#method-i-parse","(file)","<p>Parses PO file.\n<p>@param [String] file path of PO file to be parsed. @return [Hash&lt;String,\nString&gt;] …\n"],["parse","YARD::I18n::Text","YARD/I18n/Text.html#method-i-parse","(&block)",""],["parse","YARD::Parser::Base","YARD/Parser/Base.html#method-i-parse","()","<p>This method should be implemented to parse the source and return itself.\n@abstract @return [Base] this …\n"],["parse","YARD::Parser::Base","YARD/Parser/Base.html#method-c-parse","(source, filename = nil)","<p>Convenience method to create a new parser and {#parse}\n"],["parse","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-parse","()",""],["parse","YARD::Parser::OrderedParser","YARD/Parser/OrderedParser.html#method-i-parse","()","<p>Parses the remainder of the {#files} list.\n<p>@see Processor#parse_remaining_files\n"],["parse","YARD::Parser::Ruby::Legacy::RubyParser","YARD/Parser/Ruby/Legacy/RubyParser.html#method-i-parse","()",""],["parse","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-parse","()",""],["parse","YARD::Parser::Ruby::RubyParser","YARD/Parser/Ruby/RubyParser.html#method-i-parse","()",""],["parse","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-i-parse","(content = __FILE__)","<p>The main parser method. This should not be called directly. Instead, use\nthe class methods {parse} and …\n"],["parse","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-parse","(paths = [\"{lib,app}/**/*.rb\", \"ext/**/*.c\"], excluded = [], level = log.level)","<p>Parses a path or set of paths\n<p>@param [String, Array&lt;String&gt;] paths a path, glob, or list of paths …\n"],["parse_arguments","YARD::CLI::Display","YARD/CLI/Display.html#method-i-parse_arguments","(*args)","<p>Parses commandline options. @param [Array&lt;String&gt;] args each\ntokenized argument\n"],["parse_arguments","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-parse_arguments","(*args)","<p>Parses commandline arguments @param [Array&lt;String&gt;] args the list of\narguments @return [Boolean] …\n"],["parse_arguments","YARD::CLI::YardoptsCommand","YARD/CLI/YardoptsCommand.html#method-i-parse_arguments","(*args)","<p>Parses commandline arguments @param [Array&lt;String&gt;] args the list of\narguments @return [Boolean] …\n"],["parse_block","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-parse_block","(*args)","<p>Parses the semantic “block” contained in the statement node.\n<p>@abstract Subclasses should call …\n"],["parse_block","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-parse_block","(opts = {})","<p>@group Parsing an Inner Block\n"],["parse_block","YARD::Handlers::Ruby::Base","YARD/Handlers/Ruby/Base.html#method-i-parse_block","(inner_node, opts = {})","<p>@group Parsing an Inner Block\n"],["parse_block","YARD::Handlers::Ruby::Legacy::Base","YARD/Handlers/Ruby/Legacy/Base.html#method-i-parse_block","(opts = {})","<p>Parses a statement&#39;s block with a set of state values. If the statement\nhas no block, nothing happens. …\n"],["parse_callseq","YARD::Parser::C::CommentParser","YARD/Parser/C/CommentParser.html#method-i-parse_callseq","(comments)",""],["parse_codeblocks","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-parse_codeblocks","(html)","<p>Parses code blocks out of html and performs syntax highlighting on code\ninside of the blocks.\n<p>@param [String] …\n"],["parse_comments","YARD::Docstring","YARD/Docstring.html#method-i-parse_comments","(comments)","<p>Parses out comments split by newlines into a new code object\n<p>@param [String] comments\n\n<pre>the newline delimited ...</pre>\n"],["parse_comments","YARD::Parser::C::CommentParser","YARD/Parser/C/CommentParser.html#method-i-parse_comments","(comments)",""],["parse_condition","YARD::Handlers::Ruby::ClassConditionHandler","YARD/Handlers/Ruby/ClassConditionHandler.html#method-i-parse_condition","()","<p>Parses the condition part of the if/unless statement\n<p>@return [true, false, nil] true if the condition …\n"],["parse_condition","YARD::Handlers::Ruby::Legacy::ClassConditionHandler","YARD/Handlers/Ruby/Legacy/ClassConditionHandler.html#method-i-parse_condition","()","<p>Parses the condition part of the if/unless statement\n<p>@return [true, false, nil] true if the condition …\n"],["parse_content","YARD::DocstringParser","YARD/DocstringParser.html#method-i-parse_content","(content)","<p>Parses a given block of text.\n<p>@param [String] content the content to parse @note Subclasses can override\n…\n"],["parse_content","YARD::Parser::Ruby::Legacy::TokenList","YARD/Parser/Ruby/Legacy/TokenList.html#method-i-parse_content","(content)",""],["parse_contents","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-parse_contents","(data)","<p>@param [String] data the file contents\n"],["parse_else_block","YARD::Handlers::Ruby::ClassConditionHandler","YARD/Handlers/Ruby/ClassConditionHandler.html#method-i-parse_else_block","()",""],["parse_else_block","YARD::Handlers::Ruby::Legacy::ClassConditionHandler","YARD/Handlers/Ruby/Legacy/ClassConditionHandler.html#method-i-parse_else_block","()","<p>@since 0.5.5\n"],["parse_expression","YARD::Verifier","YARD/Verifier.html#method-i-parse_expression","(expr)","<p>Parses a single expression, handling some of the DSL syntax.\n<p>The syntax “@tag” should be turned …\n"],["parse_files","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-parse_files","(*files)","<p>Parses the file arguments into Ruby files and extra files, which are\nseparated by a &#39;-&#39; element. …\n"],["parse_files","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-parse_files","(files)","<p>Parses {CodeObjects::ExtraFileObject} objects and stores extracted msgids\ninto {#messages}.\n<p>@param [Array&lt;CodeObjects::ExtraFileObject&gt;] …\n"],["parse_in_order","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-parse_in_order","(*files)","<p>Parses a list of files in a queue.\n<p>@param [Array&lt;String&gt;] files a list of files to queue for parsing …\n"],["parse_lang_for_codeblock","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-parse_lang_for_codeblock","(source)","<p>Parses !!!lang out of codeblock, returning the codeblock language followed\nby the source code.\n<p>@param …\n"],["parse_library_from_path","YARD::Server::Router","YARD/Server/Router.html#method-i-parse_library_from_path","(paths)","<p>@return [Array(LibraryVersion, Array&lt;String&gt;)] the library followed\n\n<pre>by the rest of the path components ...</pre>\n"],["parse_objects","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-parse_objects","(objects)","<p>Parses {CodeObjects::Base} objects and stores extracted msgids into\n{#messages}\n<p>@param [Array&lt;CodeObjects::Base&gt;] …\n"],["parse_options","YARD::CLI::Command","YARD/CLI/Command.html#method-i-parse_options","(opts, args)","<p>Parses the option and gracefully handles invalid switches\n<p>@param [OptionParser] opts the option parser …\n"],["parse_overrides","YARD::Parser::C::CommentParser","YARD/Parser/C/CommentParser.html#method-i-parse_overrides","(comments)",""],["parse_rdoc_document_file","YARD::CLI::YardoptsCommand","YARD/CLI/YardoptsCommand.html#method-i-parse_rdoc_document_file","(file = '.document')",""],["parse_remaining_files","YARD::Handlers::Processor","YARD/Handlers/Processor.html#method-i-parse_remaining_files","()","<p>Continue parsing the remainder of the files in the\n<code>globals.ordered_parser</code> object. After the remainder …\n"],["parse_sections","YARD::Templates::Section","YARD/Templates/Section.html#method-i-parse_sections","(args)",""],["parse_signature","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-parse_signature","()",""],["parse_statements","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-parse_statements","()",""],["parse_string","YARD","YARD.html#method-c-parse_string","(*args)","<p>An alias to {Parser::SourceParser}&#39;s parsing method\n<p>@example Parse a string of input\n\n<pre>YARD.parse_string(&#39;class ...</pre>\n"],["parse_string","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-parse_string","(content, ptype = parser_type)","<p>Parses a string <code>content</code>\n<p>@param [String] content the block of code to parse @param [Symbol] ptype\nthe parser …\n"],["parse_struct_subclass","YARD::Handlers::Ruby::Legacy::ClassHandler","YARD/Handlers/Ruby/Legacy/ClassHandler.html#method-i-parse_struct_subclass","(klass, superclass_def)",""],["parse_struct_superclass","YARD::Handlers::Ruby::ClassHandler","YARD/Handlers/Ruby/ClassHandler.html#method-i-parse_struct_superclass","(klass, superclass)",""],["parse_superclass","YARD::Handlers::Ruby::ClassHandler","YARD/Handlers/Ruby/ClassHandler.html#method-i-parse_superclass","(superclass)",""],["parse_superclass","YARD::Handlers::Ruby::Legacy::ClassHandler","YARD/Handlers/Ruby/Legacy/ClassHandler.html#method-i-parse_superclass","(superclass)",""],["parse_tag","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-parse_tag","(tag_name, text)","<p>Parses tag text and creates a new tag with descriptive text\n<p>@param tag_name        the name of the tag …\n"],["parse_tag","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-parse_tag","(text)",""],["parse_tag_with_name","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-parse_tag_with_name","(tag_name, text)","<p>Parses tag text and creates a new tag with a key name and descriptive text\n<p>@param tag_name        the …\n"],["parse_tag_with_options","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-parse_tag_with_options","(tag_name, text)",""],["parse_tag_with_title_and_text","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-parse_tag_with_title_and_text","(tag_name, text)",""],["parse_tag_with_types","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-parse_tag_with_types","(tag_name, text)","<p>Parses tag text and creates a new tag with formally declared types and\ndescriptive text\n<p>@param tag_name …\n"],["parse_tag_with_types_and_name","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-parse_tag_with_types_and_name","(tag_name, text)","<p>Parses tag text and creates a new tag with formally declared types, a key\nname and descriptive text\n<p>@param …\n"],["parse_tag_with_types_and_title","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-parse_tag_with_types_and_title","(tag_name, text)","<p>Parses tag text and creates a new tag with formally declared types, a title\non the first line and descriptive …\n"],["parse_tag_with_types_name_and_default","YARD::Tags::DefaultFactory","YARD/Tags/DefaultFactory.html#method-i-parse_tag_with_types_name_and_default","(tag_name, text)",""],["parse_then_block","YARD::Handlers::Ruby::ClassConditionHandler","YARD/Handlers/Ruby/ClassConditionHandler.html#method-i-parse_then_block","()",""],["parse_then_block","YARD::Handlers::Ruby::Legacy::ClassConditionHandler","YARD/Handlers/Ruby/Legacy/ClassConditionHandler.html#method-i-parse_then_block","()","<p>@since 0.5.5\n"],["parse_toplevel","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-parse_toplevel","()",""],["parse_types","YARD::Parser::C::CommentParser","YARD/Parser/C/CommentParser.html#method-i-parse_types","(types)",""],["parse_yardopts","YARD::CLI::YardoptsCommand","YARD/CLI/YardoptsCommand.html#method-i-parse_yardopts","(file = options_file)",""],["parse_yardopts_options","YARD::CLI::YardoptsCommand","YARD/CLI/YardoptsCommand.html#method-i-parse_yardopts_options","(*args)","<p>Parses out the yardopts/document options\n"],["parser","YARD::Docstring","YARD/Docstring.html#method-c-parser","(*args)","<p>Creates a parser object using the current {default_parser}. Equivalent to:\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Docstring</span>.<span class=\"ruby-identifier\">default_parser</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-operator\">*</span><span class=\"ruby-identifier\">args</span>)\n</pre>\n"],["parser_class","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-i-parser_class","()","<p>@since 0.5.6\n"],["parser_type=","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-i-parser_type-3D","(value)",""],["parser_type=","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-parser_type-3D","(value)",""],["parser_type_extensions=","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-parser_type_extensions-3D","(value)",""],["parser_type_for_extension","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-parser_type_for_extension","(extension)","<p>Finds a parser type that is registered for the extension. If no type is\nfound, the default Ruby type …\n"],["parser_type_for_filename","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-i-parser_type_for_filename","(filename)","<p>Guesses the parser type to use depending on the file extension.\n<p>@param [String] filename the filename …\n"],["parser_types=","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-parser_types-3D","(value)",""],["partial_resolve","YARD::Registry","YARD/Registry.html#method-c-partial_resolve","(namespace, name, type = nil)","<p>Attempts to resolve a name in a namespace\n<p>@param [CodeObjects::NamespaceObject] namespace the starting …\n"],["path","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-path","()","<p>Represents the unique path of the object. The default implementation joins\nthe path of {#namespace} with …\n"],["path","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-i-path","()","<p>Overrides {Base#path} so the macro path is “.macro.MACRONAME”\n"],["path","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-path","()","<p>Override path handling for instance methods in the root namespace (they\nshould still have a separator …\n"],["path","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-path","()","<p>If the proxy resolves to an object, returns its path, otherwise guesses at\nthe correct path using the …\n"],["path","YARD::CodeObjects::RootObject","YARD/CodeObjects/RootObject.html#method-i-path","()",""],["path","YARD::Parser::Ruby::ReferenceNode","YARD/Parser/Ruby/ReferenceNode.html#method-i-path","()",""],["paths","YARD::Registry","YARD/Registry.html#method-c-paths","(reload = false)","<p>Returns the paths of all of the objects in the registry. @param [Boolean]\nreload whether to load entire …\n"],["paths_for_type","YARD::RegistryStore","YARD/RegistryStore.html#method-i-paths_for_type","(type, reload = false)","<p>@param [Symbol] type the type to look for @return [Array&lt;String&gt;] a\nlist of object paths with a …\n"],["peek","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-peek","(i = 0)",""],["peek","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","YARD/Parser/Ruby/Legacy/RubyLex/BufferedReader.html#method-i-peek","(at)",""],["peek_equal","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","YARD/Parser/Ruby/Legacy/RubyLex/BufferedReader.html#method-i-peek_equal","(str)",""],["peek_equal?","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-peek_equal-3F","(str)",""],["peek_no_space","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-peek_no_space","()","<p>Returns the next token in the stream that&#39;s not a space\n<p>@return [RubyToken::Token] the next non-space …\n"],["place","Array","Array.html#method-i-place","(*values)","<p>Places values before or after another object (by value) in an array. This\nis used in tandem with the …\n"],["place","YARD::Templates::Section","YARD/Templates/Section.html#method-i-place","(*args)",""],["po_dir=","YARD::Registry","YARD/Registry.html#method-c-po_dir-3D","(dir)",""],["post_process","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-i-post_process","()","<p>Runs a {Handlers::Processor} object to post process the parsed statements.\n@return [void]\n"],["prepare!","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-prepare-21","()","<p>@note You should not directly override this method. Instead, implement\n\n<pre>+load_yardoc_from_SOURCENAME+ when ...</pre>\n"],["prerelease_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-i-prerelease_gems","()",""],["prerelease_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-prerelease_specs","()","<p>An array including only the prerelease gemspecs\n"],["pretty_print","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-pretty_print","(q)","<p>@return [nil] pretty prints the node\n"],["prevchar","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-prevchar","(num = 1)",""],["print","YARD::Logger","YARD/Logger.html#method-i-print","(msg = '')","<p>Displays an unformatted line to the logger output stream. @param [String]\nmsg the message to display …\n"],["print_list","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-print_list","()","<p>Prints a list of all objects @return [void] @since 0.5.5\n"],["print_no_newline","YARD::Logger","YARD/Logger.html#method-i-print_no_newline","(msg = '')",""],["print_object","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-print_object","(object)","<p>@param [CodeObjects::Base] object the object to print. @return [String] the\nformatted output for an object. …\n"],["print_start_message","YARD::Server::RackAdapter","YARD/Server/RackAdapter.html#method-i-print_start_message","(server)",""],["print_statistics","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-print_statistics","()","<p>Prints statistics for different object types\n<p>To add statistics for a specific type, add a method\n<code>#stats_for_TYPE</code> …\n"],["print_undocumented_objects","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-print_undocumented_objects","()","<p>Prints list of undocumented objects\n"],["print_usage","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-print_usage","()","<p>Prints the command usage @return [void] @since 0.5.6\n"],["privatize_class_method","YARD::Handlers::Ruby::Legacy::PrivateClassMethodHandler","YARD/Handlers/Ruby/Legacy/PrivateClassMethodHandler.html#method-i-privatize_class_method","(name)",""],["privatize_class_method","YARD::Handlers::Ruby::PrivateClassMethodHandler","YARD/Handlers/Ruby/PrivateClassMethodHandler.html#method-i-privatize_class_method","(node)",""],["privatize_constant","YARD::Handlers::Ruby::Legacy::PrivateConstantHandler","YARD/Handlers/Ruby/Legacy/PrivateConstantHandler.html#method-i-privatize_constant","(name)",""],["privatize_constant","YARD::Handlers::Ruby::PrivateConstantHandler","YARD/Handlers/Ruby/PrivateConstantHandler.html#method-i-privatize_constant","(node)",""],["process","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-process","()","<p>The main handler method called by the parser on a statement that matches\nthe {handles} declaration.\n<p>Subclasses …\n"],["process","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-process","(&block)","<p>Generates a <code>process</code> method, equivalent to +def process; …\nend+. Blocks defined with this syntax will …\n"],["process","YARD::Handlers::Processor","YARD/Handlers/Processor.html#method-i-process","(statements)","<p>Processes a list of statements by finding handlers to process each one.\n<p>@param [Array] statements a list …\n"],["process_block_token","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-process_block_token","(tk)","<p>Processes a token in a block\n<p>@param [RubyToken::Token] tk the token to process\n"],["process_complex_block_opener","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-process_complex_block_opener","(tk)","<p>Processes a complex block-opening token; that is, a block opener such as\n<code>while</code> or <code>for</code> that is followed …\n"],["process_constant","YARD::Handlers::Ruby::ConstantHandler","YARD/Handlers/Ruby/ConstantHandler.html#method-i-process_constant","(statement)",""],["process_file","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-process_file","(file, object)","<p>@group Processing other files\n"],["process_initial_comment","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-process_initial_comment","(tk)","<p>Processes a comment token that comes before a statement\n<p>@param [RubyToken::Token] tk the token to process …\n"],["process_mixin","YARD::Handlers::Ruby::ExtendHandler","YARD/Handlers/Ruby/ExtendHandler.html#method-i-process_mixin","(mixin)",""],["process_mixin","YARD::Handlers::Ruby::Legacy::ExtendHandler","YARD/Handlers/Ruby/Legacy/ExtendHandler.html#method-i-process_mixin","(mixin)",""],["process_mixin","YARD::Handlers::Ruby::Legacy::MixinHandler","YARD/Handlers/Ruby/Legacy/MixinHandler.html#method-i-process_mixin","(mixin)",""],["process_mixin","YARD::Handlers::Ruby::MixinHandler","YARD/Handlers/Ruby/MixinHandler.html#method-i-process_mixin","(mixin)",""],["process_simple_block_opener","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-process_simple_block_opener","(tk)","<p>Processes a simple block-opening token; that is, a block opener such as\n<code>begin</code> or <code>do</code> that isn&#39;t followed …\n"],["process_statement_end","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-process_statement_end","(tk)","<p>Processes a token that closes a statement\n<p>@param [RubyToken::Token] tk the token to process\n"],["process_structclass","YARD::Handlers::Ruby::ConstantHandler","YARD/Handlers/Ruby/ConstantHandler.html#method-i-process_structclass","(statement)",""],["process_structclass","YARD::Handlers::Ruby::Legacy::ConstantHandler","YARD/Handlers/Ruby/Legacy/ConstantHandler.html#method-i-process_structclass","(classname, parameters)",""],["process_token","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-process_token","(tk)","<p>Processes a single token\n<p>@param [RubyToken::Token] tk the token to process\n"],["processed_files","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-processed_files","()",""],["progress","YARD::Logger","YARD/Logger.html#method-i-progress","(msg, nontty_log = :debug)","<p>Displays a progress indicator for a given message. This progress report is\nonly displayed on TTY displays, …\n"],["proxy_path","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-proxy_path","()",""],["proxy_types","YARD::Registry","YARD/Registry.html#method-c-proxy_types","()","<p>The assumed types of a list of paths. This method is used by\nCodeObjects::Base @return [{String =&gt; …\n"],["proxy_types_path","YARD::RegistryStore","YARD/RegistryStore.html#method-i-proxy_types_path","()","<p>@deprecated The registry no longer tracks proxy types\n"],["proxy_types_path","YARD::Serializers::YardocSerializer","YARD/Serializers/YardocSerializer.html#method-i-proxy_types_path","()","<p>@deprecated The registry no longer tracks proxy types\n"],["prune_method_listing","YARD::Templates::Helpers::ModuleHelper","YARD/Templates/Helpers/ModuleHelper.html#method-i-prune_method_listing","(list, hide_attributes = true)","<p>Prunes the method listing by running the verifier and removing\nattributes/aliases @param [Array&lt;CodeObjects::Base&gt;] …\n"],["push","YARD::CodeObjects::CodeObjectList","YARD/CodeObjects/CodeObjectList.html#method-i-push","(value)","<p>Adds a new value to the list\n<p>@param [Base] value a code object to add @return [CodeObjectList] self\n"],["push","YARD::Parser::Ruby::Legacy::TokenList","YARD/Parser/Ruby/Legacy/TokenList.html#method-i-push","(*tokens)","<p>@param [TokenList, Token, String] tokens\n\n<pre>A list of tokens. If the token is a string, it\nis parsed with ...</pre>\n"],["push","YARD::Templates::Section","YARD/Templates/Section.html#method-i-push","(*args)",""],["push_state","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-push_state","(opts = {}, &block)","<p>Executes a given block with specific state values for {#owner},\n{#namespace} and {#scope}.\n<p>@param [Proc] …\n"],["push_token","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-push_token","(tk)","<p>Adds a token to the current statement, unless it&#39;s a newline,\nsemicolon, or comment\n<p>@param [RubyToken::Token] …\n"],["put","YARD::RegistryStore","YARD/RegistryStore.html#method-i-put","(key, value)","<p>Associates an object with a path @param [String, Symbol] key the path name\n(:root or &#39;&#39; for root …\n"],["puts","YARD::Logger","YARD/Logger.html#method-i-puts","(msg = '')","<p>Displays an unformatted line to the logger output stream, adding a newline.\n@param [String] msg the message …\n"],["read_binary","File","File.html#method-c-read_binary","(file)","<p>Reads a file with binary encoding @return [String] the ascii-8bit encoded\ndata @since 0.5.3\n"],["read_config_file","YARD::Config","YARD/Config.html#method-c-read_config_file","()","<p>Loads the YAML configuration file into memory @return [Hash] the contents\nof the YAML file from disk …\n"],["read_escape","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-read_escape","()",""],["readable?","YARD::Tags::AttributeDirective","YARD/Tags/AttributeDirective.html#method-i-readable-3F","()",""],["reader?","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-reader-3F","()","<p>@return [Boolean] whether the method is a reader attribute @since 0.5.3\n"],["redirect","YARD::Server::Commands::Base","YARD/Server/Commands/Base.html#method-i-redirect","(url)","<p>Sets the headers and status code for a redirection to a given URL @param\n[String] url the URL to redirect …\n"],["ref?","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-ref-3F","()","<p>@return [Boolean] whether the node is a reference (variable,\n\n<pre>constant name)</pre>\n"],["ref?","YARD::Parser::Ruby::ReferenceNode","YARD/Parser/Ruby/ReferenceNode.html#method-i-ref-3F","()",""],["refresh!","Gem::SourceIndex","Gem/SourceIndex.html#method-i-refresh-21","()","<p>Replaces the gems in the source index from specifications in the\ndirectories this source index was created …\n"],["register","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-register","(*objects)","<p>Do some post processing on a list of code objects. Adds basic attributes to\nthe list of objects like …\n"],["register","YARD::I18n::Messages","YARD/I18n/Messages.html#method-i-register","(id)","<p>Registers a {Message}, the mssage ID of which is <code>id</code>. If\ncorresponding <code>Message</code> is already registered, …\n"],["register","YARD::Registry","YARD/Registry.html#method-c-register","(object)","<p>Registers a new object with the registry\n<p>@param [CodeObjects::Base] object the object to register @return …\n"],["register_docstring","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-register_docstring","(object, docstring = statement.comments, stmt = statement)","<p>Registers any docstring found for the object and expands macros\n<p>@param [CodeObjects::Base] object the …\n"],["register_docstring","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-register_docstring","(object, docstring = nil, stmt = nil)","<p>@group Registering objects\n"],["register_docstring","YARD::Handlers::C::OverrideCommentHandler","YARD/Handlers/C/OverrideCommentHandler.html#method-i-register_docstring","(object, docstring = statement.source, stmt = statement)",""],["register_docstring","YARD::Handlers::Ruby::DSLHandlerMethods","YARD/Handlers/Ruby/DSLHandlerMethods.html#method-i-register_docstring","(object, docstring = @docstring, stmt = statement)",""],["register_dynamic","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-register_dynamic","(object)","<p>Registers the object as dynamic if the object is defined inside a method or\nblock (owner != namespace) …\n"],["register_ensure_loaded","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-register_ensure_loaded","(object)","<p>Ensures that the object&#39;s namespace is loaded before attaching it to\nthe namespace.\n<p>@param [CodeObjects::Base] …\n"],["register_file_info","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-register_file_info","(object, file = parser.file, line = statement.line, comments = statement.comments)","<p>Registers the file/line of the declaration with the object\n<p>@param [CodeObjects::Base] object the object …\n"],["register_file_info","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-register_file_info","(object, file = nil, line = nil, comments = nil)",""],["register_file_info","YARD::Handlers::C::OverrideCommentHandler","YARD/Handlers/C/OverrideCommentHandler.html#method-i-register_file_info","(object, file = parser.file, line = statement.line, comments = statement.comments)",""],["register_group","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-register_group","(object, group = extra_state.group)","<p>Registers the object as being inside a specific group\n<p>@param [CodeObjects::Base] object the object to …\n"],["register_handler_namespace","YARD::Handlers::Processor","YARD/Handlers/Processor.html#method-c-register_handler_namespace","(type, ns)","<p>Registers a new namespace for handlers of the given type. @since 0.6.0\n"],["register_message","YARD::I18n::PotGenerator","YARD/I18n/PotGenerator.html#method-i-register_message","(id)",""],["register_module_function","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-register_module_function","(object)","<p>Registers the same method information on the module function, if the object\nwas defined as a module function. …\n"],["register_parser_type","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-register_parser_type","(type, parser_klass, extensions = nil)","<p>Registers a new parser type.\n<p>@example Registering a parser for “java” files\n\n<pre>SourceParser.register_parser_type ...</pre>\n"],["register_source","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-register_source","(object, source = statement, type = parser.parser_type)","<p>@param [CodeObjects::Base] object the object to register @return [void]\n@since 0.8.0\n"],["register_source","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-register_source","(object, source = nil, type = nil)",""],["register_static_path","YARD::Server","YARD/Server.html#method-c-register_static_path","(path)","<p>Registers a static path to be used in static asset lookup. @param [String]\npath the pathname to register …\n"],["register_template_path","YARD::Templates::Engine","YARD/Templates/Engine.html#method-c-register_template_path","(path)","<p>Registers a new template path in {template_paths}\n<p>@param [String] path a new template path @return [void] …\n"],["register_transitive_tags","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-register_transitive_tags","(object)","<p>Registers any transitive tags from the namespace on the object\n<p>@param [CodeObjects::Base, nil] object …\n"],["register_visibility","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-register_visibility","(object, visibility = self.visibility)","<p>Registers visibility on a method object. If the object does not respond to\nsetting visibility, nothing …\n"],["register_visibility","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-register_visibility","(object, visibility = nil)",""],["relative_path","File","File.html#method-c-relative_path","(from, to)","<p>Turns a path <code>to</code> into a relative path from starting point\n<code>from</code>. The argument <code>from</code> is assumed to be a\nfilename. …\n"],["relative_path","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-relative_path","(other)","<p>@param [Base, String] other another code object (or object path) @return\n[String] the shortest relative …\n"],["released_gems","Gem::SourceIndex","Gem/SourceIndex.html#method-i-released_gems","()",""],["released_specs","Gem::SourceIndex","Gem/SourceIndex.html#method-i-released_specs","()","<p>An array including only the released gemspecs\n"],["remove_private_comments","YARD::Parser::C::CommentParser","YARD/Parser/C/CommentParser.html#method-i-remove_private_comments","(comment)",""],["remove_spec","Gem::SourceIndex","Gem/SourceIndex.html#method-i-remove_spec","(full_name)","<p>Remove a gem specification named <code>full_name</code>.\n"],["remove_var_prefix","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-remove_var_prefix","(var)","<p>@endgroup\n"],["removed_objects","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-removed_objects","(registry1, registry2)",""],["render","YARD::Server::Commands::Base","YARD/Server/Commands/Base.html#method-i-render","(object = nil)","<p>Renders a specific object if provided, or a regular template rendering if\nobject is not provided.\n<p>@todo …\n"],["render","YARD::Templates::Engine","YARD/Templates/Engine.html#method-c-render","(options = {})","<p>Renders a template on a {CodeObjects::Base code object} using a set of\ndefault (overridable) options. …\n"],["render_section","YARD::Templates::Template","YARD/Templates/Template.html#method-i-render_section","(section, &block)",""],["replace","YARD::Docstring","YARD/Docstring.html#method-i-replace","(content, parse = true)","<p>Replaces the docstring with new raw content. Called by {#all=}. @param\n[String] content the raw comments …\n"],["require_rubygems","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-require_rubygems","()",""],["reset_defaults","YARD::Options","YARD/Options.html#method-i-reset_defaults","()","<p>Resets all values to their defaults.\n<p>@abstract Subclasses should override this method to perform custom …\n"],["reset_full_paths","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-reset_full_paths","()","<p>Resets cache for {#full_paths}\n"],["reset_line_info","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-reset_line_info","()","<p>Resets line information @return [void]\n"],["resolve","YARD::Registry","YARD/Registry.html#method-c-resolve","(namespace, name, inheritance = false, proxy_fallback = false, type = nil)","<p>Attempts to find an object by name starting at <code>namespace</code>,\nperforming a lookup similar to Ruby&#39;s method …\n"],["resolve_links","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-resolve_links","(text)","<p>Resolves any text in the form of +{Name}+ to the object specified by Name.\nAlso supports link titles …\n"],["resolve_reference","YARD::Docstring","YARD/Docstring.html#method-i-resolve_reference","()","<p>Resolves unresolved other docstring reference if there is unresolved\nreference. Does nothing if there …\n"],["respond_to?","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-respond_to-3F","(meth, include_private = false)","<p>@return [Boolean]\n"],["restore_template_info","YARD::Server::Commands::LibraryCommand","YARD/Server/Commands/LibraryCommand.html#method-i-restore_template_info","()",""],["return_type_from_tag","YARD::Handlers::Ruby::StructHandlerMethods","YARD/Handlers/Ruby/StructHandlerMethods.html#method-i-return_type_from_tag","(member_tag)","<p>Gets the return type for the member in a nicely formatted string. Used to\nbe injected into auto-generated …\n"],["root","YARD::Registry","YARD/Registry.html#method-c-root","()","<p>The root namespace object. @return [CodeObjects::RootObject] the root\nobject in the namespace\n"],["root","YARD::RegistryStore","YARD/RegistryStore.html#method-i-root","()","<p>@return [CodeObjects::RootObject] the root object\n"],["root?","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-root-3F","()","<p>@return whether or not this object is a RootObject\n"],["root?","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-root-3F","()","<p>This class is never a root object\n"],["root?","YARD::CodeObjects::RootObject","YARD/CodeObjects/RootObject.html#method-i-root-3F","()",""],["route","YARD::Server::Router","YARD/Server/Router.html#method-i-route","(path = request.path)","<p>Performs routing algorithm to find which prefix is called, first parsing\nout library name/version information. …\n"],["route_docs","YARD::Server::Router","YARD/Server/Router.html#method-i-route_docs","(library, paths)","<p>Routes requests from {#docs_prefix} and calls the appropriate command\n@param [LibraryVersion] library …\n"],["route_index","YARD::Server::Router","YARD/Server/Router.html#method-i-route_index","()","<p>Routes for the index of a library / multiple libraries @return (see #route)\n"],["route_list","YARD::Server::Router","YARD/Server/Router.html#method-i-route_list","(library, paths)","<p>Routes requests from {#list_prefix} and calls the appropriate command\n@param (see #route_docs) @return …\n"],["route_search","YARD::Server::Router","YARD/Server/Router.html#method-i-route_search","(library, paths)","<p>Routes requests from {#search_prefix} and calls the appropriate command\n@param (see #route_docs) @return …\n"],["router","YARD::Server::DocServerHelper","YARD/Server/DocServerHelper.html#method-i-router","()","<p>@return [Router] convenience method for accessing the router\n"],["ruby18?","YARD","YARD.html#method-c-ruby18-3F","()","<p>@return [Boolean] whether YARD is being run in Ruby 1.8 mode\n"],["ruby19?","YARD","YARD.html#method-c-ruby19-3F","()","<p>@return [Boolean] whether YARD is being run in Ruby 1.9 mode\n"],["ruby2?","YARD","YARD.html#method-c-ruby2-3F","()","<p>@return [Boolean] whether YARD is being run in Ruby 2.0\n"],["run","YARD::CLI::Command","YARD/CLI/Command.html#method-c-run","(*args)","<p>Helper method to run the utility on an instance. @see #run\n"],["run","YARD::CLI::CommandParser","YARD/CLI/CommandParser.html#method-i-run","(*args)","<p>Runs the {Command} object matching the command name of the first argument.\n@return [void]\n"],["run","YARD::CLI::CommandParser","YARD/CLI/CommandParser.html#method-c-run","(*args)","<p>Convenience method to create a new CommandParser and call {#run} @return\n(see #run)\n"],["run","YARD::CLI::Config","YARD/CLI/Config.html#method-i-run","(*args)",""],["run","YARD::CLI::Diff","YARD/CLI/Diff.html#method-i-run","(*args)",""],["run","YARD::CLI::Display","YARD/CLI/Display.html#method-i-run","(*args)","<p>Runs the commandline utility, parsing arguments and displaying an object\nfrom the {Registry}.\n<p>@param [Array&lt;String&gt;] …\n"],["run","YARD::CLI::Gems","YARD/CLI/Gems.html#method-i-run","(*args)","<p>Runs the commandline utility, parsing arguments and generating YARD indexes\nfor gems.\n<p>@param [Array&lt;String&gt;] …\n"],["run","YARD::CLI::Graph","YARD/CLI/Graph.html#method-i-run","(*args)","<p>Runs the command-line utility.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">grapher</span> = <span class=\"ruby-constant\">Graph</span>.<span class=\"ruby-identifier\">new</span>\n<span class=\"ruby-identifier\">grapher</span>.<span class=\"ruby-identifier\">run</span>(<span class=\"ruby-string\">&#39;--private&#39;</span>)\n</pre>\n"],["run","YARD::CLI::Help","YARD/CLI/Help.html#method-i-run","(*args)",""],["run","YARD::CLI::I18n","YARD/CLI/I18n.html#method-i-run","(*args)",""],["run","YARD::CLI::List","YARD/CLI/List.html#method-i-run","(*args)","<p>Runs the commandline utility, parsing arguments and displaying a list of\nobjects\n<p>@param [Array&lt;String&gt;] …\n"],["run","YARD::CLI::MarkupTypes","YARD/CLI/MarkupTypes.html#method-i-run","(*args)","<p>Runs the commandline utility, parsing arguments and displaying a list of\nmarkup types\n<p>@param [Array&lt;String&gt;] …\n"],["run","YARD::CLI::Server","YARD/CLI/Server.html#method-i-run","(*args)",""],["run","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-run","(*args)","<p>Runs the commandline utility, parsing arguments and generating output if\nset.\n<p>@param [Array&lt;String&gt;] …\n"],["run","YARD::CLI::YRI","YARD/CLI/YRI.html#method-c-run","(*args)","<p>Helper method to run the utility on an instance. @see #run\n"],["run","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-run","(*args)","<p>Runs the command-line utility.\n<p>@example\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">YRI</span>.<span class=\"ruby-identifier\">new</span>.<span class=\"ruby-identifier\">run</span>(<span class=\"ruby-string\">&#39;String#reverse&#39;</span>)\n</pre>\n"],["run","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-run","(*args)","<p>Runs the commandline utility, parsing arguments and generating output if\nset.\n<p>@param [Array&lt;String&gt;] …\n"],["run","YARD::Server::Commands::Base","YARD/Server/Commands/Base.html#method-i-run","()","<p>Subclass this method to implement a custom command. This method should set\nthe {#status} and {#body}, …\n"],["run","YARD::Server::Commands::DisplayFileCommand","YARD/Server/Commands/DisplayFileCommand.html#method-i-run","()",""],["run","YARD::Server::Commands::DisplayObjectCommand","YARD/Server/Commands/DisplayObjectCommand.html#method-i-run","()",""],["run","YARD::Server::Commands::FramesCommand","YARD/Server/Commands/FramesCommand.html#method-i-run","()",""],["run","YARD::Server::Commands::LibraryIndexCommand","YARD/Server/Commands/LibraryIndexCommand.html#method-i-run","()",""],["run","YARD::Server::Commands::ListCommand","YARD/Server/Commands/ListCommand.html#method-i-run","()",""],["run","YARD::Server::Commands::SearchCommand","YARD/Server/Commands/SearchCommand.html#method-i-run","()",""],["run","YARD::Server::Commands::StaticFileCommand","YARD/Server/Commands/StaticFileCommand.html#method-i-run","()",""],["run","YARD::Templates::Template","YARD/Templates/Template.html#method-i-run","(opts = nil, sects = sections, start_at = 0, break_first = false, &block)","<p>Runs a template on <code>sects</code> using extra options. This method\nshould not be called directly. Instead, call …\n"],["run","YARD::Templates::Template::ClassMethods","YARD/Templates/Template/ClassMethods.html#method-i-run","(*args)",""],["run","YARD::Verifier","YARD/Verifier.html#method-i-run","(list)","<p>Runs a list of objects against the verifier and returns the subset of\nverified objects.\n<p>@param [Array&lt;CodeObjects::Base&gt;] …\n"],["run_generate","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-run_generate","(checksums)","<p>Generates output for objects @param [Hash, nil] checksums if supplied, a\nlist of checkums for files. …\n"],["run_verifier","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-run_verifier","(list)","<p>(see Templates::Helpers::BaseHelper#run_verifier)\n"],["run_verifier","YARD::Templates::Helpers::BaseHelper","YARD/Templates/Helpers/BaseHelper.html#method-i-run_verifier","(list)","<p>Runs a list of objects against the {Verifier} object passed into the\ntemplate and returns the subset …\n"],["run_yardoc","Gem::DocManager","Gem/DocManager.html#method-i-run_yardoc","(*args)",""],["s","YARD::Parser::Ruby","YARD/Parser/Ruby.html#method-i-s","(*args)","<p>Builds and s-expression by creating {AstNode} objects with the type\nprovided by the first argument.\n<p>@example …\n"],["sanitize_block","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-sanitize_block","()",""],["sanitize_statement_end","YARD::Parser::Ruby::Legacy::StatementList","YARD/Parser/Ruby/Legacy/StatementList.html#method-i-sanitize_statement_end","()",""],["sanitized_tag_signature","YARD::Tags::MethodDirective","YARD/Tags/MethodDirective.html#method-i-sanitized_tag_signature","()",""],["save","YARD::Config","YARD/Config.html#method-c-save","()","<p>Saves settings to {CONFIG_FILE}. @return [void]\n"],["save","YARD::Registry","YARD/Registry.html#method-c-save","(merge = false, file = yardoc_file)","<p>Saves the registry to <code>file</code>\n<p>@param [String] file the yardoc file to save to @return [Boolean] true if\nthe …\n"],["save","YARD::RegistryStore","YARD/RegistryStore.html#method-i-save","(merge = true, file = nil)","<p>Saves the database to disk @param [Boolean] merge if true, merges the data\nin memory with the\n\n<pre>data on ...</pre>\n"],["save_default_template_info","YARD::Server::Commands::LibraryCommand","YARD/Server/Commands/LibraryCommand.html#method-i-save_default_template_info","()",""],["scope","YARD::CodeObjects::ExtendedMethodObject","YARD/CodeObjects/ExtendedMethodObject.html#method-i-scope","()","<p>@return [Symbol] always <code>:class</code>\n"],["scope","YARD::Handlers::Ruby::ExtendHandler","YARD/Handlers/Ruby/ExtendHandler.html#method-i-scope","()",""],["scope","YARD::Handlers::Ruby::Legacy::ExtendHandler","YARD/Handlers/Ruby/Legacy/ExtendHandler.html#method-i-scope","()",""],["scope=","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-scope-3D","(v)","<p>Changes the scope of an object from :instance or :class @param [Symbol] v\nthe new scope\n"],["scope=","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-scope-3D","(v)",""],["search","Gem::SourceIndex","Gem/SourceIndex.html#method-i-search","(gem_pattern, platform_only = false)","<p>Search for a gem by Gem::Dependency <code>gem_pattern</code>.  If\n<code>only_platform</code> is true, only gems matching Gem::Platform.local\n…\n"],["search","Object","Object.html#method-i-search","()",""],["search_for_object","YARD::Server::Commands::SearchCommand","YARD/Server/Commands/SearchCommand.html#method-i-search_for_object","()",""],["search_prefix","YARD::Server::Router","YARD/Server/Router.html#method-i-search_prefix","()","<p>@return [String] the URI prefix for all search requests\n"],["sections","YARD::Templates::Template","YARD/Templates/Template.html#method-i-sections","(*args)","<p>Sets the sections (and subsections) to be rendered for the template\n<p>@example Sets a set of erb sections …\n"],["select_adapter","YARD::CLI::Server","YARD/CLI/Server.html#method-i-select_adapter","()",""],["send_to_factory","YARD::Tags::Library","YARD/Tags/Library.html#method-i-send_to_factory","(tag_name, meth, text)",""],["sep","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-sep","()","<p>Override this method with a custom component separator. For instance,\n{MethodObject} implements sep as …\n"],["sep","YARD::CodeObjects::MacroObject","YARD/CodeObjects/MacroObject.html#method-i-sep","()","<p>Overrides the separator to be &#39;.&#39;\n"],["sep","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-sep","()","<p>Override separator to differentiate between class and instance methods.\n@return [String] “#” …\n"],["serialize","YARD::Serializers::Base","YARD/Serializers/Base.html#method-i-serialize","(object, data)","<p>Serializes an object.\n<p>@abstract This method should implement the logic that serializes\n\n<pre>+data+ to the respective ...</pre>\n"],["serialize","YARD::Serializers::FileSystemSerializer","YARD/Serializers/FileSystemSerializer.html#method-i-serialize","(object, data)","<p>Serializes object with data to its serialized path (prefixed by the\n<code>#basepath</code>).\n<p>@return [String] the written …\n"],["serialize","YARD::Serializers::ProcessSerializer","YARD/Serializers/ProcessSerializer.html#method-i-serialize","(object, data)","<p>Overrides serialize behaviour and writes data to standard input of the\nassociated command\n"],["serialize","YARD::Serializers::StdoutSerializer","YARD/Serializers/StdoutSerializer.html#method-i-serialize","(object, data)","<p>Overrides serialize behaviour to write data to standard output\n"],["serialize","YARD::Serializers::YardocSerializer","YARD/Serializers/YardocSerializer.html#method-i-serialize","(object)",""],["serialize","YARD::Server::Commands::LibraryOptions","YARD/Server/Commands/LibraryOptions.html#method-i-serialize","()",""],["serialized_path","YARD::Serializers::Base","YARD/Serializers/Base.html#method-i-serialized_path","(object)","<p>The serialized path of an object\n<p>@abstract This method should return the path of the object on the\n\n<pre>endpoint. ...</pre>\n"],["serialized_path","YARD::Serializers::FileSystemSerializer","YARD/Serializers/FileSystemSerializer.html#method-i-serialized_path","(object)","<p>Implements the serialized path of a code object.\n<p>@param [CodeObjects::Base, CodeObjects::ExtraFileObject …\n"],["serialized_path","YARD::Serializers::YardocSerializer","YARD/Serializers/YardocSerializer.html#method-i-serialized_path","(object)",""],["serialized_path","YARD::Server::DocServerSerializer","YARD/Server/DocServerSerializer.html#method-i-serialized_path","(object)",""],["serializer","YARD::Server::Commands::LibraryOptions","YARD/Server/Commands/LibraryOptions.html#method-i-serializer","()",""],["serve_normal","YARD::Server::Commands::SearchCommand","YARD/Server/Commands/SearchCommand.html#method-i-serve_normal","()",""],["serve_xhr","YARD::Server::Commands::SearchCommand","YARD/Server/Commands/SearchCommand.html#method-i-serve_xhr","()",""],["set_default_options","YARD::Templates::Engine","YARD/Templates/Engine.html#method-c-set_default_options","(options = {})","<p>Sets default options on the options hash\n<p>@param [Hash] options the options hash @option options [Symbol] …\n"],["set_ivars","YARD::Templates::Template","YARD/Templates/Template.html#method-i-set_ivars","()",""],["set_text","YARD::Parser::Ruby::Legacy::RubyToken::Token","YARD/Parser/Ruby/Legacy/RubyToken/Token.html#method-i-set_text","(text)","<p>Chainable way to sets the text attribute\n<p>@param [String] text the new text @return [Token] this token …\n"],["set_token_position","YARD::Parser::Ruby::Legacy::RubyToken","YARD/Parser/Ruby/Legacy/RubyToken.html#method-i-set_token_position","(line, char)","<p>@private\n"],["setup","YARD::Server::Adapter","YARD/Server/Adapter.html#method-c-setup","()","<p>Performs any global initialization for the adapter. @note If you subclass\nthis method, make sure to call …\n"],["setup_library","YARD::Server::Commands::LibraryCommand","YARD/Server/Commands/LibraryCommand.html#method-i-setup_library","()",""],["setup_rdoc","Gem::DocManager","Gem/DocManager.html#method-i-setup_rdoc","()",""],["setup_yardopts","YARD::Server::Commands::LibraryCommand","YARD/Server/Commands/LibraryCommand.html#method-i-setup_yardopts","()",""],["shebang_line","YARD::Parser::Ruby::Legacy::RubyParser","YARD/Parser/Ruby/Legacy/RubyParser.html#method-i-shebang_line","()",""],["shebang_line","YARD::Parser::Ruby::RubyParser","YARD/Parser/Ruby/RubyParser.html#method-i-shebang_line","()",""],["shell_split","String","String.html#method-i-shell_split","()","<p>Splits text into tokens the way a shell would, handling quoted text as a\nsingle token. Use &#39;&quot;&#39; …\n"],["show","YARD::Parser::C::Statement","YARD/Parser/C/Statement.html#method-i-show","()",""],["show","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-show","()","<p>@return [String] the first line of source the node represents\n"],["show","YARD::Parser::Ruby::Legacy::Statement","YARD/Parser/Ruby/Legacy/Statement.html#method-i-show","()",""],["show_backtraces","YARD::Logger","YARD/Logger.html#method-i-show_backtraces","()","<p>@return [Boolean] whether backtraces should be shown (by default\n\n<pre>this is on).</pre>\n"],["show_progress","YARD::Logger","YARD/Logger.html#method-i-show_progress","()","<p>@return [Boolean] whether progress indicators should be shown when\n\n<pre>logging CLIs (by default this is off).</pre>\n"],["shutdown","YARD::Server::Adapter","YARD/Server/Adapter.html#method-c-shutdown","()","<p>Performs any global shutdown procedures for the adapter. @note If you\nsubclass this method, make sure …\n"],["signature","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-signature","(meth, link = true, show_extras = true, full_attr_name = true)","<p>Formats the signature of method <code>meth</code>.\n<p>@param [CodeObjects::MethodObject] meth the method object to list …\n"],["signature","YARD::Templates::Helpers::TextHelper","YARD/Templates/Helpers/TextHelper.html#method-i-signature","(meth)","<p>@return [String] the formatted signature for a method\n"],["signature_types","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-signature_types","(meth, link = true)","<p>Get the return types for a method signature.\n<p>@param [CodeObjects::MethodObject] meth the method object …\n"],["single_library","YARD::Server::Commands::LibraryOptions","YARD/Server/Commands/LibraryOptions.html#method-i-single_library","()",""],["single_object_db=","YARD::Registry","YARD/Registry.html#method-c-single_object_db-3D","(v)",""],["size","Gem::SourceIndex","Gem/SourceIndex.html#method-i-size","()",""],["skip_inner_expression","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-skip_inner_expression","()",""],["sorted_labels","YARD::Tags::Library","YARD/Tags/Library.html#method-c-sorted_labels","()","<p>Sorts the labels lexically by their label name, often used when displaying\nthe tags.\n<p>@return [Array&lt;Symbol&gt;, …\n"],["source","YARD::Parser::Ruby::CommentNode","YARD/Parser/Ruby/CommentNode.html#method-i-source","()",""],["source","YARD::Parser::Ruby::Legacy::Statement","YARD/Parser/Ruby/Legacy/Statement.html#method-i-source","(include_block = true)",""],["source=","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-source-3D","(statement)","<p>Attaches source code to a code object with an optional file location\n<p>@param [#source, String] statement …\n"],["source_index","Gem","Gem.html#method-c-source_index","()","<p>Returns the Gem::SourceIndex of specifications that are in the Gem.path\n"],["source_path_for_disk","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-source_path_for_disk","()","<p>@return [String] the source path for a disk source\n"],["source_path_for_gem","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-source_path_for_gem","()","<p>@return [String] the source path for a gem source\n"],["source_range","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-source_range","()","<p>@return [Range] the character range in {#full_source} represented\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">by</span> <span class=\"ruby-identifier\">the</span> <span class=\"ruby-identifier\">node</span>\n</pre>\n"],["specification","Gem::SourceIndex","Gem/SourceIndex.html#method-i-specification","(full_name)","<p>The gem specification given a full gem spec name.\n"],["splat_param","YARD::Parser::Ruby::ParameterNode","YARD/Parser/Ruby/ParameterNode.html#method-i-splat_param","()",""],["squeeze","YARD::Parser::Ruby::Legacy::TokenList","YARD/Parser/Ruby/Legacy/TokenList.html#method-i-squeeze","(type = TkSPACE)",""],["start","YARD::Server::Adapter","YARD/Server/Adapter.html#method-i-start","()","<p>Implement this method to connect your adapter to your server. @abstract\n"],["start","YARD::Server::RackAdapter","YARD/Server/RackAdapter.html#method-i-start","()","<p>Starts the <code>Rack::Server</code>. This method will pass control to the\nserver and block. @return [void]\n"],["start","YARD::Server::WebrickAdapter","YARD/Server/WebrickAdapter.html#method-i-start","()","<p>Initializes a WEBrick server. If {Adapter#server_options} contains a\n<code>:daemonize</code> key set to true, the …\n"],["statement_class","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-c-statement_class","(type = nil)",""],["stats_for_classes","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-stats_for_classes","()","<p>Statistics for classes\n"],["stats_for_constants","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-stats_for_constants","()","<p>Statistics for constants\n"],["stats_for_files","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-stats_for_files","()","<p>Statistics for files\n"],["stats_for_methods","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-stats_for_methods","()","<p>Statistics for methods\n"],["stats_for_modules","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-stats_for_modules","()","<p>Statistics for modules\n"],["strip_non_statement_data","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-strip_non_statement_data","()",""],["struct","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-struct","()",""],["struct_superclass_name","YARD::Handlers::Ruby::ClassHandler","YARD/Handlers/Ruby/ClassHandler.html#method-i-struct_superclass_name","(superclass)",""],["struct_superclass_name","YARD::Handlers::Ruby::Legacy::ClassHandler","YARD/Handlers/Ruby/Legacy/ClassHandler.html#method-i-struct_superclass_name","(superclass)",""],["stylesheets","Object","Object.html#method-i-stylesheets","()",""],["subclasses","YARD::Handlers::Base","YARD/Handlers/Base.html#method-c-subclasses","()","<p>Returns all registered handler subclasses. @return [Array&lt;Base&gt;] a\nlist of handlers\n"],["summary","YARD::Docstring","YARD/Docstring.html#method-i-summary","()","<p>Gets the first line of a docstring to the period or the first paragraph.\n@return [String] The first line …\n"],["superb","YARD::Templates::Template","YARD/Templates/Template.html#method-i-superb","(sect = section, &block)","<p>Calls the ERB file from the last inherited template with {#section}.erb\n<p>@param [Symbol, String] sect if …\n"],["superclass","YARD::Parser::Ruby::ClassNode","YARD/Parser/Ruby/ClassNode.html#method-i-superclass","()",""],["superclass=","YARD::CodeObjects::ClassObject","YARD/CodeObjects/ClassObject.html#method-i-superclass-3D","(object)","<p>Sets the superclass of the object\n<p>@param [Base, Proxy, String, Symbol, nil] object the superclass value …\n"],["support_rdoc_document_file!","YARD::CLI::YardoptsCommand","YARD/CLI/YardoptsCommand.html#method-i-support_rdoc_document_file-21","(file = '.document')","<p>Reads a .document file in the directory to get source file globs @return\n[Array&lt;String&gt;] an array …\n"],["symbols","YARD::Handlers::C::Base","YARD/Handlers/C/Base.html#method-i-symbols","()","<p>@group Looking up Symbol and Var Values\n"],["tag","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-tag","(name)","<p>Gets a tag from the {#docstring} @see Docstring#tag\n"],["tag","YARD::Docstring","YARD/Docstring.html#method-i-tag","(name)","<p>Convenience method to return the first tag object in the list of tag\nobjects of that name\n<p>@example\n\n<pre>doc ...</pre>\n"],["tag","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-tag","(name)",""],["tag_attrs","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-tag_attrs","(opts = {})","<p>Converts a set of hash options into HTML attributes for a tag\n<p>@param [Hash{String =&gt; String}] opts …\n"],["tag_create","YARD::Tags::Library","YARD/Tags/Library.html#method-i-tag_create","(tag_name, tag_buf)","<p>Creates a new {Tag} object with a given tag name and data @return [Tag] the\nnewly created tag object …\n"],["tag_is_directive?","YARD::DocstringParser","YARD/DocstringParser.html#method-i-tag_is_directive-3F","(tag_name)","<p>Backward compatibility to detect old tags that should be specified as\ndirectives in 0.8 and onward.\n"],["tag_method_name","YARD::Tags::Library","YARD/Tags/Library.html#method-c-tag_method_name","(tag_name)",""],["tag_options","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-tag_options","(opts)","<p>Adds tag options @since 0.6.0\n"],["tag_or_directive_method_name","YARD::Tags::Library","YARD/Tags/Library.html#method-c-tag_or_directive_method_name","(tag_name, type = 'tag')",""],["tags","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-tags","(name = nil)","<p>Gets a list of tags from the {#docstring} @see Docstring#tags\n"],["tags","YARD::Docstring","YARD/Docstring.html#method-i-tags","(name = nil)","<p>Returns a list of tags specified by <code>name</code> or all tags if\n<code>name</code> is not specified.\n<p>@param [#to_s] name the …\n"],["tags","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-tags","(name = nil)",""],["tags","YARD::Tags::RefTagList","YARD/Tags/RefTagList.html#method-i-tags","()",""],["tap","YARD::Options","YARD/Options.html#method-i-tap","(&block)",""],["template","YARD::Templates::Engine","YARD/Templates/Engine.html#method-c-template","(*path)","<p>Creates a template module representing the path. Searches on disk for the\nfirst directory named <code>path</code> …\n"],["template!","YARD::Templates::Engine","YARD/Templates/Engine.html#method-c-template-21","(path, full_paths = nil)","<p>Forces creation of a template at <code>path</code> within a\n<code>full_path</code>.\n<p>@param [String] path the path name of the template …\n"],["template_module_name","YARD::Templates::Engine","YARD/Templates/Engine.html#method-c-template_module_name","(path)","<p>The name of the module that represents a <code>path</code>\n<p>@param [String] path the path to generate a module name …\n"],["text","YARD::Parser::Ruby::Legacy::RubyToken::TkBlockContents","YARD/Parser/Ruby/Legacy/RubyToken/TkBlockContents.html#method-i-text","()",""],["text","YARD::Parser::Ruby::Legacy::RubyToken::TkStatementEnd","YARD/Parser/Ruby/Legacy/RubyToken/TkStatementEnd.html#method-i-text","()",""],["then_block","YARD::Parser::Ruby::ConditionalNode","YARD/Parser/Ruby/ConditionalNode.html#method-i-then_block","()",""],["thread_local_store","YARD::Registry","YARD/Registry.html#method-c-thread_local_store","()","<p>@since 0.6.5\n"],["thread_local_store=","YARD::Registry","YARD/Registry.html#method-c-thread_local_store-3D","(value)","<p>@since 0.6.5\n"],["tidy","YARD::Templates::Helpers::UMLHelper","YARD/Templates/Helpers/UMLHelper.html#method-i-tidy","(data)","<p>Tidies data by formatting and indenting text @param [String] data\npre-formatted text @return [String] …\n"],["title","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-title","()","<p>@note\n\n<pre>Override this method if your object has a special title that does\nnot match the {#path} attribute ...</pre>\n"],["title","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-title","()",""],["title","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-title","()",""],["title","YARD::CodeObjects::RootObject","YARD/CodeObjects/RootObject.html#method-i-title","()",""],["title_align_right","YARD::Templates::Helpers::TextHelper","YARD/Templates/Helpers/TextHelper.html#method-i-title_align_right","(text, col = 72)","<p>@return [String] aligns a title to the right\n"],["to_a","YARD::Templates::Section","YARD/Templates/Section.html#method-i-to_a","()",""],["to_ary","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-to_ary","()","<p>@return [nil] this object does not turn into an array\n"],["to_ary","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-to_ary","()","<p>@note this method fixes a bug in 1.9.2: gist.github.com/437136\n"],["to_docstring","YARD::DocstringParser","YARD/DocstringParser.html#method-i-to_docstring","()","<p>@return [Docstring] translates parsed text into\n\n<pre>a Docstring object.</pre>\n"],["to_hash","YARD::Options","YARD/Options.html#method-i-to_hash","()","<p>@return [Hash] Converts options object to an options hash. All keys\n\n<pre>will be symbolized.</pre>\n"],["to_html","YARD::Templates::Helpers::Markup::RDocMarkup::RDocMarkup","YARD/Templates/Helpers/Markup/RDocMarkup/RDocMarkup.html#method-i-to_html","()",""],["to_obj","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-to_obj","()","<p>Attempts to find the object that this unresolved object references by\nchecking if any objects by this …\n"],["to_raw","YARD::Docstring","YARD/Docstring.html#method-i-to_raw","()","<p>Reformats and returns a raw representation of the tag data using the\ncurrent tag and docstring data, …\n"],["to_s","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-to_s","()",""],["to_s","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-to_s","()",""],["to_s","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-to_s","()",""],["to_s","YARD::Docstring","YARD/Docstring.html#method-i-to_s","()",""],["to_s","YARD::Parser::Ruby::Legacy::Statement","YARD/Parser/Ruby/Legacy/Statement.html#method-i-to_s","(include_block = true)",""],["to_s","YARD::Parser::Ruby::Legacy::TokenList","YARD/Parser/Ruby/Legacy/TokenList.html#method-i-to_s","(full_statement = false, show_block = true)",""],["to_s","YARD::Server::LibraryVersion","YARD/Server/LibraryVersion.html#method-i-to_s","(url_format = true)","<p>@param [Boolean] url_format if true, returns the string in a URI-compatible\n\n<pre>format (for appending to a ...</pre>\n"],["to_str","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-to_str","()",""],["token","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-token","()",""],["token?","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-token-3F","()","<p>@return [Boolean] whether the node is a token\n"],["tokenize","YARD::Parser::Base","YARD/Parser/Base.html#method-i-tokenize","()","<p>This method should be implemented to tokenize given source @abstract\n@return [Array] a list/tree of lexical …\n"],["tokenize","YARD::Parser::C::CParser","YARD/Parser/C/CParser.html#method-i-tokenize","()",""],["tokenize","YARD::Parser::Ruby::Legacy::RubyParser","YARD/Parser/Ruby/Legacy/RubyParser.html#method-i-tokenize","()",""],["tokenize","YARD::Parser::Ruby::RubyParser","YARD/Parser/Ruby/RubyParser.html#method-i-tokenize","()",""],["tokenize","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-tokenize","(content, ptype = parser_type)","<p>Tokenizes but does not parse the block of code\n<p>@param [String] content the block of code to tokenize @param …\n"],["tokenize","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-i-tokenize","(content)","<p>Tokenizes but does not parse the block of code using the current\n{#parser_type}\n<p>@param [String] content …\n"],["tokval","YARD::Handlers::Ruby::Legacy::Base","YARD/Handlers/Ruby/Legacy/Base.html#method-i-tokval","(token, *accepted_types)","<p>The string value of a token. For example, the return value for the symbol\n:sym would be :sym. The return …\n"],["tokval_list","YARD::Handlers::Ruby::Legacy::Base","YARD/Handlers/Ruby/Legacy/Base.html#method-i-tokval_list","(tokenlist, *accepted_types)","<p>Returns a list of symbols or string values from a statement. The list must\nbe a valid comma delimited …\n"],["translate","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-translate","(data)",""],["translate","YARD::I18n::Locale","YARD/I18n/Locale.html#method-i-translate","(message)","<p>@param [String] message the translation target message. @return [String]\ntranslated message. If tarnslation …\n"],["translate","YARD::I18n::Text","YARD/I18n/Text.html#method-i-translate","(locale)","<p>Translates into <code>locale</code>.\n<p>@param [Locale] locale the translation target locale. @return [String]\ntranslated …\n"],["translate_docstring","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-translate_docstring","(locale)",""],["translate_plugin_name","YARD::Config","YARD/Config.html#method-c-translate_plugin_name","(name)","<p>Sanitizes and normalizes a plugin name to include the &#39;yard-&#39;\nprefix. @param [String] name the …\n"],["translate_plugin_names","YARD::Config","YARD/Config.html#method-c-translate_plugin_names","()","<p>Translates plugin names to add yard- prefix.\n"],["traverse","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-traverse","()","<p>Traverses the object and yields each node (including descendants) in order.\n<p>@yield each descendant node …\n"],["try_load_object","YARD::CLI::YRI","YARD/CLI/YRI.html#method-i-try_load_object","(name, cache_path)","<p>Tries to load the object with name. If successful, caches the object with\nthe cache_path\n<p>@param [String] …\n"],["type","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-type","()","<p>Default type is the lowercase class name without the “Object” suffix.\nOverride this method …\n"],["type","YARD::CodeObjects::ExtraFileObject","YARD/CodeObjects/ExtraFileObject.html#method-i-type","()",""],["type","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-type","()","<p>Returns the type of the proxy. If it cannot be resolved at the time of the\ncall, it will either return …\n"],["type","YARD::Tags::OverloadTag","YARD/Tags/OverloadTag.html#method-i-type","()",""],["type","YARD::Tags::Tag","YARD/Tags/Tag.html#method-i-type","()","<p>Convenience method to access the first type specified. This should mainly\nbe used for tags that only …\n"],["type=","YARD::CodeObjects::Proxy","YARD/CodeObjects/Proxy.html#method-i-type-3D","(type)","<p>Allows a parser to infer the type of the proxy by its path. @param\n[#to_sym] type the proxy&#39;s inferred …\n"],["type_statistics","YARD::CLI::Stats","YARD/CLI/Stats.html#method-i-type_statistics","(type)",""],["uml_visibility","YARD::Templates::Helpers::UMLHelper","YARD/Templates/Helpers/UMLHelper.html#method-i-uml_visibility","(object)","<p>Official UML visibility prefix syntax for an object given its visibility\n@param [CodeObjects::Base] object …\n"],["unfreeze","YARD::Parser::Ruby::AstNode","YARD/Parser/Ruby/AstNode.html#method-i-unfreeze","()","<p>Resets node state in tree\n"],["ungetc","YARD::Parser::Ruby::Legacy::RubyLex","YARD/Parser/Ruby/Legacy/RubyLex.html#method-i-ungetc","(c = nil)",""],["ungetc","YARD::Parser::Ruby::Legacy::RubyLex::BufferedReader","YARD/Parser/Ruby/Legacy/RubyLex/BufferedReader.html#method-i-ungetc","(ch)",""],["unmodify_nilclass","YARD::Verifier","YARD/Verifier.html#method-i-unmodify_nilclass","()","<p>Returns the state of NilClass back to normal @return [void]\n"],["unnamed_end_params","YARD::Parser::Ruby::ParameterNode","YARD/Parser/Ruby/ParameterNode.html#method-i-unnamed_end_params","()",""],["unnamed_optional_params","YARD::Parser::Ruby::ParameterNode","YARD/Parser/Ruby/ParameterNode.html#method-i-unnamed_optional_params","()",""],["unnamed_required_params","YARD::Parser::Ruby::ParameterNode","YARD/Parser/Ruby/ParameterNode.html#method-i-unnamed_required_params","()",""],["unrecognized_option","YARD::CLI::Command","YARD/CLI/Command.html#method-i-unrecognized_option","(err)","<p>Callback when an unrecognize option is parsed\n<p>@param [OptionParser::ParseError] err the exception raised …\n"],["unrecognized_option","YARD::CLI::Graph","YARD/CLI/Graph.html#method-i-unrecognized_option","(err)",""],["unshift","YARD::Templates::Section","YARD/Templates/Section.html#method-i-unshift","(*args)",""],["update","SymbolHash","SymbolHash.html#method-i-update","(hash)","<p>Updates the object with the contents of another Hash object. This method\nmodifies the original SymbolHash …\n"],["update","YARD::Options","YARD/Options.html#method-i-update","(opts)","<p>Updates values from an options hash or options object on this object. All\nkeys passed should be key names …\n"],["url_for","YARD::Server::Commands::SearchCommand","YARD/Server/Commands/SearchCommand.html#method-i-url_for","(object)",""],["url_for","YARD::Server::DocServerHelper","YARD/Server/DocServerHelper.html#method-i-url_for","(obj, anchor = nil, relative = false)","<p>Modifies {Templates::Helpers::HtmlHelper#url_for} to return a URL instead\nof a disk location. @param …\n"],["url_for","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-url_for","(obj, anchor = nil, relative = true)","<p>Returns the URL for an object.\n<p>@param [String, CodeObjects::Base] obj the object (or object path) to link\n…\n"],["url_for_file","YARD::Server::DocServerHelper","YARD/Server/DocServerHelper.html#method-i-url_for_file","(filename, anchor = nil)","<p>Modifies {Templates::Helpers::HtmlHelper#url_for_file} to return a URL\ninstead of a disk location. @param …\n"],["url_for_file","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-url_for_file","(filename, anchor = nil)","<p>Returns the URL for a specific file\n<p>@param [String, CodeObjects::ExtraFileObject] filename the filename …\n"],["url_for_frameset","YARD::Server::DocServerHelper","YARD/Server/DocServerHelper.html#method-i-url_for_frameset","()","<p>Returns the frames URL for the page @return (see\nTemplates::Helpers::HtmlHelper#url_for_frameset)\n"],["url_for_frameset","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-url_for_frameset","()","<p>Returns the URL for the frameset page\n<p>@return [String] the URL pointing to the frames page @since 0.8.0 …\n"],["url_for_index","YARD::Server::DocServerHelper","YARD/Server/DocServerHelper.html#method-i-url_for_index","()","<p>Returns the URL for the alphabetic index page @return (see\nTemplates::Helpers::HtmlHelper#url_for_index …\n"],["url_for_index","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-url_for_index","()","<p>Returns the URL for the alphabetic index page\n<p>@return [String] the URL pointing to the first main page …\n"],["url_for_list","YARD::Server::DocServerHelper","YARD/Server/DocServerHelper.html#method-i-url_for_list","(type)","<p>Modifies {Templates::Helpers::HtmlHelper#url_for_list} to return a URL\nbased on the list prefix instead …\n"],["url_for_list","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-url_for_list","(type)","<p>Returns the URL for a list type\n<p>@param [String, Symbol] type the list type to generate a URL for @return …\n"],["url_for_main","YARD::Server::DocServerHelper","YARD/Server/DocServerHelper.html#method-i-url_for_main","()","<p>Returns the main URL, first checking a readme and then linking to the index\n@return (see Templates::Helpers::HtmlHelper#url_for_main …\n"],["url_for_main","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-url_for_main","()","<p>Returns the URL for the main page (README or alphabetic index)\n<p>@return [String] the URL pointing to the …\n"],["urlencode","YARD::Server::DocServerSerializer","YARD/Server/DocServerSerializer.html#method-i-urlencode","(name)",""],["urlencode","YARD::Templates::Helpers::HtmlHelper","YARD/Templates/Helpers/HtmlHelper.html#method-i-urlencode","(text)","<p>Escapes a URL\n<p>@param [String] text the URL @return [String] the escaped URL\n"],["use_indented_text","YARD::Tags::MethodDirective","YARD/Tags/MethodDirective.html#method-i-use_indented_text","()",""],["validated_attribute_names","YARD::Handlers::Ruby::AttributeHandler","YARD/Handlers/Ruby/AttributeHandler.html#method-i-validated_attribute_names","(params)","<p>Strips out any non-essential arguments from the attr statement.\n<p>@param [Array&lt;Parser::Ruby::AstNode&gt;] …\n"],["validated_parser_type","YARD::Parser::SourceParser","YARD/Parser/SourceParser.html#method-c-validated_parser_type","(type)","<p>Returns the validated parser type. Basically, enforces that :ruby type is\nnever set if the Ripper library …\n"],["value=","YARD::CodeObjects::ConstantObject","YARD/CodeObjects/ConstantObject.html#method-i-value-3D","(value)",""],["values","YARD::RegistryStore","YARD/RegistryStore.html#method-i-values","(reload = false)","<p>Gets all code objects from the store. Loads the entire database if\n<code>reload</code> is <code>true</code>\n<p>@param [Boolean] reload …\n"],["values_for_type","YARD::RegistryStore","YARD/RegistryStore.html#method-i-values_for_type","(type, reload = false)","<p>@param [Symbol] type the type to look for @return\n[Array&lt;CodeObjects::Base&gt;] a list of objects …\n"],["verify_markup_options","YARD::CLI::Yardoc","YARD/CLI/Yardoc.html#method-i-verify_markup_options","()","<p>Verifies that the markup options are valid before parsing any code. Failing\nearly is better than failing …\n"],["view_item","YARD::CLI::Config","YARD/CLI/Config.html#method-i-view_item","()",""],["visibility=","YARD::CodeObjects::Base","YARD/CodeObjects/Base.html#method-i-visibility-3D","(v)",""],["visibility=","YARD::Handlers::Base","YARD/Handlers/Base.html#method-i-visibility-3D","(v)",""],["visible_results","YARD::Server::Commands::SearchCommand","YARD/Server/Commands/SearchCommand.html#method-i-visible_results","()",""],["visit_event","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-visit_event","(node)",""],["visit_event_arr","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-visit_event_arr","(node)",""],["visit_ns_token","YARD::Parser::Ruby::RipperParser","YARD/Parser/Ruby/RipperParser.html#method-i-visit_ns_token","(token, data, ast_token = false)",""],["warn","YARD::Tags::MacroDirective","YARD/Tags/MacroDirective.html#method-i-warn","()",""],["warn_no_continuations","YARD::Logger","YARD/Logger.html#method-i-warn_no_continuations","()","<p>Warns that the Ruby environment does not support continuations. Applies to\nJRuby, Rubinius and MacRuby …\n"],["windows?","YARD","YARD.html#method-c-windows-3F","()","<p>@return [Boolean] whether YARD is being run inside of Windows\n"],["with_section","YARD::Templates::Template","YARD/Templates/Template.html#method-i-with_section","(&block)",""],["with_serializer","YARD::Templates::Engine","YARD/Templates/Engine.html#method-c-with_serializer","(object, serializer, &block)","<p>Serializes the results of a block with a <code>serializer</code> object.\n<p>@param [CodeObjects::Base] object the code …\n"],["with_yardopts","YARD::Config","YARD/Config.html#method-c-with_yardopts","(&block)","<p>Temporarily loads .yardopts file into @yardopts\n"],["word_wrap","YARD::Serializers::StdoutSerializer","YARD/Serializers/StdoutSerializer.html#method-i-word_wrap","(text, length = 80)","<p>Wraps text to a specific column length\n<p>@param [String] text the text to wrap @param [Fixnum] length the …\n"],["wrap","YARD::Templates::Helpers::TextHelper","YARD/Templates/Helpers/TextHelper.html#method-i-wrap","(text, col = 72)","<p>@return [String] wraps text at <code>col</code> columns.\n"],["wrap_layout","YARD::CLI::Display","YARD/CLI/Display.html#method-i-wrap_layout","(contents)",""],["writable?","YARD::Tags::AttributeDirective","YARD/Tags/AttributeDirective.html#method-i-writable-3F","()",""],["write_checksums","YARD::RegistryStore","YARD/RegistryStore.html#method-i-write_checksums","()",""],["write_object_types","YARD::RegistryStore","YARD/RegistryStore.html#method-i-write_object_types","()",""],["write_proxy_types","YARD::RegistryStore","YARD/RegistryStore.html#method-i-write_proxy_types","()","<p>@deprecated The registry no longer tracks proxy types\n"],["writer?","YARD::CodeObjects::MethodObject","YARD/CodeObjects/MethodObject.html#method-i-writer-3F","()","<p>@return [Boolean] whether the method is a writer attribute @since 0.5.3\n"],["xhr?","Rack::Request","Rack/Request.html#method-i-xhr-3F","()",""],["xhr?","WEBrick::HTTPRequest","WEBrick/HTTPRequest.html#method-i-xhr-3F","()",""],["yardoc_file=","YARD::Registry","YARD/Registry.html#method-c-yardoc_file-3D","(v)",""],["yardoc_file_for_gem","YARD::Registry","YARD/Registry.html#method-c-yardoc_file_for_gem","(gem, ver_require = \">= 0\", for_writing = false)","<p>Returns the .yardoc file associated with a gem.\n<p>@param [String] gem the name of the gem to search for …\n"],["yardopts","YARD::CLI::YardoptsCommand","YARD/CLI/YardoptsCommand.html#method-i-yardopts","(file = options_file)","<p>Parses the .yardopts file for default yard options @return\n[Array&lt;String&gt;] an array of options …\n"],["yardopts_options","YARD::CLI::YardoptsCommand","YARD/CLI/YardoptsCommand.html#method-i-yardopts_options","(opts)","<p>Adds –[no-]yardopts / –[no-]document\n"],["yieldall","YARD::Templates::Template","YARD/Templates/Template.html#method-i-yieldall","(opts = nil, &block)","<p>Yields all subsections with any extra options\n<p>@param [Hash] opts extra options to be applied to subsections …\n"],["LICENSE","","lib/yard/rubygems/backports/LICENSE_txt.html","","<p>RubyGems is copyrighted free software by Chad Fowler, Rich Kilmer, Jim\nWeirich and others.  You can redistribute …\n"],["MIT","","lib/yard/rubygems/backports/MIT_txt.html","","<p>Copyright © Chad Fowler, Rich Kilmer, Jim Weirich and others.\n<p>Permission is hereby granted, free of …\n"],["custom.css","","lib/yard/server/templates/default/fulldoc/html/css/custom_css.html","","<p>#search_results h1 { margin-bottom: 0; } #search_results p { margin-top: 0;\nmargin-bottom: 25px; } #search_results …\n"],["autocomplete.js","","lib/yard/server/templates/default/fulldoc/html/js/autocomplete_js.html","","\n<pre>jQuery Autocomplete plugin 1.1\n\nCopyright (c) 2009 JÃ¶rn Zaefferer\n\nDual licensed under the MIT and GPL ...</pre>\n"]]}}
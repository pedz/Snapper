

= Snapper

This is a tool to quickly go through one or more snaps.  It currently
can not work with perfpmr output but that is planned.

== Usage

The simplest form is:

  snapper.rb path/to/snap

where +path/to/snap+ is to the top directory of the snap -- the
directory that contains +general+ and other directories.  A list of
snaps can be supplied on a single command line and ultimately that is
where this tool is heading so that configuration errors in VIOS HA
environments can be found or packets from a particular interface on a
particular virtual client flowing out through a SEA and a real adapter
and out to the real network can be easily followed.

  Usage: snapper.rb [options] <path to snap1> [ <path to snap2> ... ]
      -D, --dump                       For each snap, creates a .ruby.dump.gz file
                                       at the base directory of the snap with the
                                       parse tree of the snap.  This file will be
                                       automatically loaded instead of re-parsing
                                       the files within the snap.
      -L, --LOG [class:]level[:path]   If no class is specified, sets the log
                                       level for all loggers and optionally the
                                       log file. If a class is specified, sets the
                                       log level and optionally the log file for
                                       the specified class.  level can be 0, 1, 2,
                                       3, 4, DEBUG, INFO, WARN, ERROR, or FATAL.
                                       path may be a path to a file that is opened
                                       in append mode, +STDERR+, or +STDOUT+.
                                       Multiple -L options can be specified and
                                       are processed in order.  The default level
                                       is INFO (1) and the default output is
                                       STDERR.
      -k, --print-keys                 Print the top level keys of the first snap
      -l, --level N                    Output verbosity level from -1 to 11
                                       default is 1
      -o, --output file                Specify an output file
                                       Default is STDOUT
      -q file                          Sets the file that the Quick debug goes to
                                       default is $stderr
      -h, --html path                  Outputs an html file that shows the layout
                                       of the systems
          --[no-]one-file              Embed (the default --one-file) the
                                       Javascript and CSS files into the HTML
                                       output or (--no-one-file) keep them
                                       separate.
          --flat-keys                  Print the flat_keys and value of the entire
                                       database from the first snap.
          --interactive                Drops the user into an irb session
      -?, --help                       Show this message

The +-D+ option is detailed in the -D[#label-D] section.

The +-L+ option is to tweak the logging of the different classes.
This is used mostly for debugging purposes.  You can set a global log
level and output file that applies to all classes as well as specify
individual levels and files per class.  Radical overkill but it was
educational.

The +--print_keys+ option is to help with debugging new code.  It
prints out the keys in the top level database container.

The levels are described in the Levels[#label-Levels] section.

For completeness sake, the output file can be specified with the +-o+
or +--output+ option.

The code has a +qb+ method for quickly adding debug statements.  The
+-q+ option can route this to a specific file.

Snapper can also produce an html view of the snaps.  This is specified
with the +-h+ or +--html+ option.  If +path+ does not end with
+.html+, it is added on for you.  These files can get to be grossly
huge but the browsers seem to eat them up fine.  See HTML[#label-HTML]
as well.

For debugging the html output, it is nice if the Javascript and CSS
are not put into the HTML document but are read in when the document
is loaded.  In this way the Javascript code can be developed by simply
doing a browser refresh rather than recreate and reload the entire
HTML file.  The +--no-one-file+ option keeps the Javascript and CSS
separate.  The default +--one-file+ option embeds the Javascript and
CSS code which makes it easy to move the HTML file around and load it
into a browser.

The +--flat-keys+ option dumps out the flattened keys (see
Item#flat_keys) of the database from the first snap.  This is useful
in debugging to show the path to get to particular fields but it may
also be useful for diagnostic purposes because after the output is
produced, simple things like grep will search and find items very
quickly.

The +--interactive+ flag is a bit experimental but in essence it
parses the dump and then drops the user into an interactive Ruby
session.

== Features

Here are the list of features for snapper

=== Configurable

Snapper is written in Ruby and since Ruby is interpreted, it allows
snapper to be highly configurable.  Some concepts I have are not
implemented yet but I know how I will implement them.  In the end,
almost all of snapper will be configurable by the individual user.  As
will be described, snapper operates in phases.  The methods used in
all of these phases allow users to add in their own code.  In brief, a
user will be able to have a .snapper directory in his home directory
with Ruby snippets that will be loaded when snapper is run.

<b>Oh Gee..</b>, you say, <b>I don't know Ruby</b>.  True enough but
you probably can mimic other code snippets and poke at them until you
get them to do what you want.  Since Ruby is interpreted, the source
is visible and so you will not need to really *create* fresh Ruby code
as much as bastardize existing parts... very similar to how typical
developers work <smirk>.

Currently, snapper is glaringly focused on TCP Kernel users but I
truly hope some volunteers step up and help make this more useful to
other groups.

=== Phases

Snapper is set up to work in four phases.  

The first phase is the parse phase where the snaps are ransacked and
as much of it is parsed as possible.  Details of parsing will be
described in the Parsers[#label-Parsers] section.  If the +-D+ option
was given, a compressed version of the parse tree is saved in
+.ruby.snap.bz+ in the top level directory.  See -D[#label-D] for more
details.  Adding a parser depends upon if an entire file needs to be
parsed (see {Snapper.add_file_parsing_patterns}) or if a section of a
dot file needs to be parsed (see {DotFileParser} and
{DotFileParser#parse}).

The second phase is after the parsing of each snap and are general
routines that go through a single {Snap} making things easier to work
with for the later stages.  The best example of this is {Devices}
which goes through the parsed data creating a {Device} for each
logical device in the +CuDv+ output.  The Device will have a name like
_ent0_ as well as entries for the +cudv+, +cuat+, +pddv+, +pdat+,
+entstat+, +lsattr+, +errpt+, etc.  Devices knows where all those
different pieces reside in the snap and pulls them into one general
object.  Another example is Interfaces that pulls parsed data gathered
from <tt>netstat -in</tt> as well as <tt>ifconfig -a</tt> (if it is
present) into a single object.  This allows later processing to be
more easily written.  See {Snapper.add_snap_processor} for more
details.

The third phase has been implemented but there are no examples yet.
They are called batch processors to process the entire {Batch} of
snaps.  After all the snaps are parsed, a {Batch} is created which has
a list of {CEC}s.  Each CEC has a list of {LPAR}s.  Each LPAR has a
list of {Snap}s.  The batch processors will be passed the batch and
will be able to do things like making sure that the control channel of
two SEAs on two different LPARs but on the same CEC are using the same
VLAN tag.

The fourth phrase is the output phase.  The output phrase is done via
{Filter} instances.  Currently all of the Filter instances are in the
Filters.rb file but eventually they will also be pulled in from user
config files.  You can view this file on the {file:Filters Filters}
page.

As mentioned, a user can add in a parser for an part of a snap
currently unparsed, add in a Snap processor, a Batch processor, and
create filters to more precisely control the output.

=== Levels

Levels go from -1 up to (as Spinal Tap says) 11.  

The purpose of level -1 is for debugging.  All normal output is
stopped and the user will only see the debug statements.

The purpose of level 0 is to give a very quick overview of the set up.
The output from the sample snap is this:

   1 CEC model:9117-MMC CPU:POWER7 firmware:AM740_100 Id:0X8000007F46B00000
   2   Host: aph001
   3     Snap taken 2013-07-17T08:18:26+02:00
   4       en9 10.201.10.31 mtu:1500 mac:0.0.c9.d9.e8.bf ipkts:0 opkts:14
   5         ent9 pci/elxentdd 
   6       en22 10.201.55.100 mtu:1500 mac:e4.1f.13.fd.29.75 ipkts:190896 opkts:210601
   7         ent22 seadd State:PRIMARY Bridge Mode:All
   8           ent2 pci/goentdd 
   9           ent15 vioentdd 
  10           ent10 vioentdd ctrl channel
  11       lo0 127.0.0.1  mtu:16896 mac: ipkts:5735 opkts:5735
  12       ent23 seadd State:PRIMARY Bridge Mode:All
  13         ent20 ethchandd 
  14           ent0 pci/elxentdd 
  15           ent8 pci/elxentdd 
  16         ent16 vioentdd 
  17         ent11 vioentdd ctrl channel
  18       ent24 seadd State:PRIMARY Bridge Mode:All
  19         ent21 ethchandd 
  20           ent6 pci/elxentdd 
  21           ent7 pci/elxentdd 
  22         ent17 vioentdd 
  23         ent12 vioentdd ctrl channel
  24       ent25 seadd State:PRIMARY Bridge Mode:All
  25         ent3 pci/goentdd 
  26         ent18 vioentdd 
  27         ent13 vioentdd ctrl channel
  28       ent26 seadd State:PRIMARY Bridge Mode:All
  29         ent4 pci/goentdd 
  30         ent19 vioentdd 
  31         ent14 vioentdd ctrl channel
  32       Unused Adapters
  33         ent1 pci/elxentdd 
  34         ent5 pci/goentdd 

Line 1 is for the CEC and includes the mode, CPU type, firmware level,
and a little known attribute called +id_to_system+ that is found in
the +sys0+ device.

Line 2 is the hostname.  The hostname is pulled from the hostname
attribute of the inet0 device.  Note it is indented below the CEC.
The indenting is how children of a parent container are denoted.

Line 3 is for the {Snap}.  There can be multiple snaps for the same
host.  The date and time that the +general.snap+ file was created is
given.

Line 4 starts the interfaces.  Part of snappre is it also represents
how I think and go through a snap.  The first piece I want is the
interfaces.  This tells me which adapters are being used.  Most of the
data shown on the interface comes from the <tt>netstat -in</tt>
section of +tcpip.snap+.  I want to also add in <tt>ifconfig -a</tt>
if it is present and much of the data could also come from +CuDv+ and
+CuAt+ entries if no <tt>netstat -in</tt> section is found in the
snap.  Each interface, also prints the device associated with it
nested one level deeper.

Line 5 is the device that line 4 is on top of.  For level 0, only the
device name and the driver are printed.  I could add the description
as seen from lsdev.adapters but I personally find that useless.

Line 6 starts the 2nd interface.  In this case, the device on line 7
is a SEA so it is printed along with the adapters that it contains
nested one level further.  The real adapter is listed first.  Then the
VEAs used to carry the load.  Last the control adapter.  The control
adapter is marked as such.

Line 11 ends the interface section with loopback.

Lines 12 through 31 are now the list of SEAs.  Only the SEAs that have
not already been printed are listed (e.g. ent22 is not repeated).  In
my thought process, this is the second step.  At this point, I have
all the active pieces listed out.

Last, lines 32 through 34 list the unused adapters since recently that
has been something that has been important.  These are listed if they
are not part of a SEA, have no interface on top of them (or their
container in the case of adapters within an ether channel), and are
not in the Defined state.

I believe that level 0 output is done.  I can't think of what else I
want to add to it.  Remember, the default is level 1 so the user must
ask for level 0 output so I assume minimal output is desired.

The default output of snapper allowing the level to default to 1 is
shown below:

   1 CEC model:9117-MMC CPU:POWER7 firmware:AM740_100 Id:0X8000007F46B00000
   2   Host: aph001
   3     Snap taken 2013-07-17T08:18:26+02:00
   4       en9 10.201.10.31 mtu:1500 mac:0.0.c9.d9.e8.bf ipkts:0 opkts:14
   5         ent9 pci/elxentdd 
   6           Receive Statistics,Receive Errors:685617
   7           Receive Statistics,DMA Overrun:685617
   8 
   9       en22 10.201.55.100 mtu:1500 mac:e4.1f.13.fd.29.75 ipkts:190896 opkts:210601
  10         ent22 seadd State:PRIMARY Bridge Mode:All
  11           16 error log entries
  12           ent2 pci/goentdd 
  13           ent15 vioentdd 
  14             Port VLAN ID: 300 on ETHERNET0 Active:True
  15             Hypervisor Send Failures: 4927
  16           ent10 vioentdd ctrl channel
  17             Port VLAN ID: 1300 on ETHERNET0
  18 
  19       lo0 127.0.0.1  mtu:16896 mac: ipkts:5735 opkts:5735
  20 
  21       ent23 seadd State:PRIMARY Bridge Mode:All
  22         19 error log entries
  23         Receive Statistics,Receive Errors:842400
  24         Receive Statistics,DMA Overrun:842400
  25         Other Statistics,ICMP error packets sent:931
  26         ent20 ethchandd 
  27           Receive Statistics,Receive Errors:842400
  28           Receive Statistics,DMA Overrun:842400
  29           ent0 pci/elxentdd 
  30             Receive Statistics,Receive Errors:156783
  31             Receive Statistics,DMA Overrun:156783
  32           ent8 pci/elxentdd 
  33             Receive Statistics,Receive Errors:685617
  34             Receive Statistics,DMA Overrun:685617
  35         ent16 vioentdd 
  36           Port VLAN ID: 4094 VLAN Tag IDs [104, 105, 106, 201, 202, 203, 205, 209, 210, 248, 250, 267, 288, 801, 802] on ETHERNET0 Active:True
  37           Hypervisor Send Failures: 21562715
  38         ent11 vioentdd ctrl channel
  39           Port VLAN ID: 1310 on ETHERNET0
  40 
  41       ent24 seadd State:PRIMARY Bridge Mode:All
  42         14 error log entries
  43         ent21 ethchandd 
  44           ent6 pci/elxentdd 
  45           ent7 pci/elxentdd 
  46         ent17 vioentdd 
  47           Port VLAN ID: 320 on ETHERNET0 Active:True
  48           Hypervisor Send Failures: 141
  49         ent12 vioentdd ctrl channel
  50           Port VLAN ID: 1320 on ETHERNET0
  51 
  52       ent25 seadd State:PRIMARY Bridge Mode:All
  53         12 error log entries
  54         ent3 pci/goentdd 
  55         ent18 vioentdd 
  56           Port VLAN ID: 4093 VLAN Tag IDs [270, 275] on ETHERNET0 Active:True
  57           Hypervisor Send Failures: 1250
  58         ent13 vioentdd ctrl channel
  59           Port VLAN ID: 1340 on ETHERNET0
  60 
  61       ent26 seadd State:PRIMARY Bridge Mode:All
  62         16 error log entries
  63         ent4 pci/goentdd 
  64         ent19 vioentdd 
  65           Port VLAN ID: 4092 VLAN Tag IDs [271, 272, 1288] on ETHERNET0 Active:True
  66           Hypervisor Send Failures: 6942
  67         ent14 vioentdd ctrl channel
  68           Port VLAN ID: 1350 on ETHERNET0
  69 
  70       Unused Adapters
  71         ent1 pci/elxentdd 
  72         ent5 pci/goentdd 

The flow is the same.  The CEC, host, interfaces, SEAs, and finally
the unused adapters.

In level 1 mode, the intent is to still be very concise yet point to
possible problem areas.  level 1 output contains alerts which are
settings or conditions that one of the various processors believes to
be either an issue or often leads to an issue.  Processors can add
alerts to the Batch, CEC, LPAR, or Snap depending.

As you can see on samples of line 6 and 7, entstat fields with the
word +error+, +overrun+ or +underrun+ are printed out *if* the value
of the field is not zero.

Line 11 shows a sample of level 1 output for error log entries.  A
count of the error log entries is done to clue the user into the fact
that this device is having errors in the error log.

Line 36 shows a sample of the VLAN tag information for the VEAs.  It
also includes which virtual switch the VEA is connected to and if the
adapter has Trunk set to true, then the Active status is given so it
should be easy to follow packets in a sharing VIOS setup.

Line 37 is our trusty Hypervisor errors we all love.

Since level 1 is the default, the intent is to make the output concise
yet point the user to the trouble areas.  Higher levels can be used if
the user needs more details.

Levels 2 through 11 are very raw and will are changing frequently at
this point.  Currently level 2 is the same as level 1 except it
reports lists the error report errors but removes the duplicates.

=== Filters

Currently there are some concepts that I may change or alter but here
is the current set up.

The base class that the parsers create is an {Item}.  Subclasses of
Item are {Device}, {Interface}, etc.  There is a tree of classes for
entstat starting with the base of {Entstat} which is a subclass of
Item and then specific parsers for the adapters are subclassed off of
Entstat such as {EntstatGoent} or {EntstatEthchan}.

The output is generated or +filtered+ by {Filter}s that are class as
well as level specific.

A filter is added like this:

  Item.add_filter("Device", { level: 0 .. 11 }) do |context, item|
    unless item.printed
      context.output([ item.cudv.name, item.cudv.ddins, context.modifier ].join(' '))
      item['errpt'].print(context.nest) if item['errpt']
      item['entstat'].print(context.nest)    if item['entstat']
      item['lsattr'].print(context.nest)     if item['lsattr']
    end
  end

The first argument specifies the class as a string.  The second
argument is a Range of levels that it is valid for.  The 0 .. 11 is
exactly what it appears -- a range from 0 to 11 inclusive.  We can see
that this calls {Context#output context.output} with a string which
ends up going to standard output.  We also see it calling print for
items within the device such as the list of error log entries, the
entstat output, and the lsattr output.  As mentioned, this hangs off
of the Device class.  Thus when an item's print method is called and
the item is a Device, this filter will get involved.

If, for example, a Sea needs to be printed, since Sea is a subclass of
Device, and Device is a subclass of Item, the list of available
filters come from (in order) Sea, Device, and then Item.  Currently
the list is searched until the *first* filter matches the level
specified on the command line.  If the command line specified an
output level of 4 and Sea does not have a filter for level 4, then the
above Device entry will be used and the Filter entries for Item will
never be really considered.

This current scheme has issues with code reuse and I may alter it.

As the parsers parse the files, they create trees of items.  For
example, in the typical intro for an entstat output we see:

 Transmit Statistics:                          Receive Statistics:
 --------------------                          -------------------
 Packets: 241295                               Packets: 238619
 Bytes: 1995516069                             Bytes: 18097146
 Interrupts: 0                                 Interrupts: 155955
 Transmit Errors: 0                            Receive Errors: 0
 Packets Dropped: 0                            Packets Dropped: 0
                                               Bad Packets: 0

A field of the {Entstat} item will be an entry for 'Transmit
Statistics' as well as an entry for 'Receive Statistics'.  If you have
used hashes in other languages (like Perl), then you should be
familiar with a syntax like:

  item['Receive Statistics']

which returns a hash with entries for each of the attributes listed
below receive statistics such as +Packets+, +Bytes+, +Interrupts+,
etc.

Items have many cute features.  One of them is the key is actually
modified so you can also retrieve the same information via the
original text as above but also via altered text:

  item['receive_statistics']

and you can also retrieve it using dot notition

  item.receive_statistics

These can be cascaded so

  item.receive_statistics.packets

would return 238619 and the 238619 is recognized as an integer so
arithmatic can be done on it.  It should be relatively easy to compute
error rates or percentages.

All this parsing and nesting leaves filtering hard to do.  You don't
really want to pre-find all of the entstat output that have _error_
somewhere in them and then create special statements digging into the
structures just to ask if it is not zero, then print it out.

Added to Item is a method called flat_keys.  Rather than explain what
it does, I'll just show you how to use it:

 1 Filter.add("Entstat", { level: 1 }) do |context, item|
 2   item.flat_keys.each do |key, vavlue|
 3     if /error|overrun|underrun/i.match(key) && value != 0
 4       context.output("#{key}:#{value}")
 5     end
 6   end
 7 end

This is a filter added to Entstat so all of the Entstat subclasses
could use it.  The output of flat_keys is a list of tuples.  The first
is the flattened key, the second is the value.  The flattened key is
the list of hash keys needed to get to the entry separated by commas.
For example, the number of packets received has a flattened key of
+Receive Statistics,Packets+ and in our example, value would be
238619.

Lines 2 and 6 create a loop.  Inside that loop, key and value are set
with successive values.  The if statement starting on line 3 asks if
the key matches the regular expression.  The i at the end is to make
the match ignore case.  If the regular expression matches the key and
the value is not zero, we send to the output a string with the key and
the value.  In the second sample output above where level is set to 1,
this is how lines 21 through 23 and many other lines of output got
produced.

One of the powerful features of Ruby is how code blocks are treated.
They are treated (surprise surprise) as objects.  When Filter.add is
called, it actually has three arguments.  The name, the level, and the
code block starting at the +do+ on line 1 and ending with the +end+ at
line 7.  When the filter code determines that the filter matches and
needs to execute, it just calls the code block (called a Proc) passing
the arguments that it wants to pass.  In this case, the context and
the item.

We have not talked about context.  For now, its enough to know that it
has two methods.  {Context#level context.level} is the level specified
by the user on the command line.  And {Context#output context.output}
will get the argument to standard output.  The arguments in this case
are rather aggressively converted to strings by calling their +to_s+
method.

=== Parsers

The top parser is called based upon the file name.  Currently, this
list can not be modified but we can figure out some way to change that
I'm sure.

For a snap, many files use the DotFileParser.  The files have a
structure to them.  For example a section from tcpip.snap is shown
below.


 .....
 .....    netstat -in
 .....
 
 Name  Mtu   Network     Address           Ipkts Ierrs    Opkts Oerrs  Coll
 en10  1500  link#2      e4.1d.2d.e.fd.60 3367529084     0 3619873322    28     0
 en10  1500  10.126.137. 10.126.137.189   3367529084     0 3619873322    28     0
 en11  9000  link#3      e4.1d.2d.e.fe.1  223991557     0 144231257     5     0
 en11  9000  10.125.32   10.125.32.126    223991557     0 144231257     5     0
 lo0   16896 link#1                       21470805     0 21467696     0     0
 lo0   16896 127         127.0.0.1        21470805     0 21467696     0     0
 lo0   16896 ::1%1                        21470805     0 21467696     0     0
 
 .....
 .....    netstat -v
 .....
 
 -------------------------------------------------------------
 ETHERNET STATISTICS (ent10) :
 Device Type: IEEE 802.3ad Link Aggregation
 Hardware Address: e4:1d:2d:0e:fd:60
 Elapsed Time: 12 days 4 hours 46 minutes 32 seconds
 
 Between each set of output is a banner such as:
 
 .....
 .....    netstat -in
 .....

The DotFileParser converts the command "netstat -in" into a class by
removing all spaces, convert any non-alphanumeric characters into
underscores, and then capitalize the first character.  Thus, "netstat
-in" becomes Netstat_in  (the _ is from the -, not the space).

The DotFileParser then looks to see if a class with that name exists.
If it does, it creates an instance of calls parse on that instance.
If it does not, it uses a generic parser that doesn't really "parse"
but just saves the text.

The basic concept continues.  The Netstat_v parser pickes up the
string after Device Type, in our example "IEEE 802.3ad Link
Aggregation".  In this case, it is a two step process.  It looks to
see if any class has registered to parse that particular device.  In
this case, the EntstatEthchan class has said that it can.  So an
instance of that class is created and parse is called.

When the instance is created, the file io object is passed to it as
well as the "database" created for this particular snap.  The parser
then parses the text from its io object and adds entries to the
database object.  Its probably eaiser for you just to review the code
than to read English text trying to describe it.

The net is however that if some piece of the snap currentl does not
have a parser for it, one can be created and added by the user.

=== PDA

The PDA in snapper is probably the piece that is most cutting edge.
In Automata theory, the simplest machine is the DFA -- deterministic
finite automata.  It is the same as a "state machine".  Given input,
it moves from state to state but the number of states is finite.
Regular expressions fall into the class of languages that DFAs can
parse.

The next step up is the push down automata which basically is a state
machine (DFA) with a stack added on that it can push states on to.
Since the stack is infinite (in theory), this machine can now move
between an infinite number of states.

To parse the entstat output, the PDA class was created.  Using
automata theory terms, "productions" are created that move the machine
from state to state as well as push and pop items from the stack.
With this machine, it is possible to nest down and understand, for
example, when an adapter has multiple transmit queues.  Each transmit
queue becomes its own object with its own set of attributes and
values.

A sample production is:

 # Sample Match:   | Actor State: 
 # States Matched: :normal
 # New State:      :LACP_State
 # State Pushed:   yes
 # States Popped:  0
 # Matched the Actor State: and Partner State: lines
 PDA::Production.new("^\\s*(?<field>(Actor|Partner) State):\\s*$", [:normal, :consumeAll], :LACP_State) do |md, pda|
   field = md[:field]
   value = WriteOnceHash.new
   pda.target[field] = value
   pda.push(value)
 end

The first argument is a regular expression that matches a line in the
entstat output.  Ruby (like other new languages) has magic regular
expressions so that the matches can easily be accessed after a match
is made.

This production says that it is valid if the machine is in the normal
or the consumeAll states.  It says that it moves to a new state -- the
LACP_State.

Within the code block, the first line retrieves the actual text of the
match.  The second line creates a new hash.  The WriteOnceHash is used
so that if the parser gets confused and tried to overwrite a previous
field, it throws an exception.  This makes parser errors obvious and
reduces the possibility that information is being lost in the parsing
phases.

A new field is added to the current target using the matched text as
the key and the new hash as its value.  A push is then done to push
the current state and target.  The new state, briefly is the same as
it was but the new target is the new hash +value+.  When the block
exits, because of the new state of +LACP_State, specified in the third
argument, that state will be entered.

Other Production rules become enabled now that we are in the
+LACP_State+.  In particular, a Production will pop the stack when the
empty line after the "Expired:" line is encountered returning us to
the previous state.

=== Alerts

At the end of parsing each snap, a Snap is created that includes the
database, the path to the top level snap directory, and a list of
alerts.  Likewise at the end of processing all of the snaps, just
before the start of phase 3, a Batch is created that has the list of
snaps, the command line options, and a list of alerts.

The concept is that the snap processors may add to the alert list of
the Snap and the batch processors may add alerts to the alert list of
the Batch.  These lists currently exist but the Alert class and the
routines to print them out do not.

I believe the Alert class will have a text message and it may include
a coloring or it may be that Alerts are always colored red or it may
be that I refuse to do any text coloring at all or (most likely) will
default on but will have a command line option to turn it off and will
automatically turn off when the output is not a tty.

=== -D

When the +-D+ command line option is given, snapper will dump the
current state of the database out to a file called +.ruby.snap.gz+ in
the top level directory as the snap.  Once this file is created, it
will be used in place of the phase 1 parsing.  Note that the dump
currently occurs before the phase 2 processing.  Also, if you are
adding features to snapper, you might need to delete the file to get
the new features to work because the file is really a saved state.  If
you are adding or modifying a parser in particular, the reloaded saved
state will be from before the changes made to the parser.

=== HTML

<b>The HTML feature is often broken as I rearrange the internals of
Snapper.</b>

Snapper can load up a list of snaps and then produce an HTML document
that shows the configuration of the various LPARs and CECs.  Here is a
simple one snap sample. link:../images/snapper-sample.jpg

The diagram may need some explaining.  

The outer grey rectangle is a CEC.  Multiple CECs are handled although
I've only tried two CECs.

The next grey rectangle that consumes the bottom 2/3rds is an LPAR
with a hostname of aph001.  Multiple LPARs within a CEC are handled.

The blue box at the top labeled "ETHERNET0" is a virtual switch as
gleamed from the entstat output from the varoius VEAs that connect to
it.  Multiple virtual switches are handled although, again, I've only
tried two.

The other small blue boxes are some type of ethernet adapter -- either
real, virtual, etherchannel, or SEA.

A pure virtual LPAR has only VEAs.  It will be placed above the
virtual switches.  Other LPARs are put below the virtual switches.
This gives a flow from virtual client out to the real network as going
from top to bottom.

In this case, the LPAR has 5 SEAs which are represented as grey boxes
that encompases the adapters contained within each SEA.  e.g. the grey
box that encompasses ent15, ent10, ent22, and ent2.  The SEA itself is
the center box (going top to bottom) e.g. ent25 is a SEA.  The
adapters above the SEA are the virtual adapters.  The ones connected
to the top of the SEA are the VEAs that carry the load.  e.g. ent15.
There can be multiple of these.  The VEA that connects to the side of
the SEA (e.g. eng14) is the control channel.  The real adapter
connects to the bottom of the SEA.

ent23 and ent24 are SEAs that have a real adapter that is an
etherchannel.  Etherchannels are represented similar to a SEA.  They
have a surrounding grey box that emcompasses all the adapters within
the etherchannel.  The top box is the etherchannel itself with the
primary adapters connecting to the bottom of the etherchannel box (as
all of these here do).  The backup adapter connects to the side of the
etherchannel.

The black triangles are interfaces connect to the left side of the
adapter they are on top of.

Currently vlandds are not handled.  The plan is to have them connect
on the side of their underlying adapter like the interfaces do.

Currently the output is static although if you poke at it enough it
will pop up menus which will currently only lead you to frustration.

== ToDos

Some ToDos that I can think of... I'm sure there are others.

1.  There is a bug in the way I do attributes because some attributes
    can have multiple CuAt entries and I have not taken that into
    account in the Ruby code (the javascript code did).

1.  A more comprehensive review of VIOS settings with the SEAs.  This
    requires matching pairs of SEAs probably via the control channel
    and then making sure that the VEAs are paired correctly.  This is
    especially key for sharing mode.

1.  The coloring output needs to automatically turn off if output is
    not a tty and couple this with options to force it on or off.

1.  Map out the different levels and what each do.
     0.  all off

     1.  alerts only

     2.  structural only -- what is now 0 but also include SEAs vlan
         tag info

     3.  what is now 1
          * errpt collapsed to just counts
          * errors, dma overruns shown.
          * LACP issues
          * Hypervisor errors

     4.  errors with dups removed

     5.  any changed attributes
         all errors

     6.  decroate output -- splats, etc?

     7.  full list of ip addresses

     8.  full list of entstat output

     9.  full list of lsattr

     10. blah blah

     11. all keys hierarchically printed

1.  Should be on level where we print out attributes which are not set
    to their defaults.  This should be for device attributes, no
    options, (anything else?).

1.  Hook ifconfig output into netstat -in output.

1.  Review files down caa and ctsupt path.

1.  fix all specs to include method.

1.  Camelcase classes.

1.  add path to snap output somehow.

1.  Keep working on and finalize the commands idea.
